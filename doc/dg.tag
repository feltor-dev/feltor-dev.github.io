<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.3">
  <compound kind="file">
    <name>adaptive.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>adaptive_8h.html</filename>
    <includes id="memory_8h" name="memory.h" local="yes" imported="no">backend/memory.h</includes>
    <includes id="ode_8h" name="ode.h" local="yes" imported="no">ode.h</includes>
    <includes id="runge__kutta_8h" name="runge_kutta.h" local="yes" imported="no">runge_kutta.h</includes>
    <class kind="struct">dg::Adaptive</class>
    <class kind="struct">dg::EntireDomain</class>
    <class kind="struct">dg::AdaptiveTimeloop</class>
    <namespace>dg</namespace>
    <member kind="function">
      <type>int</type>
      <name>integrate</name>
      <anchorfile>group__time.html</anchorfile>
      <anchor>ga99d218bc1124774a3d98e6bdb0d8eb14</anchor>
      <arglist>(std::string name, ODE &amp;&amp;ode, value_type t0, const ContainerType &amp;u0, value_type t1, ContainerType &amp;u1, value_type dt, ControlFunction control, ErrorNorm norm, value_type rtol, value_type atol=1e-10, value_type reject_limit=2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>integrateERK</name>
      <anchorfile>group__time.html</anchorfile>
      <anchor>ga431f63d850976184cca25d5e832661ad</anchor>
      <arglist>(std::string name, ODE &amp;ode, value_type t0, const ContainerType &amp;u0, value_type t1, ContainerType &amp;u1, value_type dt, ControlFunction control, ErrorNorm norm, value_type rtol, value_type atol=1e-10, value_type reject_limit=2)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>l2norm</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ga40758fa443b6728e1499c7ee16820c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>fast_l2norm</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gac821e1bd12a9e5c2917effafc86b16ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>i_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gaabae9e3a1936ae25cb5ad3bac7f007e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>pi_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gab9435b144161cda6434c7fe0416b4896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>pid_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ga3da5b4b68cceaf18e4c0dd80629d9bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>ex_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ga32b696f59effe7da0f61b68275f6b180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>im_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gacb1d6582ef865f0a098994190f13be15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>imex_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ga3d078141617f2e4fe33df24f289ac6af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>advection.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>advection_8h.html</filename>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">blas.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="yes" imported="no">topology/geometry.h</includes>
    <includes id="enums_8h" name="enums.h" local="yes" imported="no">enums.h</includes>
    <includes id="evaluation_8h" name="evaluation.h" local="yes" imported="no">topology/evaluation.h</includes>
    <includes id="derivatives_8h" name="derivatives.h" local="yes" imported="no">topology/derivatives.h</includes>
    <includes id="mpi__derivatives_8h" name="mpi_derivatives.h" local="yes" imported="no">topology/mpi_derivatives.h</includes>
    <includes id="mpi__evaluation_8h" name="mpi_evaluation.h" local="yes" imported="no">topology/mpi_evaluation.h</includes>
    <class kind="struct">dg::Advection</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>algorithm.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>algorithm_8h.html</filename>
    <includes id="timer_8h" name="timer.h" local="yes" imported="no">backend/timer.h</includes>
    <includes id="transpose_8h" name="transpose.h" local="yes" imported="no">backend/transpose.h</includes>
    <includes id="split__and__join_8h" name="split_and_join.h" local="yes" imported="no">topology/split_and_join.h</includes>
    <includes id="xspacelib_8h" name="xspacelib.h" local="yes" imported="no">topology/xspacelib.h</includes>
    <includes id="evaluation_x_8h" name="evaluationX.h" local="yes" imported="no">topology/evaluationX.h</includes>
    <includes id="derivatives_x_8h" name="derivativesX.h" local="yes" imported="no">topology/derivativesX.h</includes>
    <includes id="weights_x_8h" name="weightsX.h" local="yes" imported="no">topology/weightsX.h</includes>
    <includes id="interpolation_x_8h" name="interpolationX.h" local="yes" imported="no">topology/interpolationX.h</includes>
    <includes id="projection_x_8h" name="projectionX.h" local="yes" imported="no">topology/projectionX.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="yes" imported="no">topology/geometry.h</includes>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">blas.h</includes>
    <includes id="helmholtz_8h" name="helmholtz.h" local="yes" imported="no">helmholtz.h</includes>
    <includes id="pcg_8h" name="pcg.h" local="yes" imported="no">pcg.h</includes>
    <includes id="bicgstabl_8h" name="bicgstabl.h" local="yes" imported="no">bicgstabl.h</includes>
    <includes id="lgmres_8h" name="lgmres.h" local="yes" imported="no">lgmres.h</includes>
    <includes id="functors_8h" name="functors.h" local="yes" imported="no">functors.h</includes>
    <includes id="multistep_8h" name="multistep.h" local="yes" imported="no">multistep.h</includes>
    <includes id="elliptic_8h" name="elliptic.h" local="yes" imported="no">elliptic.h</includes>
    <includes id="runge__kutta_8h" name="runge_kutta.h" local="yes" imported="no">runge_kutta.h</includes>
    <includes id="adaptive_8h" name="adaptive.h" local="yes" imported="no">adaptive.h</includes>
    <includes id="extrapolation_8h" name="extrapolation.h" local="yes" imported="no">extrapolation.h</includes>
    <includes id="multigrid_8h" name="multigrid.h" local="yes" imported="no">multigrid.h</includes>
    <includes id="refined__elliptic_8h" name="refined_elliptic.h" local="yes" imported="no">refined_elliptic.h</includes>
    <includes id="arakawa_8h" name="arakawa.h" local="yes" imported="no">arakawa.h</includes>
    <includes id="advection_8h" name="advection.h" local="yes" imported="no">advection.h</includes>
    <includes id="poisson_8h" name="poisson.h" local="yes" imported="no">poisson.h</includes>
    <includes id="simpsons_8h" name="simpsons.h" local="yes" imported="no">simpsons.h</includes>
    <includes id="nullstelle_8h" name="nullstelle.h" local="yes" imported="no">nullstelle.h</includes>
    <includes id="average_8h" name="average.h" local="yes" imported="no">topology/average.h</includes>
    <includes id="average__mpi_8h" name="average_mpi.h" local="yes" imported="no">topology/average_mpi.h</includes>
    <includes id="mpi__init_8h" name="mpi_init.h" local="yes" imported="no">backend/mpi_init.h</includes>
  </compound>
  <compound kind="file">
    <name>andersonacc.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>andersonacc_8h.html</filename>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">blas.h</includes>
    <includes id="operator_8h" name="operator.h" local="yes" imported="no">topology/operator.h</includes>
    <class kind="struct">dg::AndersonAcceleration</class>
    <namespace>dg</namespace>
    <member kind="typedef">
      <type>AndersonAcceleration&lt; ContainerType &gt;</type>
      <name>FixedPointIteration</name>
      <anchorfile>namespacedg.html</anchorfile>
      <anchor>add1f6996ff3eaa80e3e6720b6898058b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>arakawa.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>arakawa_8h.html</filename>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">blas.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="yes" imported="no">topology/geometry.h</includes>
    <includes id="enums_8h" name="enums.h" local="yes" imported="no">enums.h</includes>
    <includes id="evaluation_8h" name="evaluation.h" local="yes" imported="no">topology/evaluation.h</includes>
    <includes id="derivatives_8h" name="derivatives.h" local="yes" imported="no">topology/derivatives.h</includes>
    <includes id="mpi__derivatives_8h" name="mpi_derivatives.h" local="yes" imported="no">topology/mpi_derivatives.h</includes>
    <includes id="mpi__evaluation_8h" name="mpi_evaluation.h" local="yes" imported="no">topology/mpi_evaluation.h</includes>
    <class kind="struct">dg::ArakawaX</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>average_dispatch.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>average__dispatch_8h.html</filename>
    <namespace>dg</namespace>
    <member kind="function">
      <type>void</type>
      <name>transpose</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>gaf9b1ec92041d094f14481ad8169d12c4</anchor>
      <arglist>(unsigned nx, unsigned ny, const ContainerType &amp;in, ContainerType &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extend_line</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga22daca05d0d7672ed8c4f5da982cf49b</anchor>
      <arglist>(unsigned nx, unsigned ny, const ContainerType &amp;in, ContainerType &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extend_column</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga00707a09c19ba5fdde979339ae959506</anchor>
      <arglist>(unsigned nx, unsigned ny, const ContainerType &amp;in, ContainerType &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>densematrix.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>densematrix_8h.html</filename>
    <namespace>dg</namespace>
    <member kind="function">
      <type>auto</type>
      <name>asDenseMatrix</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>gad9756e05d8a674f20562b0811104279d</anchor>
      <arglist>(const std::vector&lt; const ContainerType * &gt; &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>asDenseMatrix</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>ga816c360401736b6c0897186fefdf1e4b</anchor>
      <arglist>(const std::vector&lt; const ContainerType * &gt; &amp;in, unsigned size)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; const ContainerType * &gt;</type>
      <name>asPointers</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>ga353dc6b8616f337e9f02638ac60bf640</anchor>
      <arglist>(const std::vector&lt; ContainerType &gt; &amp;in)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>exceptions.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>exceptions_8h.html</filename>
    <class kind="class">dg::Message</class>
    <class kind="class">dg::Error</class>
    <class kind="struct">dg::Fail</class>
    <namespace>dg</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_ping_</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>a6e389c07f185af0e74ef30554f181593</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>execution_policy.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>execution__policy_8h.html</filename>
    <class kind="struct">dg::AnyPolicyTag</class>
    <class kind="struct">dg::NoPolicyTag</class>
    <class kind="struct">dg::SerialTag</class>
    <class kind="struct">dg::CudaTag</class>
    <class kind="struct">dg::OmpTag</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>matrix_categories.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>matrix__categories_8h.html</filename>
    <class kind="struct">dg::AnyMatrixTag</class>
    <class kind="struct">dg::NotATensorTag</class>
    <class kind="struct">dg::SelfMadeMatrixTag</class>
    <class kind="struct">dg::CuspMatrixTag</class>
    <class kind="struct">dg::MPIMatrixTag</class>
    <class kind="struct">dg::SparseBlockMatrixTag</class>
    <class kind="struct">dg::DenseMatrixTag</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>memory.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>memory_8h.html</filename>
    <class kind="struct">dg::ClonePtr</class>
    <class kind="struct">dg::Buffer</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>mpi_collective.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>mpi__collective_8h.html</filename>
    <includes id="blas1_8h" name="blas1.h" local="yes" imported="no">dg/blas1.h</includes>
    <includes id="memory_8h" name="memory.h" local="yes" imported="no">memory.h</includes>
    <includes id="mpi__communicator_8h" name="mpi_communicator.h" local="yes" imported="no">mpi_communicator.h</includes>
    <class kind="struct">dg::BijectiveComm</class>
    <class kind="struct">dg::SurjectiveComm</class>
    <class kind="struct">dg::GeneralComm</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>mpi_communicator.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>mpi__communicator_8h.html</filename>
    <class kind="struct">dg::aCommunicator</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>mpi_init.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>mpi__init_8h.html</filename>
    <includes id="enums_8h" name="enums.h" local="yes" imported="no">../enums.h</includes>
    <namespace>dg</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>gac50f6a57627e38ea44e3666543a6c878</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init2d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga057746b047d7696a603d27bdaff24f29</anchor>
      <arglist>(dg::bc bcx, dg::bc bcy, MPI_Comm &amp;comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init2d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga632d3e4c7753d9988a16be5cb0ba3e05</anchor>
      <arglist>(unsigned &amp;n, unsigned &amp;Nx, unsigned &amp;Ny, MPI_Comm comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init2d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga89f67b920ce6f3958eea9e94d00a72fa</anchor>
      <arglist>(dg::bc bcx, dg::bc bcy, unsigned &amp;n, unsigned &amp;Nx, unsigned &amp;Ny, MPI_Comm &amp;comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init3d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga2ba128f78f1497a9d85fb97402f90791</anchor>
      <arglist>(dg::bc bcx, dg::bc bcy, dg::bc bcz, MPI_Comm &amp;comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init3d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga5af0e700d39ee4672deecff4c8bbee92</anchor>
      <arglist>(unsigned &amp;n, unsigned &amp;Nx, unsigned &amp;Ny, unsigned &amp;Nz, MPI_Comm comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init3d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga08fc202782d026a385be5ac44f549c90</anchor>
      <arglist>(dg::bc bcx, dg::bc bcy, dg::bc bcz, unsigned &amp;n, unsigned &amp;Nx, unsigned &amp;Ny, unsigned &amp;Nz, MPI_Comm &amp;comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mpi_matrix.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>mpi__matrix_8h.html</filename>
    <includes id="mpi__vector_8h" name="mpi_vector.h" local="yes" imported="no">mpi_vector.h</includes>
    <includes id="memory_8h" name="memory.h" local="yes" imported="no">memory.h</includes>
    <includes id="timer_8h" name="timer.h" local="yes" imported="no">timer.h</includes>
    <class kind="struct">dg::RowColDistMat</class>
    <class kind="struct">dg::MPIDistMat</class>
    <class kind="struct">dg::TensorTraits&lt; RowColDistMat&lt; LI, LO, C &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; MPIDistMat&lt; L, C &gt; &gt;</class>
    <namespace>dg</namespace>
    <namespace>dg::blas2</namespace>
    <member kind="enumeration">
      <type></type>
      <name>dist_type</name>
      <anchorfile>group__mpi__structures.html</anchorfile>
      <anchor>ga521b6d6524a6d391c746ddc9a1ad5571</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>row_dist</name>
      <anchorfile>group__mpi__structures.html</anchorfile>
      <anchor>gga521b6d6524a6d391c746ddc9a1ad5571a99ba8c51e9d19b4535a343c4b471a562</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>col_dist</name>
      <anchorfile>group__mpi__structures.html</anchorfile>
      <anchor>gga521b6d6524a6d391c746ddc9a1ad5571a4bdc977f2b0fcd3ad828d30c7fd3fb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>gac3840941bd2bb1d64c6ca3fef1f1b960</anchor>
      <arglist>(MatrixType &amp;&amp;M, const ContainerType1 &amp;x, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>ga9bd2015d31362b25d61110f91cf3b0b9</anchor>
      <arglist>(get_value_type&lt; ContainerType1 &gt; alpha, MatrixType &amp;&amp;M, const ContainerType1 &amp;x, get_value_type&lt; ContainerType1 &gt; beta, ContainerType2 &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mpi_vector.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>mpi__vector_8h.html</filename>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" imported="no">exceptions.h</includes>
    <includes id="tensor__traits_8h" name="tensor_traits.h" local="yes" imported="no">tensor_traits.h</includes>
    <includes id="mpi__communicator_8h" name="mpi_communicator.h" local="yes" imported="no">mpi_communicator.h</includes>
    <includes id="memory_8h" name="memory.h" local="yes" imported="no">memory.h</includes>
    <class kind="struct">dg::MPI_Vector</class>
    <class kind="struct">dg::TensorTraits&lt; MPI_Vector&lt; container &gt; &gt;</class>
    <class kind="struct">dg::NearestNeighborComm</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>scalar_categories.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>scalar__categories_8h.html</filename>
    <includes id="vector__categories_8h" name="vector_categories.h" local="yes" imported="no">vector_categories.h</includes>
    <class kind="struct">dg::AnyScalarTag</class>
    <class kind="struct">dg::ScalarTag</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>sparseblockmat.cuh</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>sparseblockmat_8cuh.html</filename>
    <includes id="sparseblockmat_8h" name="sparseblockmat.h" local="yes" imported="no">sparseblockmat.h</includes>
    <namespace>dg</namespace>
    <member kind="typedef">
      <type>EllSparseBlockMat&lt; value_type &gt;</type>
      <name>EllSparseBlockMatDevice</name>
      <anchorfile>namespacedg.html</anchorfile>
      <anchor>af46347a6a7dcba646d600853e8983b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CooSparseBlockMat&lt; value_type &gt;</type>
      <name>CooSparseBlockMatDevice</name>
      <anchorfile>namespacedg.html</anchorfile>
      <anchor>a645775be0812a30c16284b3c96e009b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sparseblockmat.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>sparseblockmat_8h.html</filename>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" imported="no">exceptions.h</includes>
    <includes id="tensor__traits_8h" name="tensor_traits.h" local="yes" imported="no">tensor_traits.h</includes>
    <class kind="struct">dg::EllSparseBlockMat</class>
    <class kind="struct">dg::CooSparseBlockMat</class>
    <class kind="struct">dg::TensorTraits&lt; EllSparseBlockMat&lt; T &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; CooSparseBlockMat&lt; T &gt; &gt;</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>tensor_traits.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>tensor__traits_8h.html</filename>
    <includes id="scalar__categories_8h" name="scalar_categories.h" local="yes" imported="no">scalar_categories.h</includes>
    <includes id="vector__categories_8h" name="vector_categories.h" local="yes" imported="no">vector_categories.h</includes>
    <includes id="matrix__categories_8h" name="matrix_categories.h" local="yes" imported="no">matrix_categories.h</includes>
    <includes id="execution__policy_8h" name="execution_policy.h" local="yes" imported="no">execution_policy.h</includes>
    <class kind="struct">dg::TensorTraits</class>
    <namespace>dg</namespace>
    <member kind="typedef">
      <type>typename TensorTraits&lt; std::decay_t&lt; Vector &gt; &gt;::value_type</type>
      <name>get_value_type</name>
      <anchorfile>group__dispatch.html</anchorfile>
      <anchor>ga6cca187a5557469a96917dc4687a22d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename TensorTraits&lt; std::decay_t&lt; Vector &gt; &gt;::tensor_category</type>
      <name>get_tensor_category</name>
      <anchorfile>group__dispatch.html</anchorfile>
      <anchor>ga1cb60b9e327ece9ee05084fe3c75f051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename TensorTraits&lt; std::decay_t&lt; Vector &gt; &gt;::execution_policy</type>
      <name>get_execution_policy</name>
      <anchorfile>group__dispatch.html</anchorfile>
      <anchor>gae65edcfb79d3321ac1e294fb29f3ae23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tensor_traits_cusp.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>tensor__traits__cusp_8h.html</filename>
    <includes id="vector__categories_8h" name="vector_categories.h" local="yes" imported="no">vector_categories.h</includes>
    <includes id="matrix__categories_8h" name="matrix_categories.h" local="yes" imported="no">matrix_categories.h</includes>
    <includes id="tensor__traits_8h" name="tensor_traits.h" local="yes" imported="no">tensor_traits.h</includes>
    <class kind="struct">dg::TensorTraits&lt; cusp::coo_matrix&lt; I, V, M &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; cusp::csr_matrix&lt; I, V, M &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; cusp::dia_matrix&lt; I, V, M &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; cusp::ell_matrix&lt; I, V, M &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; cusp::hyb_matrix&lt; I, V, M &gt; &gt;</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>tensor_traits_scalar.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>tensor__traits__scalar_8h.html</filename>
    <includes id="scalar__categories_8h" name="scalar_categories.h" local="yes" imported="no">scalar_categories.h</includes>
    <includes id="tensor__traits_8h" name="tensor_traits.h" local="yes" imported="no">tensor_traits.h</includes>
    <class kind="struct">dg::TensorTraits&lt; T, std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>tensor_traits_std.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>tensor__traits__std_8h.html</filename>
    <includes id="vector__categories_8h" name="vector_categories.h" local="yes" imported="no">vector_categories.h</includes>
    <includes id="tensor__traits_8h" name="tensor_traits.h" local="yes" imported="no">tensor_traits.h</includes>
    <class kind="struct">dg::TensorTraits&lt; std::vector&lt; T &gt;, std::enable_if_t&lt; !std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; std::vector&lt; T &gt;, std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; std::array&lt; T, N &gt;, std::enable_if_t&lt; !std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; std::array&lt; T, N &gt;, std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; std::map&lt; Key, T &gt; &gt;</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>tensor_traits_thrust.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>tensor__traits__thrust_8h.html</filename>
    <includes id="vector__categories_8h" name="vector_categories.h" local="yes" imported="no">vector_categories.h</includes>
    <includes id="tensor__traits_8h" name="tensor_traits.h" local="yes" imported="no">tensor_traits.h</includes>
    <class kind="struct">dg::TensorTraits&lt; thrust::host_vector&lt; T &gt;, std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; thrust::host_vector&lt; T &gt;, std::enable_if_t&lt; !std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; thrust::device_vector&lt; T &gt; &gt;</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>timer.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>timer_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>transpose.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>transpose_8h.html</filename>
    <includes id="tensor__traits_8h" name="tensor_traits.h" local="yes" imported="no">tensor_traits.h</includes>
    <namespace>dg</namespace>
    <member kind="function">
      <type>Matrix</type>
      <name>transpose</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gaccb5652aaa2d450d97996d4eee6de546</anchor>
      <arglist>(const Matrix &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>typedefs.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>typedefs_8h.html</filename>
    <includes id="sparseblockmat_8h" name="sparseblockmat.h" local="yes" imported="no">sparseblockmat.h</includes>
    <includes id="sparseblockmat_8cuh" name="sparseblockmat.cuh" local="yes" imported="no">sparseblockmat.cuh</includes>
    <includes id="mpi__vector_8h" name="mpi_vector.h" local="yes" imported="no">mpi_vector.h</includes>
    <includes id="mpi__matrix_8h" name="mpi_matrix.h" local="yes" imported="no">mpi_matrix.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::x</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DG_RANK0</name>
      <anchorfile>typedefs_8h.html</anchorfile>
      <anchor>a9bd65eeee6a3f95f56935d1a3f7b2d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; T &gt;</type>
      <name>HVec_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga0adc266f31294130dbaa806586409995</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; double &gt;</type>
      <name>HVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga4fb8e78e7b043edfedb880523f0cd193</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; int &gt;</type>
      <name>iHVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga6dcaf6113666c77a4bd46bf93a16ce4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; float &gt;</type>
      <name>fHVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gafb0778d5da5edc4c082822a84f78656e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::device_vector&lt; double &gt;</type>
      <name>DVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga5bbe4ba51ef8ff8d506979d0beda25b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::device_vector&lt; int &gt;</type>
      <name>iDVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga47171b298736a17b3e4ff54ec561f028</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::device_vector&lt; float &gt;</type>
      <name>fDVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga78b0309b2b460fb21919b29701c8dbb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EllSparseBlockMat&lt; T &gt;</type>
      <name>HMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gae32e68aa84de32e2bd1cc52a7b291328</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EllSparseBlockMat&lt; double &gt;</type>
      <name>HMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gac2134505608b45616787fdb2f6eedc87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EllSparseBlockMat&lt; float &gt;</type>
      <name>fHMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gac24d337dc79871e60dfe2360a8a95577</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EllSparseBlockMatDevice&lt; double &gt;</type>
      <name>DMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gafdf2ecb95cbc87a1544136d28d535f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EllSparseBlockMatDevice&lt; float &gt;</type>
      <name>fDMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gacab47883a25bf01af58765f606f88a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::MPI_Vector&lt; dg::HVec_t&lt; T &gt; &gt;</type>
      <name>MHVec_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga67290cbd3eb84059299270977b69652e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::MPI_Vector&lt; dg::HVec &gt;</type>
      <name>MHVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gac127f65b65c035ebe413aee5abffd6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::MPI_Vector&lt; dg::fHVec &gt;</type>
      <name>fMHVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaaeaa5994e3b512003f682181640f8372</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::MPI_Vector&lt; dg::DVec &gt;</type>
      <name>MDVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga1e23fb8b50d38d43beb4bf3689c20a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::MPI_Vector&lt; dg::fDVec &gt;</type>
      <name>fMDVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaaf5a0cd11a882f188d77db14120433ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NearestNeighborComm&lt; dg::iHVec, thrust::host_vector&lt; const T * &gt;, thrust::host_vector&lt; T &gt; &gt;</type>
      <name>NNCH</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga6dee6cd0954be96337660283c421de71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NearestNeighborComm&lt; dg::iDVec, thrust::device_vector&lt; const T * &gt;, thrust::device_vector&lt; T &gt; &gt;</type>
      <name>NNCD</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga4b94b5be119481526eae16a1831bb3a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NNCH&lt; double &gt;</type>
      <name>dNNCH</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga8e6c8b7e3091e961b10fbf646065b670</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NNCH&lt; float &gt;</type>
      <name>fNNCH</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaf58692e972aa256e5034c76cd8c676d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NNCD&lt; double &gt;</type>
      <name>dNNCD</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga89a3930157f77be79532f3d51c7b3db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NNCD&lt; float &gt;</type>
      <name>fNNCD</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gad6239a57d8e92a0a068dff591891dee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::CooSparseBlockMat&lt; T &gt;</type>
      <name>CooMat_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gadc35dcb99c013f7eb16e2754c603c6b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::CooSparseBlockMat&lt; double &gt;</type>
      <name>CooMat</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga00c1e29dbf19330c5e34986229f480a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::CooSparseBlockMat&lt; float &gt;</type>
      <name>fCooMat</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga1aee695fc9310a94ac59294b7b60e8c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::CooSparseBlockMatDevice&lt; double &gt;</type>
      <name>DCooMat</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gad7412ba17b1dc358ecc70361ced85f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::CooSparseBlockMatDevice&lt; float &gt;</type>
      <name>fDCooMat</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga4e62541a4ca94e1eac9c067a781c13cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RowColDistMat&lt; dg::HMatrix_t&lt; T &gt;, dg::CooMat_t&lt; T &gt;, dg::NNCH&lt; T &gt; &gt;</type>
      <name>MHMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga756b7cfbae82f9b5ea00613fb0f58dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RowColDistMat&lt; dg::HMatrix, dg::CooMat, dg::dNNCH &gt;</type>
      <name>MHMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaff79c734c7916054c7dc24e6bc437161</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RowColDistMat&lt; dg::fHMatrix, dg::fCooMat, dg::fNNCH &gt;</type>
      <name>fMHMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gae7dd83d81a27396178672510700e73af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RowColDistMat&lt; dg::DMatrix, dg::DCooMat, dg::dNNCD &gt;</type>
      <name>MDMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaad32454aa2aca3cbb93448d7b5daf005</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RowColDistMat&lt; dg::fDMatrix, dg::fDCooMat, dg::fNNCD &gt;</type>
      <name>fMDMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga56efb28b1175fb5a065dcbe81d678e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MHVec</type>
      <name>HVec</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>ab2814a5ffb506771ed1452e044b1649a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fMHVec</type>
      <name>fHVec</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a69632b2833880de8a1427c8526b4e17b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MDVec</type>
      <name>DVec</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>aa44a04a91a62ee55bb81cc69702af4eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fMDVec</type>
      <name>fDVec</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a7544b7a9f4a3f575466b3f4aca6f5ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MHMatrix</type>
      <name>HMatrix</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a748835794e471956c63a3f2734c432d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fMHMatrix</type>
      <name>fHMatrix</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a4bfe664876090167e87e8c283f6c3377</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MDMatrix</type>
      <name>DMatrix</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>ad4d3f8cd6fdce4ad94b16d947ea32596</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fMDMatrix</type>
      <name>fDMatrix</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>aabb25c1e55c3d1698a58303321797d64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vector_categories.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>vector__categories_8h.html</filename>
    <includes id="matrix__categories_8h" name="matrix_categories.h" local="yes" imported="no">matrix_categories.h</includes>
    <class kind="struct">dg::AnyVectorTag</class>
    <class kind="struct">dg::SharedVectorTag</class>
    <class kind="struct">dg::MPIVectorTag</class>
    <class kind="struct">dg::RecursiveVectorTag</class>
    <class kind="struct">dg::ArrayVectorTag</class>
    <class kind="struct">dg::StdMapTag</class>
    <class kind="struct">dg::ArrayScalarTag</class>
    <class kind="struct">dg::ThrustVectorTag</class>
    <class kind="struct">dg::CuspVectorTag</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>view.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/backend/</path>
    <filename>view_8h.html</filename>
    <includes id="tensor__traits_8h" name="tensor_traits.h" local="yes" imported="no">tensor_traits.h</includes>
    <class kind="struct">dg::View</class>
    <class kind="struct">dg::TensorTraits&lt; View&lt; ThrustVector &gt; &gt;</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>bicgstabl.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>bicgstabl_8h.html</filename>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">blas.h</includes>
    <includes id="functors_8h" name="functors.h" local="yes" imported="no">functors.h</includes>
    <includes id="typedefs_8h" name="typedefs.h" local="yes" imported="no">backend/typedefs.h</includes>
    <class kind="class">dg::BICGSTABl</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>blas.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>blas_8h.html</filename>
    <includes id="blas1_8h" name="blas1.h" local="yes" imported="no">blas1.h</includes>
    <includes id="blas2_8h" name="blas2.h" local="yes" imported="no">blas2.h</includes>
    <includes id="typedefs_8h" name="typedefs.h" local="yes" imported="no">backend/typedefs.h</includes>
  </compound>
  <compound kind="file">
    <name>blas1.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>blas1_8h.html</filename>
    <includes id="tensor__traits_8h" name="tensor_traits.h" local="yes" imported="no">backend/tensor_traits.h</includes>
    <includes id="tensor__traits__scalar_8h" name="tensor_traits_scalar.h" local="yes" imported="no">backend/tensor_traits_scalar.h</includes>
    <includes id="tensor__traits__thrust_8h" name="tensor_traits_thrust.h" local="yes" imported="no">backend/tensor_traits_thrust.h</includes>
    <includes id="tensor__traits__cusp_8h" name="tensor_traits_cusp.h" local="yes" imported="no">backend/tensor_traits_cusp.h</includes>
    <includes id="tensor__traits__std_8h" name="tensor_traits_std.h" local="yes" imported="no">backend/tensor_traits_std.h</includes>
    <includes id="mpi__vector_8h" name="mpi_vector.h" local="yes" imported="no">backend/mpi_vector.h</includes>
    <includes id="subroutines_8h" name="subroutines.h" local="yes" imported="no">subroutines.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::blas1</namespace>
    <member kind="function">
      <type>get_value_type&lt; ContainerType1 &gt;</type>
      <name>dot</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gaf00778ded011a9f6e8b885924d9306ee</anchor>
      <arglist>(const ContainerType1 &amp;x, const ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>OutputType</type>
      <name>reduce</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga61cf5da3d6fd6325cb24522b7ac8a037</anchor>
      <arglist>(const ContainerType &amp;x, OutputType zero, BinaryOp binary_op, UnaryOp unary_op=UnaryOp())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga0ed8d5b1a17d0e8882b2d253a0d3fbed</anchor>
      <arglist>(const ContainerTypeIn &amp;source, ContainerTypeOut &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scal</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gaa761a1672f82cf652ecb9382c9ebe525</anchor>
      <arglist>(ContainerType &amp;x, get_value_type&lt; ContainerType &gt; alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga48c9fe0980973ca1170b48ed6a800306</anchor>
      <arglist>(ContainerType &amp;x, get_value_type&lt; ContainerType &gt; alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpby</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga5c7ddbf70dd74867e45c9d4f40b36cf7</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x, get_value_type&lt; ContainerType &gt; beta, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpbypgz</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga5ba146d8c2d13dbeb412ff6130233422</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x, get_value_type&lt; ContainerType &gt; beta, const ContainerType2 &amp;y, get_value_type&lt; ContainerType &gt; gamma, ContainerType &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpby</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga0dfb1435b0a4d429d4cd2e8c265cd209</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x, get_value_type&lt; ContainerType &gt; beta, const ContainerType2 &amp;y, ContainerType &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDot</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gad2dcd7cffe760b7bacfdd7647d86e602</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x1, const ContainerType2 &amp;x2, get_value_type&lt; ContainerType &gt; beta, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDot</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga117cb07cd3e8b6a8580bb42a9c00ab40</anchor>
      <arglist>(const ContainerType1 &amp;x1, const ContainerType2 &amp;x2, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDot</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gad8bde5930a50e3cf58af5c19f765ac8e</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x1, const ContainerType2 &amp;x2, const ContainerType3 &amp;x3, get_value_type&lt; ContainerType &gt; beta, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDivide</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gab38b907a9fb2f7039d9a6ffb1c46b649</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x1, const ContainerType2 &amp;x2, get_value_type&lt; ContainerType &gt; beta, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDivide</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga4e30e54e32bab62357425a0240d519ea</anchor>
      <arglist>(const ContainerType1 &amp;x1, const ContainerType2 &amp;x2, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDot</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga12ce2a470cebd649636725f30d88bf97</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x1, const ContainerType2 &amp;y1, get_value_type&lt; ContainerType &gt; beta, const ContainerType3 &amp;x2, const ContainerType4 &amp;y2, get_value_type&lt; ContainerType &gt; gamma, ContainerType &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga493c6b70c8c889beaec1c3a669e3809b</anchor>
      <arglist>(const ContainerType1 &amp;x, ContainerType &amp;y, UnaryOp op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gaad7b58d466d813898b68189b44619210</anchor>
      <arglist>(ContainerType &amp;y, BinarySubroutine f, Functor g, const ContainerType0 &amp;x0, const ContainerTypes &amp;...xs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subroutine</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga7386b5cb0144d5364b8ea8c8ce1482a5</anchor>
      <arglist>(Subroutine f, ContainerType &amp;&amp;x, ContainerTypes &amp;&amp;... xs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>group__backend.html</anchorfile>
      <anchor>gab0ca1b8d3f70004e25ddc2010f7e9e0d</anchor>
      <arglist>(const from_ContainerType &amp;from, ContainerType &amp;to, Params &amp;&amp;... ps)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType</type>
      <name>construct</name>
      <anchorfile>group__backend.html</anchorfile>
      <anchor>ga5dbfc632d4d66d2d926dd525ed7fcea8</anchor>
      <arglist>(const from_ContainerType &amp;from, Params &amp;&amp;... ps)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>blas2.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>blas2_8h.html</filename>
    <includes id="tensor__traits_8h" name="tensor_traits.h" local="yes" imported="no">backend/tensor_traits.h</includes>
    <includes id="tensor__traits__std_8h" name="tensor_traits_std.h" local="yes" imported="no">backend/tensor_traits_std.h</includes>
    <includes id="tensor__traits__thrust_8h" name="tensor_traits_thrust.h" local="yes" imported="no">backend/tensor_traits_thrust.h</includes>
    <includes id="tensor__traits__cusp_8h" name="tensor_traits_cusp.h" local="yes" imported="no">backend/tensor_traits_cusp.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::blas2</namespace>
    <member kind="function">
      <type>get_value_type&lt; MatrixType &gt;</type>
      <name>dot</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>gaee53d6bf6aa0ca3059a49ea696d4d158</anchor>
      <arglist>(const ContainerType1 &amp;x, const MatrixType &amp;m, const ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>get_value_type&lt; MatrixType &gt;</type>
      <name>dot</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>ga8360dc43dc76d7ff585f3a570998f942</anchor>
      <arglist>(const MatrixType &amp;m, const ContainerType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>ga9bd2015d31362b25d61110f91cf3b0b9</anchor>
      <arglist>(get_value_type&lt; ContainerType1 &gt; alpha, MatrixType &amp;&amp;M, const ContainerType1 &amp;x, get_value_type&lt; ContainerType1 &gt; beta, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>gac3840941bd2bb1d64c6ca3fef1f1b960</anchor>
      <arglist>(MatrixType &amp;&amp;M, const ContainerType1 &amp;x, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gemv</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>ga1b7e3b58697b6e93169eebbda63f3ed3</anchor>
      <arglist>(get_value_type&lt; ContainerType1 &gt; alpha, MatrixType &amp;&amp;M, const ContainerType1 &amp;x, get_value_type&lt; ContainerType1 &gt; beta, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gemv</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>ga5f7f59acf79dc654da64ca7e8f212284</anchor>
      <arglist>(MatrixType &amp;&amp;M, const ContainerType1 &amp;x, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transfer</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>ga53701ba3118a2256a93a4d92a7a8a597</anchor>
      <arglist>(const MatrixType &amp;x, AnotherMatrixType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>group__backend.html</anchorfile>
      <anchor>gab8d14b7a823d92037add5899d611d7d9</anchor>
      <arglist>(get_value_type&lt; ContainerType1 &gt; alpha, MatrixType &amp;&amp;M, const ContainerType1 &amp;x, get_value_type&lt; ContainerType1 &gt; beta, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>group__backend.html</anchorfile>
      <anchor>gac419b379a849c48dc3a60ef1e4662166</anchor>
      <arglist>(MatrixType &amp;&amp;M, const ContainerType1 &amp;x, ContainerType2 &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>chebyshev.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>chebyshev_8h.html</filename>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">blas.h</includes>
    <class kind="class">dg::ChebyshevIteration</class>
    <class kind="struct">dg::ChebyshevPreconditioner</class>
    <class kind="struct">dg::ModifiedChebyshevPreconditioner</class>
    <class kind="struct">dg::LeastSquaresPreconditioner</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>code_snippets.dox</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>code__snippets_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>dg_doc.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>dg__doc_8h.html</filename>
    <class kind="struct">dg::Timer</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>elliptic.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>elliptic_8h.html</filename>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">blas.h</includes>
    <includes id="enums_8h" name="enums.h" local="yes" imported="no">enums.h</includes>
    <includes id="memory_8h" name="memory.h" local="yes" imported="no">backend/memory.h</includes>
    <includes id="evaluation_8h" name="evaluation.h" local="yes" imported="no">topology/evaluation.h</includes>
    <includes id="derivatives_8h" name="derivatives.h" local="yes" imported="no">topology/derivatives.h</includes>
    <includes id="mpi__derivatives_8h" name="mpi_derivatives.h" local="yes" imported="no">topology/mpi_derivatives.h</includes>
    <includes id="mpi__evaluation_8h" name="mpi_evaluation.h" local="yes" imported="no">topology/mpi_evaluation.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="yes" imported="no">topology/geometry.h</includes>
    <class kind="class">dg::Elliptic</class>
    <class kind="class">dg::Elliptic3d</class>
    <namespace>dg</namespace>
    <member kind="typedef">
      <type>Elliptic&lt; Geometry, Matrix, Container &gt;</type>
      <name>Elliptic2d</name>
      <anchorfile>group__matrixoperators.html</anchorfile>
      <anchor>gae40a319b095c51491395216d59fd8645</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>enums.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>enums_8h.html</filename>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" imported="no">backend/exceptions.h</includes>
    <namespace>dg</namespace>
    <member kind="enumeration">
      <type></type>
      <name>bc</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga59440bdf436f2874b49aa52b670ed364</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PER</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga59440bdf436f2874b49aa52b670ed364a948704f60491461974ce4fe6339778b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIR</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga59440bdf436f2874b49aa52b670ed364adece0b7644d85f490823799a3b97f7e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIR_NEU</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga59440bdf436f2874b49aa52b670ed364ae1ff2b85fda37868973c8059e3ca3a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEU_DIR</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga59440bdf436f2874b49aa52b670ed364a5832830f6fb508b8932dbafad3d1b57c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEU</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga59440bdf436f2874b49aa52b670ed364ad8a2f69a62e7fdafe1665ae7162e8e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>direction</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gabf9ea3df33484cbb5886e257c3899e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>forward</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ggabf9ea3df33484cbb5886e257c3899e48a573a4a72e7f55df92b88c254a13762f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backward</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ggabf9ea3df33484cbb5886e257c3899e48a3e10d2598f5b58a930631b12774e05cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>centered</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ggabf9ea3df33484cbb5886e257c3899e48a6281b4fc609cb723a615662b5adac9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>space</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga720a6f709941a075d5c8f60ef07c619f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lspace</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga720a6f709941a075d5c8f60ef07c619fadb68409ea987968e600f19adcb7b4538</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xspace</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga720a6f709941a075d5c8f60ef07c619fa235752009881e59ab3ad8de2b904cb85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>coo2d</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gace76090e6c95d39b59a1dee2db968d14</anchor>
      <arglist></arglist>
      <enumvalue file="group__creation.html" anchor="ggace76090e6c95d39b59a1dee2db968d14a9dd4e461268c8034f5c8564e155c67a6">x</enumvalue>
      <enumvalue file="group__creation.html" anchor="ggace76090e6c95d39b59a1dee2db968d14a415290769594460e2e485922904f345d">y</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>coo3d</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga4de4a3d7cd219a55affa992871e8598f</anchor>
      <arglist></arglist>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fa9dd4e461268c8034f5c8564e155c67a6">x</enumvalue>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fa415290769594460e2e485922904f345d">y</enumvalue>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fafbade9e36a3f36d3d676c1b808451dd7">z</enumvalue>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fa3e44107170a520582ade522fa73c1d15">xy</enumvalue>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fa2151a2bc77807b81113febbf50c4bc95">yz</enumvalue>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fadbd69ee9ae289a85ea34dbef8435d7c1">xz</enumvalue>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>bc2str</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaaddc055ad4bead1c127e85c0242e64d4</anchor>
      <arglist>(bc bcx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bc</type>
      <name>str2bc</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga92d83820c2595e12cdff8edb406838f1</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bc</type>
      <name>inverse</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga2fdc7785fdfc55782f5b1b89e5b2dcaa</anchor>
      <arglist>(bc bound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static direction</type>
      <name>str2direction</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gab4d2b5f9ab2d0a8859ffd71d2df85aa1</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>direction2str</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaceda4c77ab8090ef94a943a2d26c11eb</anchor>
      <arglist>(enum direction dir)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static direction</type>
      <name>inverse</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gabcf2294b804eb9fb8bd0bfb8f9d1dcbf</anchor>
      <arglist>(direction dir)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>eve.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>eve_8h.html</filename>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">blas.h</includes>
    <includes id="functors_8h" name="functors.h" local="yes" imported="no">functors.h</includes>
    <class kind="class">dg::EVE</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>extrapolation.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>extrapolation_8h.html</filename>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">blas.h</includes>
    <includes id="operator_8h" name="operator.h" local="yes" imported="no">topology/operator.h</includes>
    <class kind="struct">dg::LeastSquaresExtrapolation</class>
    <class kind="struct">dg::Extrapolation</class>
    <namespace>dg</namespace>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>least_squares</name>
      <anchorfile>group__extrapolation.html</anchorfile>
      <anchor>gaa9846741f5726f11339179f913f0b855</anchor>
      <arglist>(const std::vector&lt; ContainerType0 &gt; &amp;bs, const ContainerType1 &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>functors.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>functors_8h.html</filename>
    <includes id="blas1_8h" name="blas1.h" local="yes" imported="no">blas1.h</includes>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">topology/grid.h</includes>
    <includes id="evaluation_8h" name="evaluation.h" local="yes" imported="no">topology/evaluation.h</includes>
    <includes id="functions_8h" name="functions.h" local="yes" imported="no">topology/functions.h</includes>
    <class kind="struct">dg::ZERO</class>
    <class kind="struct">dg::ONE</class>
    <class kind="struct">dg::CONSTANT</class>
    <class kind="struct">dg::PLUS</class>
    <class kind="struct">dg::EXP</class>
    <class kind="struct">dg::LN</class>
    <class kind="struct">dg::SQRT</class>
    <class kind="struct">dg::Square</class>
    <class kind="struct">dg::InvSqrt</class>
    <class kind="struct">dg::INVERT</class>
    <class kind="struct">dg::ABS</class>
    <class kind="struct">dg::AbsMax</class>
    <class kind="struct">dg::AbsMin</class>
    <class kind="struct">dg::POSVALUE</class>
    <class kind="struct">dg::MOD</class>
    <class kind="struct">dg::ISNFINITE</class>
    <class kind="struct">dg::ISNSANE</class>
    <class kind="struct">dg::MinMod</class>
    <class kind="struct">dg::VanLeer</class>
    <class kind="struct">dg::Upwind</class>
    <class kind="struct">dg::UpwindProduct</class>
    <class kind="struct">dg::SlopeLimiter</class>
    <class kind="struct">dg::SlopeLimiterProduct</class>
    <class kind="struct">dg::Iris</class>
    <class kind="struct">dg::Pupil</class>
    <class kind="struct">dg::PsiPupil</class>
    <class kind="struct">dg::Heaviside</class>
    <class kind="struct">dg::Distance</class>
    <class kind="struct">dg::Line</class>
    <class kind="struct">dg::LinearX</class>
    <class kind="struct">dg::LinearY</class>
    <class kind="struct">dg::LinearZ</class>
    <class kind="struct">dg::Gaussian</class>
    <class kind="struct">dg::Cauchy</class>
    <class kind="struct">dg::Gaussian3d</class>
    <class kind="struct">dg::GaussianX</class>
    <class kind="struct">dg::GaussianY</class>
    <class kind="struct">dg::GaussianZ</class>
    <class kind="struct">dg::IslandXY</class>
    <class kind="struct">dg::SinXSinY</class>
    <class kind="struct">dg::CosXCosY</class>
    <class kind="struct">dg::SinXCosY</class>
    <class kind="struct">dg::SinX</class>
    <class kind="struct">dg::SinY</class>
    <class kind="struct">dg::CosY</class>
    <class kind="struct">dg::InvCoshXsq</class>
    <class kind="struct">dg::SinProfX</class>
    <class kind="struct">dg::ExpProfX</class>
    <class kind="struct">dg::GaussianDamping</class>
    <class kind="struct">dg::TanhProfX</class>
    <class kind="struct">dg::PolynomialHeaviside</class>
    <class kind="struct">dg::PolynomialRectangle</class>
    <class kind="struct">dg::IPolynomialHeaviside</class>
    <class kind="struct">dg::DPolynomialHeaviside</class>
    <class kind="struct">dg::ExponentialFilter</class>
    <class kind="struct">dg::Lamb</class>
    <class kind="struct">dg::Vortex</class>
    <class kind="struct">dg::BathRZ</class>
    <class kind="struct">dg::Horner2d</class>
    <class kind="struct">dg::Histogram</class>
    <class kind="struct">dg::Histogram2D</class>
    <class kind="struct">dg::WallDistance</class>
    <namespace>dg</namespace>
    <member kind="define">
      <type>#define</type>
      <name>M_PI</name>
      <anchorfile>functors_8h.html</anchorfile>
      <anchor>ae71449b1cc6e6250b91f539153a7a0d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>helmholtz.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>helmholtz_8h.html</filename>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">blas.h</includes>
    <includes id="elliptic_8h" name="elliptic.h" local="yes" imported="no">elliptic.h</includes>
    <class kind="struct">dg::Helmholtz</class>
    <class kind="struct">dg::Helmholtz3d</class>
    <class kind="struct">dg::Helmholtz2</class>
    <namespace>dg</namespace>
    <member kind="typedef">
      <type>Helmholtz&lt; Geometry, Matrix, Container &gt;</type>
      <name>Helmholtz2d</name>
      <anchorfile>group__matrixoperators.html</anchorfile>
      <anchor>ga97e96ca43b1ba76d3f820afc72b1d753</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>implicit.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>implicit_8h.html</filename>
    <includes id="pcg_8h" name="pcg.h" local="yes" imported="no">pcg.h</includes>
    <includes id="andersonacc_8h" name="andersonacc.h" local="yes" imported="no">andersonacc.h</includes>
    <class kind="struct">dg::DefaultSolver</class>
    <class kind="struct">dg::FixedPointSolver</class>
    <class kind="struct">dg::AndersonSolver</class>
    <namespace>dg</namespace>
    <member kind="function">
      <type>auto</type>
      <name>make_default_solver</name>
      <anchorfile>namespacedg.html</anchorfile>
      <anchor>a0315e003319d9a1194625a274c25afed</anchor>
      <arglist>(Implicit &amp;im, const ContainerType &amp;copyable, unsigned max_iter, get_value_type&lt; ContainerType &gt; eps, bool benchmark=true)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lgmres.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>lgmres_8h.html</filename>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">blas.h</includes>
    <includes id="functors_8h" name="functors.h" local="yes" imported="no">functors.h</includes>
    <class kind="class">dg::LGMRES</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>multigrid.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>multigrid_8h.html</filename>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" imported="no">backend/exceptions.h</includes>
    <includes id="memory_8h" name="memory.h" local="yes" imported="no">backend/memory.h</includes>
    <includes id="fast__interpolation_8h" name="fast_interpolation.h" local="yes" imported="no">topology/fast_interpolation.h</includes>
    <includes id="interpolation_8h" name="interpolation.h" local="yes" imported="no">topology/interpolation.h</includes>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">blas.h</includes>
    <includes id="pcg_8h" name="pcg.h" local="yes" imported="no">pcg.h</includes>
    <includes id="chebyshev_8h" name="chebyshev.h" local="yes" imported="no">chebyshev.h</includes>
    <includes id="eve_8h" name="eve.h" local="yes" imported="no">eve.h</includes>
    <includes id="timer_8h" name="timer.h" local="yes" imported="no">backend/timer.h</includes>
    <includes id="mpi__projection_8h" name="mpi_projection.h" local="yes" imported="no">topology/mpi_projection.h</includes>
    <class kind="struct">dg::NestedGrids</class>
    <class kind="struct">dg::MultigridCG2d</class>
    <namespace>dg</namespace>
    <member kind="function">
      <type>void</type>
      <name>nested_iterations</name>
      <anchorfile>group__multigrid.html</anchorfile>
      <anchor>ga1aca7222c69b765e8d304791595c09cb</anchor>
      <arglist>(NestedOperator &amp;&amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op, Nested &amp;nested)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multigrid_cycle</name>
      <anchorfile>group__multigrid.html</anchorfile>
      <anchor>ga7350dc0405686518b82a740bd74b5584</anchor>
      <arglist>(NestedOperator &amp;&amp;op, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_down, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_up, Nested &amp;nested, unsigned gamma, unsigned p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>full_multigrid</name>
      <anchorfile>group__multigrid.html</anchorfile>
      <anchor>ga72b81008cfe6a0d945666c780fa51460</anchor>
      <arglist>(NestedOperator &amp;&amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_down, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_up, Nested &amp;nested, unsigned gamma, unsigned mu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fmg_solve</name>
      <anchorfile>group__multigrid.html</anchorfile>
      <anchor>ga45acbff86a36af9288623b670de0a882</anchor>
      <arglist>(NestedOperator &amp;&amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_down, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_up, Nested &amp;nested, const ContainerType2 &amp;weights, double eps, unsigned gamma)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multigrid_save.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>multigrid__save_8h.html</filename>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" imported="no">backend/exceptions.h</includes>
    <includes id="memory_8h" name="memory.h" local="yes" imported="no">backend/memory.h</includes>
    <includes id="fast__interpolation_8h" name="fast_interpolation.h" local="yes" imported="no">topology/fast_interpolation.h</includes>
    <includes id="interpolation_8h" name="interpolation.h" local="yes" imported="no">topology/interpolation.h</includes>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">blas.h</includes>
    <includes id="pcg_8h" name="pcg.h" local="yes" imported="no">pcg.h</includes>
    <includes id="chebyshev_8h" name="chebyshev.h" local="yes" imported="no">chebyshev.h</includes>
    <includes id="eve_8h" name="eve.h" local="yes" imported="no">eve.h</includes>
    <includes id="timer_8h" name="timer.h" local="yes" imported="no">backend/timer.h</includes>
    <includes id="mpi__projection_8h" name="mpi_projection.h" local="yes" imported="no">topology/mpi_projection.h</includes>
    <class kind="struct">dg::NestedGrids</class>
    <class kind="struct">dg::MultigridCG2d</class>
    <namespace>dg</namespace>
    <member kind="function">
      <type>void</type>
      <name>nested_iterations</name>
      <anchorfile>namespacedg.html</anchorfile>
      <anchor>a3883dd15865bab43a25b6d619af20814</anchor>
      <arglist>(NestedOperator &amp;&amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; inverse_op, Nested &amp;nested)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multigrid_cycle</name>
      <anchorfile>namespacedg.html</anchorfile>
      <anchor>a04c0537d20379eb25a4846c9245b4fff</anchor>
      <arglist>(NestedOperator &amp;&amp;op, std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; inverse_op, Nested &amp;nested, unsigned gamma, unsigned p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>full_multigrid</name>
      <anchorfile>namespacedg.html</anchorfile>
      <anchor>a7542fca8122badcbffe18f4f1b9ff373</anchor>
      <arglist>(NestedOperator &amp;&amp;op, std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; inverse_op, Nested &amp;nested, unsigned gamma, unsigned mu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fmg_solve</name>
      <anchorfile>namespacedg.html</anchorfile>
      <anchor>aaae9651882d213318293eeb1abea3542</anchor>
      <arglist>(NestedOperator &amp;&amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; inverse_op, Nested &amp;nested, const ContainerType2 &amp;weights, double eps, unsigned gamma)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multistep.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>multistep_8h.html</filename>
    <includes id="ode_8h" name="ode.h" local="yes" imported="no">ode.h</includes>
    <includes id="runge__kutta_8h" name="runge_kutta.h" local="yes" imported="no">runge_kutta.h</includes>
    <includes id="multistep__tableau_8h" name="multistep_tableau.h" local="yes" imported="no">multistep_tableau.h</includes>
    <class kind="struct">dg::ExplicitMultistep</class>
    <class kind="struct">dg::ImExMultistep</class>
    <class kind="struct">dg::ImplicitMultistep</class>
    <class kind="struct">dg::FilteredExplicitMultistep</class>
    <class kind="struct">dg::MultistepTimeloop</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>multistep_tableau.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>multistep__tableau_8h.html</filename>
    <class kind="struct">dg::MultistepTableau</class>
    <class kind="struct">dg::ConvertsToMultistepTableau</class>
    <namespace>dg</namespace>
    <member kind="enumeration">
      <type></type>
      <name>multistep_identifier</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gaac3c0875ffdfb49fd06757312d1a599a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_EULER_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaa269d9523f1c0f2858ee7b2da2ddc005</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_ADAMS_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aacc1309c56b3b0e0653994f4c6e014f33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_ADAMS_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa5bb9056d420aaeb9e3ed58136788e11d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_KOTO_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa34804fa61f76b9679a882c928f3462d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_BDF_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aadaf5bf7573374c4f5b44d1d934f308a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_BDF_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaf44dc27d112d9de8bd859ba62e38677c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_BDF_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaff41ac46e970b725f824c57d2ff0c2ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_BDF_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aabdae14d1438b8af8ff1b54f7dcb06828</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_BDF_6_6</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa0e2ee05fd28d6c9bae46d53fd4be43a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_TVB_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa840e7133e47fb2d1d7c166807905f451</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_TVB_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaceb8719308ce29c90d18752f117a2aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_TVB_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa10d9fcc00b0bf78b817cd71d21367fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AB_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad2c9973f9153af4b29d1add4805f47b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AB_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aab1386c9d5a2d64424474a99fb889e9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AB_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaab6f79d9df61b2b38d0e8dd0e1f3b9d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AB_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa914125af18febec863b5a22630474178</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AB_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa03d11029f838ad183dac2974b1b2a384</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa64515aafdb384eee7fb97055fbf93201</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad31c62796e3f306115534b62319e76c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa70963938334c7aedeeb8921263f5d2da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa1d6eedb45062eb65c95773efa936a129</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa44d87eb40f5a4def96d3d0ae9b3a7157</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_6_6</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa94116d3b48d3117fd4cd0503f723765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa5c510519cfd2d686f29f3c47cb8a614d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad823e4c6572c36795163f0b8072523b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa769997c3f2c299e12b80667cb4a5b512</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa3401178a76a93aaaa6cb61950ff6f38f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad94ccd05d4f4f065b04da52366d61505</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_6_6</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaeaffc843538e5e4b08bc8d7303a4a447</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa7d7e3674e686fca44fbcd6d36180b97a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa1caadeb75a2d464e5fdd55eef44ff054</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_3_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa21b18996d8e102a9cc885dcd8640c176</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_4_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa36daa3f359c34a46063a9a6a81c3ed8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_5_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad04a42fb019d1a03a754fd5a112ebcd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_6_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad8ecff70e32e9791e9acbfbdfa16f32c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad74099cd8e1f7fb5382e6c8b76520ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa207c93e73d0b96d72b72aaeb71ba00fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa9bf8f614933c778f81bdaa31ed620c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aacd389d17f5639c2188df07a9d100d40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa2185f0a54ba684ddec33493fccfe2d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_6_6</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa11ebe6949bb01634a2f4b3402c2c15ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nullstelle.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>nullstelle_8h.html</filename>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" imported="no">backend/exceptions.h</includes>
    <class kind="class">dg::NoRoot1d</class>
    <namespace>dg</namespace>
    <member kind="function">
      <type>int</type>
      <name>bisection1d</name>
      <anchorfile>group__invert.html</anchorfile>
      <anchor>ga6331aa115bfceea681fa5ba85fa05a25</anchor>
      <arglist>(UnaryOp &amp;op, double &amp;x_min, double &amp;x_max, const double eps)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ode.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>ode_8h.html</filename>
    <includes id="blas1_8h" name="blas1.h" local="yes" imported="no">blas1.h</includes>
    <includes id="tensor__traits_8h" name="tensor_traits.h" local="yes" imported="no">backend/tensor_traits.h</includes>
    <class kind="struct">dg::aTimeloop</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>pcg.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>pcg_8h.html</filename>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">blas.h</includes>
    <includes id="functors_8h" name="functors.h" local="yes" imported="no">functors.h</includes>
    <includes id="extrapolation_8h" name="extrapolation.h" local="yes" imported="no">extrapolation.h</includes>
    <includes id="typedefs_8h" name="typedefs.h" local="yes" imported="no">backend/typedefs.h</includes>
    <includes id="timer_8h" name="timer.h" local="yes" imported="no">backend/timer.h</includes>
    <class kind="class">dg::PCG</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>poisson.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>poisson_8h.html</filename>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">blas.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="yes" imported="no">topology/geometry.h</includes>
    <includes id="enums_8h" name="enums.h" local="yes" imported="no">enums.h</includes>
    <includes id="evaluation_8h" name="evaluation.h" local="yes" imported="no">topology/evaluation.h</includes>
    <includes id="derivatives_8h" name="derivatives.h" local="yes" imported="no">topology/derivatives.h</includes>
    <includes id="mpi__derivatives_8h" name="mpi_derivatives.h" local="yes" imported="no">topology/mpi_derivatives.h</includes>
    <includes id="mpi__evaluation_8h" name="mpi_evaluation.h" local="yes" imported="no">topology/mpi_evaluation.h</includes>
    <class kind="struct">dg::Poisson</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>refined_elliptic.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>refined__elliptic_8h.html</filename>
    <includes id="interpolation_8h" name="interpolation.h" local="yes" imported="no">topology/interpolation.h</includes>
    <includes id="projection_8h" name="projection.h" local="yes" imported="no">topology/projection.h</includes>
    <includes id="elliptic_8h" name="elliptic.h" local="yes" imported="no">elliptic.h</includes>
    <includes id="refined__grid_8h" name="refined_grid.h" local="yes" imported="no">topology/refined_grid.h</includes>
    <includes id="mpi__projection_8h" name="mpi_projection.h" local="yes" imported="no">topology/mpi_projection.h</includes>
    <class kind="class">dg::RefinedElliptic</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>runge_kutta.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>runge__kutta_8h.html</filename>
    <includes id="ode_8h" name="ode.h" local="yes" imported="no">ode.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" imported="no">backend/exceptions.h</includes>
    <includes id="tableau_8h" name="tableau.h" local="yes" imported="no">tableau.h</includes>
    <includes id="blas1_8h" name="blas1.h" local="yes" imported="no">blas1.h</includes>
    <includes id="implicit_8h" name="implicit.h" local="yes" imported="no">implicit.h</includes>
    <class kind="struct">dg::IdentityFilter</class>
    <class kind="struct">dg::ERKStep</class>
    <class kind="struct">dg::ARKStep</class>
    <class kind="struct">dg::DIRKStep</class>
    <class kind="struct">dg::ShuOsher</class>
    <class kind="struct">dg::SinglestepTimeloop</class>
    <namespace>dg</namespace>
    <member kind="typedef">
      <type>ERKStep&lt; ContainerType &gt;</type>
      <name>RungeKutta</name>
      <anchorfile>group__time.html</anchorfile>
      <anchor>ga1c36951320edd6d3b16e688acb3cdf28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DIRKStep&lt; ContainerType &gt;</type>
      <name>ImplicitRungeKutta</name>
      <anchorfile>group__time.html</anchorfile>
      <anchor>ga46daa0f5d4dda544f20c12af17ee642a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stepperRK</name>
      <anchorfile>group__time.html</anchorfile>
      <anchor>ga95cb7ed53ca75810f7027cd6d9f3f904</anchor>
      <arglist>(ConvertsToButcherTableau&lt; get_value_type&lt; ContainerType &gt; &gt; tableau, RHS &amp;rhs, get_value_type&lt; ContainerType &gt; t_begin, const ContainerType &amp;begin, get_value_type&lt; ContainerType &gt; t_end, ContainerType &amp;end, unsigned N)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>simpsons.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>simpsons_8h.html</filename>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" imported="no">backend/exceptions.h</includes>
    <includes id="blas1_8h" name="blas1.h" local="yes" imported="no">blas1.h</includes>
    <class kind="struct">dg::Simpsons</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>subroutines.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>subroutines_8h.html</filename>
    <includes id="functions_8h" name="functions.h" local="yes" imported="no">dg/topology/functions.h</includes>
    <class kind="struct">dg::IDENTITY</class>
    <class kind="struct">dg::equals</class>
    <class kind="struct">dg::plus_equals</class>
    <class kind="struct">dg::minus_equals</class>
    <class kind="struct">dg::times_equals</class>
    <class kind="struct">dg::divides_equals</class>
    <class kind="struct">dg::divides</class>
    <class kind="struct">dg::Sum</class>
    <class kind="struct">dg::PairSum</class>
    <class kind="struct">dg::TripletSum</class>
    <class kind="struct">dg::EmbeddedPairSum</class>
    <class kind="struct">dg::Evaluate</class>
    <class kind="struct">dg::Scal</class>
    <class kind="struct">dg::Plus</class>
    <class kind="struct">dg::Axpby</class>
    <class kind="struct">dg::AxyPby</class>
    <class kind="struct">dg::Axpbypgz</class>
    <class kind="struct">dg::PointwiseDot</class>
    <class kind="struct">dg::PointwiseDivide</class>
    <namespace>dg</namespace>
    <member kind="function">
      <type>auto</type>
      <name>compose</name>
      <anchorfile>group__composition.html</anchorfile>
      <anchor>gad6daa85bcb28b9caa934ed25dcc6f2bc</anchor>
      <arglist>(UnaryOp f, Functor g)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>compose</name>
      <anchorfile>group__composition.html</anchorfile>
      <anchor>ga13fbfae48d792100f96097c6df0376ab</anchor>
      <arglist>(UnaryOp f0, Functors... fs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tableau.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/</path>
    <filename>tableau_8h.html</filename>
    <includes id="operator_8h" name="operator.h" local="yes" imported="no">topology/operator.h</includes>
    <class kind="struct">dg::ButcherTableau</class>
    <class kind="struct">dg::ShuOsherTableau</class>
    <class kind="struct">dg::ConvertsToButcherTableau</class>
    <class kind="struct">dg::ConvertsToShuOsherTableau</class>
    <namespace>dg</namespace>
    <member kind="enumeration">
      <type></type>
      <name>tableau_identifier</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ga80d4d81df02e5311bb20b3f74ea45992</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPLICIT_EULER_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a5679da92a2aeff58e4d1d8dd0950bfb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIDPOINT_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a53589c3f492267933d52411a91abe87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KUTTA_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ae9e2f280b69980d9f3a31b1af3e0f1c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLASSIC_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a9563ea198fa964124c2e1797882452ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HEUN_EULER_2_1_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a969e565c5774496edc78deb801ab2ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAVAGLIERI_3_1_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a8264b86603c2e301b45c4de154b1cf70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEHLBERG_3_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a801b6c262788a5b582bae3d11c242096</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEHLBERG_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a510e328ffc5ba91b159daf64a46d0bd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOGACKI_SHAMPINE_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ab5342d81c85674726787aa3b494f63b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAVAGLIERI_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a5a6c2a78ebffa849bb4acac939d3dc5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK324L2SA_ERK_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ad6386c96898e925be6781c3c68310c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZONNEVELD_5_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ad40588a67499cabb21074dfdae448041</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK436L2SA_ERK_6_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a617285cf8cc8b5c0b7c0c99a0eed7b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAYFY_ABURUB_6_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a4f13e6b1d5695276f8f99e07d86f5667</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CASH_KARP_6_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a896ad5875cfc107eb383d4880fbe5184</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEHLBERG_6_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ae40966a5ad092b052a51188a05c6ea47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DORMAND_PRINCE_7_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a5e964b2560e1c1b03d280c766fc5a129</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSITOURAS09_7_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ac51ce9d53bf2dce19d9b88e3212281df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSITOURAS11_7_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a3c68b6845f08dc4a80e22b45599f3493</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK548L2SA_ERK_8_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ae3f4bc121a421ca3501bfae79943a134</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERNER_9_5_6</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992aed58d2f2fa58b129b3260d00d6601e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERNER_10_6_7</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a4d1077dab812d38d3830c031444eb296</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEHLBERG_13_7_8</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a728a76f092f543a1ab3de59110857d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DORMAND_PRINCE_13_7_8</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a448f4a686cd23e40f778abe1d3dabcd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEAGIN_17_8_10</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a8d9f6fc38535d5c30a2ca1d2133a9b75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMPLICIT_EULER_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a5d4c148035a981dfce0fe5b0f481a1fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMPLICIT_MIDPOINT_1_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ab353c6e09d40ddc610382f44fccc5c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAPEZOIDAL_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992aee900e737927e97c9c60394acbff1afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDIRK_2_1_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a72bd02f1580c5bb96958efa4f511f8aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAVAGLIERI_IMPLICIT_3_1_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a0e24a6b1b6a405ff2346db38a0c43235</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BILLINGTON_3_3_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a5ffadf91baa3b323a4e1407cf2f42926</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRBDF2_3_3_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992aea4ea0cbea708f0db5605fb2b3444834</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KVAERNO_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a4237a65080e211e5eedc4d9998bb1e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAVAGLIERI_IMPLICIT_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a8c7a4af3ca50f8e2489eb1ce8d16e194</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK324L2SA_DIRK_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a6fc7f6581d7f900694db6c8e91a17281</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CASH_5_2_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a2199f11f4b226c6803b65a1a7168b87a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CASH_5_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a534549bf28e481c52c64871dcd48d8c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDIRK_5_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ababbb34a98a801e7cc89920a1daa4d9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KVAERNO_5_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a7e0890fc92aaf7c8867b364d22c8ac22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK436L2SA_DIRK_6_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ab4f90835b6871a2dc7a7e2151ee8ab34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KVAERNO_7_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992abbedd7f8ef68aea027dc79e60df79b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK548L2SA_DIRK_8_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ad17ee32bcc10dbb681d704e9dc3d0425</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSPRK_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a0adf7035ccb1108b9cab4539a505ca1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSPRK_3_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a6ec030e91579ee35ac9c2d1f4fd00c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSPRK_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a0eb5270409e6b03447ee549379e2f78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSPRK_5_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a2a46be9d458c9586fd219956c016c3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSPRK_5_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a55f0423ae9d22f05d48f8cfd0ee10278</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>average.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>average_8h.html</filename>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <includes id="weights_8h" name="weights.h" local="yes" imported="no">weights.h</includes>
    <includes id="blas1_8h" name="blas1.h" local="yes" imported="no">dg/blas1.h</includes>
    <includes id="average__dispatch_8h" name="average_dispatch.h" local="yes" imported="no">dg/backend/average_dispatch.h</includes>
    <includes id="view_8h" name="view.h" local="yes" imported="no">dg/backend/view.h</includes>
    <class kind="struct">dg::Average</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>average_mpi.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>average__mpi_8h.html</filename>
    <includes id="average_8h" name="average.h" local="yes" imported="no">average.h</includes>
    <includes id="mpi__grid_8h" name="mpi_grid.h" local="yes" imported="no">mpi_grid.h</includes>
    <includes id="mpi__weights_8h" name="mpi_weights.h" local="yes" imported="no">mpi_weights.h</includes>
    <class kind="struct">dg::Average&lt; MPI_Vector&lt; container &gt; &gt;</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>base_geometry.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>base__geometry_8h.html</filename>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <includes id="tensor_8h" name="tensor.h" local="yes" imported="no">tensor.h</includes>
    <class kind="struct">dg::aRealGeometry2d</class>
    <class kind="struct">dg::aRealGeometry3d</class>
    <class kind="struct">dg::aRealProductGeometry3d</class>
    <class kind="struct">dg::RealCartesianGrid2d</class>
    <class kind="struct">dg::RealCartesianGrid3d</class>
    <class kind="struct">dg::RealCylindricalGrid3d</class>
    <namespace>dg</namespace>
    <member kind="typedef">
      <type>dg::aRealGeometry2d&lt; double &gt;</type>
      <name>aGeometry2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga0194a345f358474eacd0d8fd668ddeb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealGeometry3d&lt; double &gt;</type>
      <name>aGeometry3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga98e551dd078cf173433853670e84d61a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealProductGeometry3d&lt; double &gt;</type>
      <name>aProductGeometry3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gad3d6bea9081a22d2133ce8c42bd5ca46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianGrid2d&lt; double &gt;</type>
      <name>CartesianGrid2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga8df51fc7b7ca691497cc76208da946a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianGrid3d&lt; double &gt;</type>
      <name>CartesianGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga5d7dacfc7e0b065aaa9d8eda3c82a6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCylindricalGrid3d&lt; double &gt;</type>
      <name>CylindricalGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga084778c740b05f14f00bce5c2b5d75e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>base_geometryX.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>base__geometry_x_8h.html</filename>
    <includes id="grid_x_8h" name="gridX.h" local="yes" imported="no">gridX.h</includes>
    <includes id="evaluation_x_8h" name="evaluationX.h" local="yes" imported="no">evaluationX.h</includes>
    <includes id="tensor_8h" name="tensor.h" local="yes" imported="no">tensor.h</includes>
    <class kind="struct">dg::aRealGeometryX2d</class>
    <class kind="struct">dg::aRealGeometryX3d</class>
    <class kind="struct">dg::RealCartesianGridX2d</class>
    <class kind="struct">dg::RealCartesianGridX3d</class>
    <namespace>dg</namespace>
    <member kind="typedef">
      <type>dg::RealCartesianGridX2d&lt; double &gt;</type>
      <name>CartesianGridX2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga92f04deac4da71794ee5da5bbdf70d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianGridX3d&lt; double &gt;</type>
      <name>CartesianGridX3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga4ce9a25eebe969f45e73cc953a777891</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealGeometryX2d&lt; double &gt;</type>
      <name>aGeometryX2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga1614909b8085b3521f6eb6a8a7ee2185</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealGeometryX3d&lt; double &gt;</type>
      <name>aGeometryX3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga669637061097e77d4bfede9e74182b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>ga2ded9cafaf270f37c3244e20f1712d1d</anchor>
      <arglist>(const Functor &amp;f, const aRealGeometryX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>gaf86ba85b41523249e5944efc9fc0aec9</anchor>
      <arglist>(const Functor &amp;f, const aRealGeometryX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>derivatives.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>derivatives_8h.html</filename>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <includes id="dx_8h" name="dx.h" local="yes" imported="no">dx.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga19d86301feafbcf0f986df9f63c203fe</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga0157ec973f63c324b8c72b8fd9194a70</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga86375a7140c179bd4c3cabba4da575f9</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga61716a842cf5da26e59795259faebd45</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga7a8fe217c53df1ce6eb31aea79bbc5fa</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gad32f4cb21d1bd953283065a3e0ff940f</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga1ba152b26d4492e9535733c038e78843</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga0f712148b923339c0b42859b26359cfe</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaf2b77b92859e81527794089d0d6bf891</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga9c234aa10cd37de14c3d827308e2d0a5</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga1cffbbd2dd3eb02bcda52455af72f4f0</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcz)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gafc06291468fee7918f7dc62a2939eba9</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga34008552fdd778e62eafca9b37da26dc</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gab38bec364ae85e94491cb09c7a215cef</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga16557006323eed616c8d45e05cfae5a0</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga1eaec221690c13f5feb07ebfab40bca6</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gad073e0a0872e9c03e91922571e785f09</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaee6a6764e3e76f6d7fe56a949c6ba208</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga17b5c97575982191a5b7c27174f15d00</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcz, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaeba96ae078dd84ed86fe046d63b21086</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>derivativesX.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>derivatives_x_8h.html</filename>
    <includes id="grid_x_8h" name="gridX.h" local="yes" imported="no">gridX.h</includes>
    <includes id="dx_x_8h" name="dxX.h" local="yes" imported="no">dxX.h</includes>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">../blas.h</includes>
    <class kind="struct">dg::Composite</class>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga48f3c7759bfaa3d80fba9626d8ca59ed</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaed7c326e41d9d945f3de9514f29f3ebc</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gabd62ae0b90eba03a14e89c6ab7d1b20d</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaa17ea30b4dd25376c07807d58853b480</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga89b6058aea9dcba65a5fdf1f8106e623</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae027e57ec6456cd001ba15ed89f355e1</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga58b769e4bfe004be71c8d98dc7b275e5</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga215013447785631b7d43674b5a34ac9f</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga513df5a4db8cd15c94681a3fdc0ab2ca</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae81e3400be9e3b446ac3b7f999598c94</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae0fde938ba7e5977ee93e0b4642f10ed</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcz)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaaaa22110d64f6eb848264c870e971b97</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga8fe99e84fe4f5f6f9d5962461acf5e62</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gac0fcb281875f3445526640b94ddc9293</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga4c9b8a22ea7a8b2475337b9863d3a5ae</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga2fdab3d9e7a46489ff487e8044d4cc23</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga7c2b37276fef32694e3f32e455a99f6f</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae25e2bb0cc6ff5d48caed87bbc1496d1</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga4a428cfef0dc63826553c6340a0aa7b4</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcz, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga3dd6040824cd33b522a8c982df82817a</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dlt.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>dlt_8h.html</filename>
    <includes id="exceptions_8h" name="exceptions.h" local="yes" imported="no">dg/backend/exceptions.h</includes>
    <class kind="class">dg::DLT</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>dx.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>dx_8h.html</filename>
    <includes id="sparseblockmat_8h" name="sparseblockmat.h" local="yes" imported="no">dg/backend/sparseblockmat.h</includes>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <includes id="functions_8h" name="functions.h" local="yes" imported="no">functions.h</includes>
    <includes id="operator_8h" name="operator.h" local="yes" imported="no">operator.h</includes>
    <includes id="weights_8h" name="weights.h" local="yes" imported="no">weights.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx_symm</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gabf3ebafa08e328b1a53e98f27cfae152</anchor>
      <arglist>(int n, int N, real_type h, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx_plus</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga656c48eec6285e73ae253885ca9a8634</anchor>
      <arglist>(int n, int N, real_type h, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx_minus</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gae4fb5a64296b4e1ab205ebbab96113fe</anchor>
      <arglist>(int n, int N, real_type h, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jump</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gad31885319d447aad09d97a6d5f3552df</anchor>
      <arglist>(int n, int N, real_type h, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx_normed</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga052a8bc5d6353c10a9a324c2b130662c</anchor>
      <arglist>(int n, int N, real_type h, bc bcx, direction dir)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae3a4ca18ffe8583d86682b24a719abd7</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gab7fd80865c73611fc731bafa288683ed</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jump</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gac9863060690d75515f4e7e7b034366b9</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jump</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga4bf3442c74b1fc66e9e038f6b9c981df</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dxX.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>dx_x_8h.html</filename>
    <includes id="grid_x_8h" name="gridX.h" local="yes" imported="no">gridX.h</includes>
    <includes id="dx_8h" name="dx.h" local="yes" imported="no">dx.h</includes>
    <includes id="weights_x_8h" name="weightsX.h" local="yes" imported="no">weightsX.h</includes>
    <includes id="sparseblockmat_8h" name="sparseblockmat.h" local="yes" imported="no">dg/backend/sparseblockmat.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga82911492f6bb854705f77b3b12bdfeb0</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gae9a4224590ae389ad268084951dc8ee5</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jump</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga4699f194917d333cb1b472578a4f4d8a</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jump</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga17099f026e1ea2fa59db15d8ed9b2adc</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>evaluation.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>evaluation_8h.html</filename>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <includes id="operator_8h" name="operator.h" local="yes" imported="no">operator.h</includes>
    <namespace>dg</namespace>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>gac802d2b4de66df9ce2282e378461ce28</anchor>
      <arglist>(UnaryOp f, const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>gab8cdd6517dd365cc723e4a14a4262d6a</anchor>
      <arglist>(const BinaryOp &amp;f, const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga0cdefb87e015db3d39efcbefd67d5a31</anchor>
      <arglist>(const TernaryOp &amp;f, const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>integrate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>gab6de23408df0b54689509b993f314d4d</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;in, const RealGrid1d&lt; real_type &gt; &amp;g, dg::direction dir=dg::forward)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>integrate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga35440c55be7797b50b31b23cc07dd37d</anchor>
      <arglist>(UnaryOp f, const RealGrid1d&lt; real_type &gt; &amp;g, dg::direction dir=dg::forward)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>evaluationX.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>evaluation_x_8h.html</filename>
    <includes id="grid_x_8h" name="gridX.h" local="yes" imported="no">gridX.h</includes>
    <includes id="evaluation_8h" name="evaluation.h" local="yes" imported="no">evaluation.h</includes>
    <namespace>dg</namespace>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga98abe51c6b7d3c646f412635f135eb38</anchor>
      <arglist>(UnaryOp f, const RealGridX1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga5968e5042cb5d2e2b000a6178e146e49</anchor>
      <arglist>(const BinaryOp &amp;f, const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga8e708ce1a36994a538e3e7a0cca742e3</anchor>
      <arglist>(const TernaryOp &amp;f, const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fast_interpolation.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>fast__interpolation_8h.html</filename>
    <includes id="memory_8h" name="memory.h" local="yes" imported="no">dg/backend/memory.h</includes>
    <includes id="typedefs_8h" name="typedefs.h" local="yes" imported="no">dg/backend/typedefs.h</includes>
    <includes id="enums_8h" name="enums.h" local="yes" imported="no">dg/enums.h</includes>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">dg/blas.h</includes>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <includes id="interpolation_8h" name="interpolation.h" local="yes" imported="no">interpolation.h</includes>
    <includes id="projection_8h" name="projection.h" local="yes" imported="no">projection.h</includes>
    <includes id="mpi__grid_8h" name="mpi_grid.h" local="yes" imported="no">mpi_grid.h</includes>
    <class kind="struct">dg::MultiMatrix</class>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga621387b87a7e2cec71d90335fb7895c5</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;t, unsigned multiplyn, unsigned multiplyNx)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga87f53479753dfeaefe8d077ca1ce701c</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;t, unsigned dividen, unsigned divideNx)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga785b43476bffe07f9d8205c4a338e5bd</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;t, unsigned multiplyn, unsigned multiplyNx, unsigned multiplyNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga7f97dac91462d3cb532a995b09618af6</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;t, unsigned dividen, unsigned divideNx, unsigned divideNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga7aa02e4a2695590e7bcabe826ef6f8a8</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;t, unsigned multiplyn, unsigned multiplyNx, unsigned multiplyNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gacb29f3360826c45d07c59513a9bddac6</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;t, unsigned dividen, unsigned divideNx, unsigned divideNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; MHMatrix_t&lt; real_type &gt;, MHVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga7926270db9b02e44bc3645d68b5ec9e1</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;t, unsigned multiplyn, unsigned multiplyNx, unsigned multiplyNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; MHMatrix_t&lt; real_type &gt;, MHVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga98f3ef89ce146edd954349ace5779131</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;t, unsigned dividen, unsigned divideNx, unsigned divideNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; MHMatrix_t&lt; real_type &gt;, MHVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga5bf449bb543688950ec22ba67f462305</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;t, unsigned multiplyn, unsigned multiplyNx, unsigned multiplyNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; MHMatrix_t&lt; real_type &gt;, MHVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gad7543b99295dc07d745e2c1306ae6b2f</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;t, unsigned dividen, unsigned divideNx, unsigned divideNy)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fem.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>fem_8h.html</filename>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <includes id="xspacelib_8h" name="xspacelib.h" local="yes" imported="no">xspacelib.h</includes>
    <includes id="fem__weights_8h" name="fem_weights.h" local="yes" imported="no">fem_weights.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>fem_mass</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>gabd1b40338e8296bc00e42df29678c873</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>fem_mass</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga116c4870cf1637435961581862e2667e</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fem_weights.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>fem__weights_8h.html</filename>
    <includes id="weights_8h" name="weights.h" local="yes" imported="no">weights.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga5acc91a2f306c8e308ae2852c19ae07c</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_inv_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga2efe4e6894729acbcba212098aa4562a</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga9fd627e66c3538c683f61fa5fa70f6e0</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_inv_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga7f1dfd53d8e8fe53bbb75bf5df6cd3ba</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga494fca053f848efb2e40f021c5d02394</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_inv_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga41ed82be7020ca564607c1d44c6dd352</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>filter.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>filter_8h.html</filename>
    <includes id="functors_8h" name="functors.h" local="yes" imported="no">dg/functors.h</includes>
    <includes id="fast__interpolation_8h" name="fast_interpolation.h" local="yes" imported="no">fast_interpolation.h</includes>
    <class kind="struct">dg::ModalFilter</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>functions.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>functions_8h.html</filename>
    <namespace>dg</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DG_DEVICE</name>
      <anchorfile>functions_8h.html</anchorfile>
      <anchor>aa181978ebbc17b8ea6d6c072e06c2d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gabab1bdc50508bd0f04f3cd0b45dd72e3</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gada629959f5298f4221d35fd8cb880a0d</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gae7ba1400d58619bc271c6611acf5994b</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gad1e45796f68232b124d0f5baea6fceca</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gad0bd961c4529039c4e651fc9e3901f60</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga6d27b092dcd9613c1c5eeaa1cf208e83</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooX1d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga21055512458a88c314621a912fb1417f</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooX2d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gadb49e10685e2bcdd8a27ef88f2857151</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooX3d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gadd9ae95517a739c80452afc7fc9c36ae</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooY2d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga5aa995cf5e888c9ee1026b78f6f78cc5</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooY3d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gaafbff988d4cff4a0643e819b3f6962cc</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooZ3d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga89a354d8268ca0f86486a93683fda7d4</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooRZP2X</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga26a17efec5c3e1e916ebc05914f185b9</anchor>
      <arglist>(double R, double Z, double P)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooRZP2Y</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga801437c88f9b783bdadd96d81c110a8a</anchor>
      <arglist>(double R, double Z, double P)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooRZP2Z</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gab6859f8360cdc1ab30404589070ca4e5</anchor>
      <arglist>(double R, double Z, double P)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga6157ca9bd4d2ffec4b6bd7c22ed073fe</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga99d493917c25c36d4e82248fcebd7550</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gabadfb8fdc2962f824d2b1fe1c0e73cd5</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga44292f31f77c0cad8a3d8e0a88c7840b</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga0b38e6d17d96de78beedafc4c9e4437e</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga43b7fe30d4e22f1cf3dace0dd474c7d9</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometry.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>geometry_8h.html</filename>
    <includes id="evaluation_8h" name="evaluation.h" local="yes" imported="no">evaluation.h</includes>
    <includes id="weights_8h" name="weights.h" local="yes" imported="no">weights.h</includes>
    <includes id="filter_8h" name="filter.h" local="yes" imported="no">filter.h</includes>
    <includes id="mpi__vector_8h" name="mpi_vector.h" local="yes" imported="no">dg/backend/mpi_vector.h</includes>
    <includes id="mpi__evaluation_8h" name="mpi_evaluation.h" local="yes" imported="no">mpi_evaluation.h</includes>
    <includes id="mpi__weights_8h" name="mpi_weights.h" local="yes" imported="no">mpi_weights.h</includes>
    <includes id="base__geometry_8h" name="base_geometry.h" local="yes" imported="no">base_geometry.h</includes>
    <includes id="base__geometry_x_8h" name="base_geometryX.h" local="yes" imported="no">base_geometryX.h</includes>
    <includes id="refined__grid_x_8h" name="refined_gridX.h" local="yes" imported="no">refined_gridX.h</includes>
    <includes id="mpi__base_8h" name="mpi_base.h" local="yes" imported="no">mpi_base.h</includes>
    <includes id="tensor_8h" name="tensor.h" local="yes" imported="no">tensor.h</includes>
    <includes id="transform_8h" name="transform.h" local="yes" imported="no">transform.h</includes>
    <includes id="multiply_8h" name="multiply.h" local="yes" imported="no">multiply.h</includes>
    <includes id="fem_8h" name="fem.h" local="yes" imported="no">fem.h</includes>
  </compound>
  <compound kind="file">
    <name>grid.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>grid_8h.html</filename>
    <includes id="topological__traits_8h" name="topological_traits.h" local="yes" imported="no">topological_traits.h</includes>
    <includes id="dlt_8h" name="dlt.h" local="yes" imported="no">dlt.h</includes>
    <includes id="enums_8h" name="enums.h" local="yes" imported="no">../enums.h</includes>
    <class kind="struct">dg::RealGrid1d</class>
    <class kind="struct">dg::aRealTopology2d</class>
    <class kind="struct">dg::aRealTopology3d</class>
    <class kind="struct">dg::RealGrid2d</class>
    <class kind="struct">dg::RealGrid3d</class>
    <namespace>dg</namespace>
    <member kind="typedef">
      <type>dg::RealGrid1d&lt; double &gt;</type>
      <name>Grid1d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga1dd5120253a8a63c3b1ecdd503d6dac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealGrid2d&lt; double &gt;</type>
      <name>Grid2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga4d84634067b1b3362041e211eec4de84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealGrid3d&lt; double &gt;</type>
      <name>Grid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga4a2b08e9a966ea6fe55c74c5c832aabe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealTopology2d&lt; double &gt;</type>
      <name>aTopology2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gae3d12cf3fe25ad7c9ce423df0b5cd5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealTopology3d&lt; double &gt;</type>
      <name>aTopology3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga534001144a75391bd6311a94f1dc6320</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gridX.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>grid_x_8h.html</filename>
    <includes id="dlt_8h" name="dlt.h" local="yes" imported="no">dlt.h</includes>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <includes id="enums_8h" name="enums.h" local="yes" imported="no">../enums.h</includes>
    <class kind="struct">dg::RealGridX1d</class>
    <class kind="struct">dg::aRealTopologyX2d</class>
    <class kind="struct">dg::RealGridX2d</class>
    <class kind="struct">dg::aRealTopologyX3d</class>
    <class kind="struct">dg::RealGridX3d</class>
    <namespace>dg</namespace>
    <member kind="typedef">
      <type>dg::RealGridX1d&lt; double &gt;</type>
      <name>GridX1d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga0af6916b3752957a6ab24e32ac1e7d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealGridX2d&lt; double &gt;</type>
      <name>GridX2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gac83f5fa2cb79334851ef12c378caefe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealGridX3d&lt; double &gt;</type>
      <name>GridX3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gae37be47c44253be52072011d75b6f3ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealTopologyX2d&lt; double &gt;</type>
      <name>aTopologyX2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga1d1e9c917d1991849546462956339642</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealTopologyX3d&lt; double &gt;</type>
      <name>aTopologyX3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga203d6aafc7b2b6fc35a1659272e5a4a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>interpolation.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>interpolation_8h.html</filename>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <includes id="evaluation_8h" name="evaluation.h" local="yes" imported="no">evaluation.h</includes>
    <includes id="functions_8h" name="functions.h" local="yes" imported="no">functions.h</includes>
    <includes id="operator__tensor_8h" name="operator_tensor.h" local="yes" imported="no">operator_tensor.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="typedef">
      <type>cusp::csr_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>IHMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga405d290c77c92765dcddb324522d8409</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cusp::csr_matrix&lt; int, real_type, cusp::device_memory &gt;</type>
      <name>IDMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga3dac512c32a3798cd984737a170e91a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IHMatrix_t&lt; double &gt;</type>
      <name>IHMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga3d74638bbcf620f19e3728a07ef1706d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IDMatrix_t&lt; double &gt;</type>
      <name>IDMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaec4df2a8ab65260aed0efeb6f5d115e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga555f0315380f4e488298b970fe99bb43</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const RealGrid1d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, std::string method=&quot;dg&quot;)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gabccfc4cf8551380841951e9e3d4ea6eb</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const aRealTopology2d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU, std::string method=&quot;dg&quot;)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gaa32a8cf8b0401350e0436d695b37b967</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const thrust::host_vector&lt; real_type &gt; &amp;z, const aRealTopology3d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU, dg::bc bcz=dg::PER, std::string method=&quot;dg&quot;)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gafe66d320d0965e44cf7b7b68d95db7a9</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g_new, const RealGrid1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gab6059cfabf62ce2523321f816fb59ecb</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g_new, const aRealTopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga255cdb85967dee679b05899d86d12785</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g_new, const aRealTopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gaaf634652de6df95398e91477aaed0927</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g_new, const aRealTopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>forward_transform</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>gad09541da41129a4ccdb3623deaa5f364</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;in, const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>interpolate</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gad1467be84fa682c8b300cd39db0492d9</anchor>
      <arglist>(dg::space sp, const thrust::host_vector&lt; real_type &gt; &amp;v, real_type x, const RealGrid1d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>interpolate</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gaa9fc6abad143444993021781bbed9b48</anchor>
      <arglist>(dg::space sp, const thrust::host_vector&lt; real_type &gt; &amp;v, real_type x, real_type y, const aRealTopology2d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>interpolationX.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>interpolation_x_8h.html</filename>
    <includes id="interpolation_8h" name="interpolation.h" local="yes" imported="no">interpolation.h</includes>
    <includes id="grid_x_8h" name="gridX.h" local="yes" imported="no">gridX.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga9bc621634c9540012006c75e4061d0be</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const RealGridX1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga00a625727a3335b7d0c7a7104a147cd8</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const aRealTopologyX2d&lt; real_type &gt; &amp;g, dg::bc globalbcz=dg::NEU)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga6d44cf23c5474123a4c1f7d381166341</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const thrust::host_vector&lt; real_type &gt; &amp;z, const aRealTopologyX3d&lt; real_type &gt; &amp;g, dg::bc globalbcz=dg::NEU)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga5675778c919151412ef727e7739fd7e3</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g_new, const RealGridX1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga5e75013511a6bf3864f6d68d782294d5</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g_new, const aRealTopologyX2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga15dd892625959c7bcd49b24b90d263af</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g_new, const aRealTopologyX3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>forward_transform</name>
      <anchorfile>namespacedg_1_1create.html</anchorfile>
      <anchor>a0deb811d33279b3f858db30a7777c1e2</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;in, const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>interpolate</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga3f3b02e7ec191c8fcf1fc258599617f7</anchor>
      <arglist>(dg::space sp, const thrust::host_vector&lt; real_type &gt; &amp;v, real_type x, real_type y, const aRealTopologyX2d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mpi_base.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>mpi__base_8h.html</filename>
    <includes id="mpi__grid_8h" name="mpi_grid.h" local="yes" imported="no">mpi_grid.h</includes>
    <includes id="base__geometry_8h" name="base_geometry.h" local="yes" imported="no">base_geometry.h</includes>
    <includes id="tensor_8h" name="tensor.h" local="yes" imported="no">tensor.h</includes>
    <class kind="struct">dg::aRealMPIGeometry2d</class>
    <class kind="struct">dg::aRealMPIGeometry3d</class>
    <class kind="struct">dg::aRealProductMPIGeometry3d</class>
    <class kind="struct">dg::RealCartesianMPIGrid2d</class>
    <class kind="struct">dg::RealCartesianMPIGrid3d</class>
    <class kind="struct">dg::RealCylindricalMPIGrid3d</class>
    <namespace>dg</namespace>
    <namespace>dg::x</namespace>
    <member kind="typedef">
      <type>dg::aRealMPIGeometry2d&lt; double &gt;</type>
      <name>aMPIGeometry2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gaa3154d7bab772d2d51f7010838dc36a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealMPIGeometry3d&lt; double &gt;</type>
      <name>aMPIGeometry3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gad92589a12524a79d7bf8feb9c1caccf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealProductMPIGeometry3d&lt; double &gt;</type>
      <name>aProductMPIGeometry3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga4f8e4aa131946e62c3a8b0325956c73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianMPIGrid2d&lt; double &gt;</type>
      <name>CartesianMPIGrid2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga7d8cf3138d84796c7a013f37dda88503</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianMPIGrid3d&lt; double &gt;</type>
      <name>CartesianMPIGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga7a76afa6dd6d1bc5a1f8c115ab776269</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCylindricalMPIGrid3d&lt; double &gt;</type>
      <name>CylindricalMPIGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gab33670c0099181705eda87bf1429b81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>aMPIGeometry2d</type>
      <name>aGeometry2d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>ab598d244f8a5b01f99b54836237e47da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>aMPIGeometry3d</type>
      <name>aGeometry3d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a319f5bd75c2b5a0773ae8469007ea5f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>aProductMPIGeometry3d</type>
      <name>aProductGeometry3d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a8868dd637a7736b9e4f896bd55cf84f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CartesianMPIGrid2d</type>
      <name>CartesianGrid2d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a678f3c43b297578d6389547a8c951120</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CartesianMPIGrid3d</type>
      <name>CartesianGrid3d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a28d4bbb56a0e4834c7d1dacfc2bf8a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CylindricalMPIGrid3d</type>
      <name>CylindricalGrid3d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a4591f67b4bada5dbbb285f37bc6b3ed8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mpi_derivatives.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>mpi__derivatives_8h.html</filename>
    <includes id="sparseblockmat_8h" name="sparseblockmat.h" local="yes" imported="no">dg/backend/sparseblockmat.h</includes>
    <includes id="mpi__matrix_8h" name="mpi_matrix.h" local="yes" imported="no">dg/backend/mpi_matrix.h</includes>
    <includes id="functions_8h" name="functions.h" local="yes" imported="no">functions.h</includes>
    <includes id="derivatives_8h" name="derivatives.h" local="yes" imported="no">derivatives.h</includes>
    <includes id="mpi__grid_8h" name="mpi_grid.h" local="yes" imported="no">mpi_grid.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga489ce093c2c5260ab338432818908a56</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gab2a7a8ef31f632638173cde03d73d433</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga7efe24db0f3be3741f17c0f06787bff8</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga8b1a991608edd12528f1d5488dc99a1d</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga9329877015fc6dd772c6442e7b562484</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gac0adeb5ce90592acfc550bbb9cab5719</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gabf69159ea3b68dee5eafa96d337013b5</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcz, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaa4bb59a96790aac1a737c1202e7d9437</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga851339ed455dfa5cb52462ac89991984</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae1cf0c9f8f65b5b438417ce26bbe1f78</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcz)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga8a3540fb27361e3b7820eaf04c7f4191</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga2a9d5ba09b25e5c70a88c2248515d209</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga5874de300312978d8873165e0ac65893</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaa58ff3098df8a5dc9af50cb03b620a15</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gad76afd5aeb34b7e95708730ae3430faf</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga07c407f6c982cb6ca598ddaa57ac4edf</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga455ec585b4ba6e0126e04ee54933f792</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga3b689689ae1a8affc46f286326c3f1e4</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga3275156b7dd10b925cda30de132c9b2f</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga39cc6e53f4d7c0e7f3bee01bb72ca041</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mpi_evaluation.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>mpi__evaluation_8h.html</filename>
    <includes id="mpi__vector_8h" name="mpi_vector.h" local="yes" imported="no">dg/backend/mpi_vector.h</includes>
    <includes id="mpi__grid_8h" name="mpi_grid.h" local="yes" imported="no">mpi_grid.h</includes>
    <includes id="evaluation_8h" name="evaluation.h" local="yes" imported="no">evaluation.h</includes>
    <namespace>dg</namespace>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga5975f3c6f3d0eb5f23ed3f3021061cd9</anchor>
      <arglist>(const BinaryOp &amp;f, const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga1fa625595f6416e1d162a11b559cef1e</anchor>
      <arglist>(const TernaryOp &amp;f, const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>global2local</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gadb538d54e0a5a47fd2f810910f2b42bd</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;global, const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>global2local</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga4b115ff16353ceadca2c0f63d7d42214</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;global, const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mpi_grid.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>mpi__grid_8h.html</filename>
    <includes id="mpi__vector_8h" name="mpi_vector.h" local="yes" imported="no">dg/backend/mpi_vector.h</includes>
    <includes id="enums_8h" name="enums.h" local="yes" imported="no">dg/enums.h</includes>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <class kind="struct">dg::aRealMPITopology2d</class>
    <class kind="struct">dg::aRealMPITopology3d</class>
    <class kind="struct">dg::RealMPIGrid2d</class>
    <class kind="struct">dg::RealMPIGrid3d</class>
    <namespace>dg</namespace>
    <namespace>dg::x</namespace>
    <member kind="typedef">
      <type>dg::RealMPIGrid2d&lt; double &gt;</type>
      <name>MPIGrid2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga492b972b6b0822517291a1c0de786996</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealMPIGrid3d&lt; double &gt;</type>
      <name>MPIGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga1a7b625b75effa1be77424511e8a6a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealMPITopology2d&lt; double &gt;</type>
      <name>aMPITopology2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga19c78bb35e3a4a7192c5e484b7dbf8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealMPITopology3d&lt; double &gt;</type>
      <name>aMPITopology3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gab52aaf1578631594a9423e604b2e1232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIGrid2d</type>
      <name>Grid2d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>ab25fdb31975e0b1e408845613d59492c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIGrid3d</type>
      <name>Grid3d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a0560b5e3f52753453d25ab43b89916d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>aMPITopology2d</type>
      <name>aTopology2d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>ab3625b5248a875832ed55099c11235c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>aMPITopology3d</type>
      <name>aTopology3d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a0a50b265a1f0f45e4aba326b6b78e61e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mpi_projection.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>mpi__projection_8h.html</filename>
    <includes id="typedefs_8h" name="typedefs.h" local="yes" imported="no">dg/backend/typedefs.h</includes>
    <includes id="mpi__matrix_8h" name="mpi_matrix.h" local="yes" imported="no">dg/backend/mpi_matrix.h</includes>
    <includes id="mpi__collective_8h" name="mpi_collective.h" local="yes" imported="no">dg/backend/mpi_collective.h</includes>
    <includes id="mpi__grid_8h" name="mpi_grid.h" local="yes" imported="no">mpi_grid.h</includes>
    <includes id="projection_8h" name="projection.h" local="yes" imported="no">projection.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::x</namespace>
    <namespace>dg::create</namespace>
    <member kind="typedef">
      <type>MPIDistMat&lt; IHMatrix_t&lt; real_type &gt;, GeneralComm&lt; dg::iHVec, thrust::host_vector&lt; real_type &gt; &gt; &gt;</type>
      <name>MIHMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga383790a28074c1998e9abef496429b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIDistMat&lt; IDMatrix_t&lt; real_type &gt;, GeneralComm&lt; dg::iDVec, thrust::device_vector&lt; real_type &gt; &gt; &gt;</type>
      <name>MIDMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga4368b8e147b1e6b3b90080c3bd813530</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MIHMatrix_t&lt; double &gt;</type>
      <name>MIHMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga6f954391920cbd9b9ec4c7b68fdb7682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MIDMatrix_t&lt; double &gt;</type>
      <name>MIDMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gabed94dc9f33454571b7a124fb3851091</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MIHMatrix</type>
      <name>IHMatrix</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a9f989653c1eabe0ef28354c612f07bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MIDMatrix</type>
      <name>IDMatrix</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a317270f6d7d80e298eedd8feb67e7133</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>convert</name>
      <anchorfile>group__mpi__structures.html</anchorfile>
      <anchor>gab037631f28f2fa5d19fd58893c89e986</anchor>
      <arglist>(const dg::IHMatrix_t&lt; real_type &gt; &amp;global, const ConversionPolicy &amp;policy)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga31346299065b7b13d2ff3ff801d7fc9d</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g_new, const aRealMPITopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga29fd1af674975ffac83505d1a75d9295</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g_new, const aRealMPITopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gafd2b8878b6c870ca9868827e6cb196b6</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g_new, const aRealMPITopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gaec7f2cd44a012d7898ca27b11f4962bd</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g_new, const aRealMPITopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gae1a0c4a258ad384e1c174a068e06537d</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g_new, const aRealMPITopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gaad425185a1a42e48ee2785c1a1bf2629</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g_new, const aRealMPITopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga6bb2ee2164fcf188a5825f83877ce5e6</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g_new, const aRealMPITopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga242fe992f5f60ebd05b9d60dd800e725</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const aRealMPITopology2d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU, std::string method=&quot;dg&quot;)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gabc58c92d669aea984f9f5a6b5129190e</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const thrust::host_vector&lt; real_type &gt; &amp;z, const aRealMPITopology2d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU, dg::bc bcz=dg::PER, std::string method=&quot;linear&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mpi_weights.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>mpi__weights_8h.html</filename>
    <includes id="weights_8h" name="weights.h" local="yes" imported="no">weights.h</includes>
    <includes id="mpi__grid_8h" name="mpi_grid.h" local="yes" imported="no">mpi_grid.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga7b869566cb76ee5eb9eaaa95abc65fb0</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gabc3f3b3acad84e4c7c912d4115381346</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gadf4fcf709544547013bf6b56cfc78eb3</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, enum coo2d coo)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gad3894a6050cee1010ce5ed747be354a8</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga560430a36b248dd660e76d2eea636a36</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga3787c7e5234f97209301bf4164748c92</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, enum coo3d coo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multiply.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>multiply_8h.html</filename>
    <includes id="operator_8h" name="operator.h" local="yes" imported="no">operator.h</includes>
    <includes id="functors_8h" name="functors.h" local="yes" imported="no">dg/functors.h</includes>
    <includes id="blas1_8h" name="blas1.h" local="yes" imported="no">dg/blas1.h</includes>
    <includes id="tensor_8h" name="tensor.h" local="yes" imported="no">tensor.h</includes>
    <class kind="struct">dg::TensorMultiply2d</class>
    <class kind="struct">dg::TensorMultiply3d</class>
    <class kind="struct">dg::InverseTensorMultiply2d</class>
    <class kind="struct">dg::InverseTensorMultiply3d</class>
    <class kind="struct">dg::TensorDot2d</class>
    <class kind="struct">dg::TensorDot3d</class>
    <class kind="struct">dg::TensorDeterminant2d</class>
    <class kind="struct">dg::TensorDeterminant3d</class>
    <namespace>dg</namespace>
    <namespace>dg::tensor</namespace>
    <member kind="function">
      <type>void</type>
      <name>scal</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>gab8253e13a6e951887fc59592af0717b3</anchor>
      <arglist>(SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;mu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga6177f4d0f3a84f07caab5aa61653f779</anchor>
      <arglist>(const ContainerTypeL &amp;lambda, const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerTypeM &amp;mu, ContainerType3 &amp;out0, ContainerType4 &amp;out1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply3d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>gab5d5a1bbeeb51ef4d01ac3fc9fe973d2</anchor>
      <arglist>(const ContainerTypeL &amp;lambda, const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerType3 &amp;in2, const ContainerTypeM &amp;mu, ContainerType4 &amp;out0, ContainerType5 &amp;out1, ContainerType6 &amp;out2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inv_multiply2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga5188d879c91ee5f5207feb026fd1d833</anchor>
      <arglist>(const ContainerTypeL &amp;lambda, const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerTypeM &amp;mu, ContainerType3 &amp;out0, ContainerType4 &amp;out1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inv_multiply3d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga08369384a22e2a358e347f5474f0a8e4</anchor>
      <arglist>(const ContainerTypeL &amp;lambda, const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerType3 &amp;in2, const ContainerTypeM &amp;mu, ContainerType4 &amp;out0, ContainerType5 &amp;out1, ContainerType6 &amp;out2)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType</type>
      <name>determinant2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga439491ad1ce54f447e75e67ff9235c18</anchor>
      <arglist>(const SparseTensor&lt; ContainerType &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType</type>
      <name>determinant</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga6b6d04226d2382a21c737d9bcd23a00b</anchor>
      <arglist>(const SparseTensor&lt; ContainerType &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType</type>
      <name>volume2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>gabca3e13e824c6cf0ec1606f035406c23</anchor>
      <arglist>(const SparseTensor&lt; ContainerType &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType</type>
      <name>volume</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga7356ee29303d9600291cd7489085492d</anchor>
      <arglist>(const SparseTensor&lt; ContainerType &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga1b07c5a3d2efa00644eb4e6f1248d07a</anchor>
      <arglist>(const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, ContainerType3 &amp;out0, ContainerType4 &amp;out1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply3d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga7e100a5b20fd970ebbc1ef5e9bb018e7</anchor>
      <arglist>(const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerType3 &amp;in2, ContainerType4 &amp;out0, ContainerType5 &amp;out1, ContainerType6 &amp;out2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inv_multiply2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga1ce7cb0f74bb9c80b839b4771b8657d2</anchor>
      <arglist>(const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, ContainerType3 &amp;out0, ContainerType4 &amp;out1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inv_multiply3d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga167a888144d611c14d05c2142fd95064</anchor>
      <arglist>(const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerType3 &amp;in2, ContainerType4 &amp;out0, ContainerType5 &amp;out1, ContainerType6 &amp;out2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scalar_product2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga474649ce3a4de2b2830eedcbfea609f7</anchor>
      <arglist>(get_value_type&lt; ContainerType0 &gt; alpha, const ContainerTypeL &amp;lambda, const ContainerType0 &amp;v0, const ContainerType1 &amp;v1, const SparseTensor&lt; ContainerType2 &gt; &amp;t, const ContainerTypeM &amp;mu, const ContainerType3 &amp;w0, const ContainerType4 &amp;w1, get_value_type&lt; ContainerType0 &gt; beta, ContainerType5 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scalar_product3d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>gac94822bd38b36e094bf11070a9fa2fff</anchor>
      <arglist>(get_value_type&lt; ContainerType0 &gt; alpha, const ContainerTypeL &amp;lambda, const ContainerType0 &amp;v0, const ContainerType1 &amp;v1, const ContainerType2 &amp;v2, const SparseTensor&lt; ContainerType3 &gt; &amp;t, const ContainerTypeM &amp;mu, const ContainerType4 &amp;w0, const ContainerType5 &amp;w1, const ContainerType6 &amp;w2, get_value_type&lt; ContainerType0 &gt; beta, ContainerType7 &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>operator.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>operator_8h.html</filename>
    <includes id="dlt_8h" name="dlt.h" local="yes" imported="no">dlt.h</includes>
    <includes id="blas1_8h" name="blas1.h" local="yes" imported="no">../blas1.h</includes>
    <class kind="class">dg::Operator</class>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>T</type>
      <name>lu_pivot</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>ga7fb17ff21ad6a85d0d37d27bda7a415e</anchor>
      <arglist>(dg::Operator&lt; T &gt; &amp;m, std::vector&lt; unsigned &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lu_solve</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>gaa40be4ffcfe413c4a224b50021999192</anchor>
      <arglist>(const dg::Operator&lt; T &gt; &amp;lu, const std::vector&lt; unsigned &gt; &amp;p, std::vector&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>dg::Operator&lt; T &gt;</type>
      <name>inverse</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>ga3080a40f3cc395f77387a1cb653751bd</anchor>
      <arglist>(const dg::Operator&lt; T &gt; &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>delta</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gaa01304433dafdd46521a80931624e3ab</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>pipj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga4eda51075f016d1ed364317fc6127021</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>pipj_inv</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gae4413d3fb853db9ef8c7a14dc2d2411c</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>pidxpj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gab64b84ba1977a189256d9cff316e83b5</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>rirj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga9b7c40ad20cfbf37b5a95346c65ec3dc</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>rilj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga9f0c1f9f511c1bde286a9bbc182cdc62</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>lirj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga0073b9ef0b3263faa43f5d949b80bebb</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>lilj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gaf7e53181fceca7316f1ad9eb39f01280</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>ninj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gafba959205e1aae03847f39b244ae065f</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga29b3f19987d7fdbd6cc0cd704498a951</anchor>
      <arglist>(const DLT&lt; real_type &gt; &amp;dlt)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>precond</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga8df4669ca0584fcf2b027a5485b0dc9f</anchor>
      <arglist>(const DLT&lt; real_type &gt; &amp;dlt)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>operator_tensor.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>operator__tensor_8h.html</filename>
    <includes id="operator_8h" name="operator.h" local="yes" imported="no">operator.h</includes>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <namespace>dg</namespace>
    <member kind="function">
      <type>Operator&lt; T &gt;</type>
      <name>tensorproduct</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga25d57ef17c414c1f1b7925c49b43e256</anchor>
      <arglist>(const Operator&lt; T &gt; &amp;op1, const Operator&lt; T &gt; &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, T, cusp::host_memory &gt;</type>
      <name>tensorproduct</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gad66cb579087e7c2104ea1f23bf2e0f01</anchor>
      <arglist>(unsigned N, const Operator&lt; T &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, T, cusp::host_memory &gt;</type>
      <name>sandwich</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga3cd6e8f0b5021e66f03fe7010e921c2e</anchor>
      <arglist>(const Operator&lt; T &gt; &amp;left, const cusp::coo_matrix&lt; int, T, cusp::host_memory &gt; &amp;m, const Operator&lt; T &gt; &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>projection.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>projection_8h.html</filename>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <includes id="interpolation_8h" name="interpolation.h" local="yes" imported="no">interpolation.h</includes>
    <includes id="weights_8h" name="weights.h" local="yes" imported="no">weights.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>T</type>
      <name>gcd</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga008408676aea2583d10dc001e9b8b9f1</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lcm</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>gae521421a2db99cf793bb0f2cd5a16126</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga960c598e8d895bc725aca898addf3ad4</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g_new, const RealGrid1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga47227ef2f447fcd96c64119676b370a8</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g_new, const aRealTopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga8cc266e144f7c72cd40809727ee970fe</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g_new, const aRealTopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>diagonal</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga2c6f55f5cdacb323a66a4ef99c4aa849</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;diagonal)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gae1acd5229e37e86c014468f8a7029abf</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g_new, const RealGrid1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gad20d227f6c8cb2547e757852413dbe7b</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g_new, const aRealTopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gad77a4a2cbeabce81c6a7bfdbfd5871cc</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g_new, const aRealTopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>transformation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga6b8bdd9c1752a8d88a683f816f182f3d</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g_new, const aRealTopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>transformation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gab4b6355e9c86c83ee4555781daa429cf</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g_new, const aRealTopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>transformation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga69ae54a688a91889650a636f7245b6cd</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g_new, const RealGrid1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>projectionX.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>projection_x_8h.html</filename>
    <includes id="projection_8h" name="projection.h" local="yes" imported="no">projection.h</includes>
    <includes id="grid_x_8h" name="gridX.h" local="yes" imported="no">gridX.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga8cd81655e5b3de445bfc3fee6caa9b95</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g_new, const RealGridX1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga095fd7d647e30d3cd9abc9b3fbe0cca1</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g_new, const aRealTopologyX2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga70308c71453e2014553163b5c097ce12</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g_new, const aRealTopologyX3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gae51d004fa4abfa57f13502617ba184c6</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g_new, const RealGridX1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga5e117be1d538fffb647d858e1325cdf6</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g_new, const aRealTopologyX2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gafb82763a4a75e035022ae1d0ee6fe55c</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g_new, const aRealTopologyX3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>refined_grid.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>refined__grid_8h.html</filename>
    <includes id="memory_8h" name="memory.h" local="yes" imported="no">dg/backend/memory.h</includes>
    <includes id="blas_8h" name="blas.h" local="yes" imported="no">dg/blas.h</includes>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <includes id="weights_8h" name="weights.h" local="yes" imported="no">weights.h</includes>
    <includes id="interpolation_8h" name="interpolation.h" local="yes" imported="no">interpolation.h</includes>
    <includes id="base__geometry_8h" name="base_geometry.h" local="yes" imported="no">base_geometry.h</includes>
    <class kind="struct">dg::aRealRefinement1d</class>
    <class kind="struct">dg::RealIdentityRefinement</class>
    <class kind="struct">dg::RealLinearRefinement</class>
    <class kind="struct">dg::RealFemRefinement</class>
    <class kind="struct">dg::RealEquidistRefinement</class>
    <class kind="struct">dg::RealExponentialRefinement</class>
    <class kind="struct">dg::RealCartesianRefinedGrid2d</class>
    <class kind="struct">dg::RealCartesianRefinedGrid3d</class>
    <namespace>dg</namespace>
    <member kind="typedef">
      <type>dg::aRealRefinement1d&lt; double &gt;</type>
      <name>aRefinement1d</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga1cfe6f739503af0dfefa5b9d73cacd94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealIdentityRefinement&lt; double &gt;</type>
      <name>IdentityRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>gab93b3c971661bfaa425029fc3d56261f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealFemRefinement&lt; double &gt;</type>
      <name>FemRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga96aaed7d8d2ab88c86583a7b336ebb56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealLinearRefinement&lt; double &gt;</type>
      <name>LinearRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga00a2c4dee1c9df122dcb22d33773a70c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealEquidistRefinement&lt; double &gt;</type>
      <name>EquidistRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga1fc3ed9c0e84086363c957a8aaa60c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealExponentialRefinement&lt; double &gt;</type>
      <name>ExponentialRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>gac68dab098eb0c98222e98ad836e8f346</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianRefinedGrid2d&lt; double &gt;</type>
      <name>CartesianRefinedGrid2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gae33f770d1c46285a962e8fb273740847</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianRefinedGrid3d&lt; double &gt;</type>
      <name>CartesianRefinedGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gad86a5ae145abeee9327d23b8835f5624</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>refined_gridX.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>refined__grid_x_8h.html</filename>
    <includes id="interpolation_8h" name="interpolation.h" local="yes" imported="no">interpolation.h</includes>
    <includes id="evaluation_x_8h" name="evaluationX.h" local="yes" imported="no">evaluationX.h</includes>
    <includes id="weights_x_8h" name="weightsX.h" local="yes" imported="no">weightsX.h</includes>
    <includes id="grid_x_8h" name="gridX.h" local="yes" imported="no">gridX.h</includes>
    <includes id="base__geometry_x_8h" name="base_geometryX.h" local="yes" imported="no">base_geometryX.h</includes>
    <includes id="refined__grid_8h" name="refined_grid.h" local="yes" imported="no">refined_grid.h</includes>
    <class kind="struct">dg::aRealRefinementX2d</class>
    <class kind="struct">dg::RealIdentityXRefinement</class>
    <class kind="struct">dg::RealEquidistXRefinement</class>
    <class kind="struct">dg::RealExponentialXRefinement</class>
    <class kind="struct">dg::RealCartesianRefinedGridX2d</class>
    <class kind="struct">dg::RealCartesianRefinedGridX3d</class>
    <namespace>dg</namespace>
    <member kind="typedef">
      <type>dg::aRealRefinementX2d&lt; double &gt;</type>
      <name>aRefinementX2d</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga1f0f5348b03f19a4e51d6cfc155e65f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealIdentityXRefinement&lt; double &gt;</type>
      <name>IdentityXRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>gaa0a0bdd0f1b1312461690645efaca772</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealEquidistXRefinement&lt; double &gt;</type>
      <name>EquidistXRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>gaa62609aff1a674f8d677c75b034846d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealExponentialXRefinement&lt; double &gt;</type>
      <name>ExponentialXRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga6799c46023dafaa5e880a984f34305c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianRefinedGridX2d&lt; double &gt;</type>
      <name>CartesianRefinedGridX2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga36bab6ae6eb7da83bcf744b97758fb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianRefinedGridX3d&lt; double &gt;</type>
      <name>CartesianRefinedGridX3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga3e02ec4002805e3ba330748bdd1168f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>split_and_join.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>split__and__join_8h.html</filename>
    <includes id="view_8h" name="view.h" local="yes" imported="no">dg/backend/view.h</includes>
    <includes id="blas1_8h" name="blas1.h" local="yes" imported="no">dg/blas1.h</includes>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <includes id="mpi__vector_8h" name="mpi_vector.h" local="yes" imported="no">dg/backend/mpi_vector.h</includes>
    <includes id="mpi__grid_8h" name="mpi_grid.h" local="yes" imported="no">mpi_grid.h</includes>
    <includes id="mpi__evaluation_8h" name="mpi_evaluation.h" local="yes" imported="no">mpi_evaluation.h</includes>
    <namespace>dg</namespace>
    <member kind="typedef">
      <type>std::conditional_t&lt; std::is_const&lt; MPIContainer &gt;::value, MPI_Vector&lt; View&lt; const typename MPIContainer::container_type &gt; &gt;, MPI_Vector&lt; View&lt; typename MPIContainer::container_type &gt; &gt; &gt;</type>
      <name>get_mpi_view_type</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga0dfee7e9924d22270433283dab1799c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gab3c8c6e962a08fd1f5a9ae432959fe6a</anchor>
      <arglist>(SharedContainer &amp;in, std::vector&lt; View&lt; SharedContainer &gt; &gt; &amp;out, const aRealTopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; View&lt; SharedContainer &gt; &gt;</type>
      <name>split</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gac53bcdbcd4965f823b0e42b3f6bc4934</anchor>
      <arglist>(SharedContainer &amp;in, const aRealTopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign3dfrom2d</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga0821f41b95af4def23af0a71a64ae3d2</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;in2d, Container &amp;out, const aRealTopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga4a2763b6f9cfb9187f02b0c3fc07b60b</anchor>
      <arglist>(MPIContainer &amp;in, std::vector&lt; get_mpi_view_type&lt; MPIContainer &gt; &gt; &amp;out, const aRealMPITopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; get_mpi_view_type&lt; MPIContainer &gt; &gt;</type>
      <name>split</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gaee4537d6d483858e5bd28ad77607ffb8</anchor>
      <arglist>(MPIContainer &amp;in, const aRealMPITopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign3dfrom2d</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga338acc974d9ae6068439a7ea35500fb5</anchor>
      <arglist>(const MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt; &amp;in2d, MPI_Vector&lt; LocalContainer &gt; &amp;out, const aRealMPITopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tensor.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>tensor_8h.html</filename>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <includes id="operator_8h" name="operator.h" local="yes" imported="no">operator.h</includes>
    <includes id="evaluation_8h" name="evaluation.h" local="yes" imported="no">evaluation.h</includes>
    <includes id="evaluation_x_8h" name="evaluationX.h" local="yes" imported="no">evaluationX.h</includes>
    <includes id="functors_8h" name="functors.h" local="yes" imported="no">dg/functors.h</includes>
    <includes id="blas1_8h" name="blas1.h" local="yes" imported="no">dg/blas1.h</includes>
    <class kind="struct">dg::SparseTensor</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>topological_traits.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>topological__traits_8h.html</filename>
    <class kind="struct">dg::TopologyTraits</class>
    <class kind="struct">dg::MPITag</class>
    <class kind="struct">dg::SharedTag</class>
    <class kind="struct">dg::OneDimensionalTag</class>
    <class kind="struct">dg::TwoDimensionalTag</class>
    <class kind="struct">dg::ThreeDimensionalTag</class>
    <namespace>dg</namespace>
  </compound>
  <compound kind="file">
    <name>transform.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>transform_8h.html</filename>
    <includes id="topological__traits_8h" name="topological_traits.h" local="yes" imported="no">topological_traits.h</includes>
    <includes id="multiply_8h" name="multiply.h" local="yes" imported="no">multiply.h</includes>
    <includes id="base__geometry_8h" name="base_geometry.h" local="yes" imported="no">base_geometry.h</includes>
    <includes id="weights_8h" name="weights.h" local="yes" imported="no">weights.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>ga26cd8cf86c9a9d99ca23d153de1e60fd</anchor>
      <arglist>(const Functor &amp;f, const aRealGeometry2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>ga9c2b51bebd46cc7df7d889e577705d1e</anchor>
      <arglist>(const Functor &amp;f, const aRealGeometry3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>gae45584831ec2f50a2c237d709c9ff555</anchor>
      <arglist>(const Functor &amp;f, const aRealMPIGeometry2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>gad6f6fccd5946018b396e67d654ea8c84</anchor>
      <arglist>(const Functor &amp;f, const aRealMPIGeometry3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushForwardPerp</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>gab8b4c0a46bf70e59e456df9bf8a68e0d</anchor>
      <arglist>(const Functor1 &amp;vR, const Functor2 &amp;vZ, container &amp;vx, container &amp;vy, const Geometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushForward</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>gaf1b8e5426e47a83f079b723dcad325e5</anchor>
      <arglist>(const Functor1 &amp;vR, const Functor2 &amp;vZ, const Functor3 &amp;vPhi, container &amp;vx, container &amp;vy, container &amp;vz, const Geometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushForwardPerp</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>ga0184e8f7d99dcfde909c850ff4f85c0b</anchor>
      <arglist>(const FunctorRR &amp;chiRR, const FunctorRZ &amp;chiRZ, const FunctorZZ &amp;chiZZ, SparseTensor&lt; container &gt; &amp;chi, const Geometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>get_host_vector&lt; Geometry &gt;</type>
      <name>volume</name>
      <anchorfile>group__metric.html</anchorfile>
      <anchor>ga4408e71f634fa4398fac88a257ffcc89</anchor>
      <arglist>(const Geometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>get_host_vector&lt; Geometry &gt;</type>
      <name>inv_volume</name>
      <anchorfile>group__metric.html</anchorfile>
      <anchor>ga7b03efdfdf0c58b6a326ac2776319395</anchor>
      <arglist>(const Geometry &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>weights.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>weights_8h.html</filename>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <includes id="enums_8h" name="enums.h" local="yes" imported="no">../enums.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gab6c33ce2ca09965cb9aeaca24821ae73</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gaed5d9239842d3b1a3ce2a9c802271701</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga1b2f42db5a4d837c574fc01bd6120d90</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga730eda0388badc1d87d5f5d1e8822458</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gaab57a9244736dfd4c179d65b04d6e59b</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, enum coo2d coo)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gacdfddc9ed93ec1f7d320cd4c2d3b0225</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga05bb8cd9f822b5c943cb9d063e266770</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga034752a7c11eb411fdf30321d7d8e568</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, enum coo3d coo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>weightsX.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>weights_x_8h.html</filename>
    <includes id="weights_8h" name="weights.h" local="yes" imported="no">weights.h</includes>
    <includes id="grid_x_8h" name="gridX.h" local="yes" imported="no">gridX.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga6ef7794d8b926ff8ac18ac9ecf7e7667</anchor>
      <arglist>(const dg::RealGridX1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga64016d621d0aafd42458cd7ff20b7cd3</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga6b3e53c4c542e81ab9f0ad51afcd452b</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga599787f1f3afa389ecae34c1c7560620</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga8302d29a07f64260c2ee172d2d29625f</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga1933c21fd269f203e1b9a6932ed28256</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>xspacelib.h</name>
    <path>/home/matthias/Projekte/feltor/inc/dg/topology/</path>
    <filename>xspacelib_8h.html</filename>
    <includes id="grid_8h" name="grid.h" local="yes" imported="no">grid.h</includes>
    <includes id="dlt_8h" name="dlt.h" local="yes" imported="no">dlt.h</includes>
    <includes id="operator_8h" name="operator.h" local="yes" imported="no">operator.h</includes>
    <includes id="operator__tensor_8h" name="operator_tensor.h" local="yes" imported="no">operator_tensor.h</includes>
    <includes id="interpolation_8h" name="interpolation.h" local="yes" imported="no">interpolation.h</includes>
    <namespace>dg</namespace>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, T, cusp::host_memory &gt;</type>
      <name>tensorproduct</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gab315055e9fda5fb02a13483bf99d368a</anchor>
      <arglist>(const cusp::coo_matrix&lt; int, T, cusp::host_memory &gt; &amp;lhs, const cusp::coo_matrix&lt; int, T, cusp::host_memory &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>dg::IHMatrix</type>
      <name>backscatter</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga6415fe1f11cea3b08b41972e3039b3cc</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>dg::IHMatrix</type>
      <name>backscatter</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gab00ad9a6f01a6845f6a48be0bae639d9</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>dg::IHMatrix</type>
      <name>backscatter</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gaf01302b85e93b5461ecd500a29daca4b</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ABS</name>
    <filename>structdg_1_1_a_b_s.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_a_b_s.html</anchorfile>
      <anchor>a8bb07d882f3f7614d24f5f9aa3d03d64</anchor>
      <arglist>(T x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::AbsMax</name>
    <filename>structdg_1_1_abs_max.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_abs_max.html</anchorfile>
      <anchor>a838aa03ebc9d155f0b9cb8caa35157d3</anchor>
      <arglist>(T x, T y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::AbsMin</name>
    <filename>structdg_1_1_abs_min.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_abs_min.html</anchorfile>
      <anchor>aa1abd700121746ac95007c0acf0ce34b</anchor>
      <arglist>(T x, T y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aCommunicator</name>
    <filename>structdg_1_1a_communicator.html</filename>
    <templarg>class LocalContainer</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; LocalContainer &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1a_communicator.html</anchorfile>
      <anchor>a6b3761c8938941ad409b0e5ae8f396ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalContainer</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1a_communicator.html</anchorfile>
      <anchor>a5edbb00e9845d00160d9aa75c9bd80da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LocalContainer</type>
      <name>allocate_buffer</name>
      <anchorfile>structdg_1_1a_communicator.html</anchorfile>
      <anchor>a9a29bf560157c2d0a81d4ce96b1a0634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>global_gather</name>
      <anchorfile>structdg_1_1a_communicator.html</anchorfile>
      <anchor>a0d4afb767c3d62c1908eed2c4eb156a7</anchor>
      <arglist>(const value_type *values, LocalContainer &amp;buffer) const</arglist>
    </member>
    <member kind="function">
      <type>LocalContainer</type>
      <name>global_gather</name>
      <anchorfile>structdg_1_1a_communicator.html</anchorfile>
      <anchor>a977b6a58f608dc19041bb2a1f310ba3a</anchor>
      <arglist>(const value_type *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>global_scatter_reduce</name>
      <anchorfile>structdg_1_1a_communicator.html</anchorfile>
      <anchor>a342c5ad30f218eb1e2588369aae72fd2</anchor>
      <arglist>(const LocalContainer &amp;toScatter, value_type *values) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>buffer_size</name>
      <anchorfile>structdg_1_1a_communicator.html</anchorfile>
      <anchor>a7c0b8733751b2b82449a54676e4f0397</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>local_size</name>
      <anchorfile>structdg_1_1a_communicator.html</anchorfile>
      <anchor>a190bc7d049ea3aaea0d1f50ff9f86f4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCommunicating</name>
      <anchorfile>structdg_1_1a_communicator.html</anchorfile>
      <anchor>ab6da46a52184be235645f0194f22cdd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>communicator</name>
      <anchorfile>structdg_1_1a_communicator.html</anchorfile>
      <anchor>acc738661d96a4d926541c14fd28723c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual aCommunicator *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1a_communicator.html</anchorfile>
      <anchor>aeb505e6ee0a7f9119cfdfcba059f7f12</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aCommunicator</name>
      <anchorfile>structdg_1_1a_communicator.html</anchorfile>
      <anchor>a94374e74e4a9a7857f65de3a5e64ba37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aCommunicator</name>
      <anchorfile>structdg_1_1a_communicator.html</anchorfile>
      <anchor>af7d649518836cb8d29e7abbeb530abc9</anchor>
      <arglist>(unsigned local_size=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aCommunicator</name>
      <anchorfile>structdg_1_1a_communicator.html</anchorfile>
      <anchor>a2861411ab00b8988436cf0259edbbc1b</anchor>
      <arglist>(const aCommunicator &amp;src)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aCommunicator &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_communicator.html</anchorfile>
      <anchor>a141c1eead2eba27e720b3a51f0ae3c38</anchor>
      <arglist>(const aCommunicator &amp;src)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_local_size</name>
      <anchorfile>structdg_1_1a_communicator.html</anchorfile>
      <anchor>a8bcacc78e5bdce668b052adf1a9e1169</anchor>
      <arglist>(unsigned new_size)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Adaptive</name>
    <filename>structdg_1_1_adaptive.html</filename>
    <templarg>class Stepper</templarg>
    <member kind="typedef">
      <type>Stepper</type>
      <name>stepper_type</name>
      <anchorfile>structdg_1_1_adaptive.html</anchorfile>
      <anchor>a6c48d0d136681f6c6810e41538fb8771</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Stepper::container_type</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_adaptive.html</anchorfile>
      <anchor>a9b0066793e3a3e9d5159da5c12dfb4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Stepper::value_type</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_adaptive.html</anchorfile>
      <anchor>a9f64c811c0abb1a6aa871d4bf7b868a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Adaptive</name>
      <anchorfile>structdg_1_1_adaptive.html</anchorfile>
      <anchor>a421b682c962d2f8c010a43278f22cb0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Adaptive</name>
      <anchorfile>structdg_1_1_adaptive.html</anchorfile>
      <anchor>ae5cb5e4317ad65086f4272a6a48b69e2</anchor>
      <arglist>(StepperParams &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_adaptive.html</anchorfile>
      <anchor>a94a2a4775e4b28140da5b61d348c7f6e</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>stepper_type &amp;</type>
      <name>stepper</name>
      <anchorfile>structdg_1_1_adaptive.html</anchorfile>
      <anchor>a2e1cb29ae32e9bc382f22790ca684645</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const stepper_type &amp;</type>
      <name>stepper</name>
      <anchorfile>structdg_1_1_adaptive.html</anchorfile>
      <anchor>a19ab3bfa1165e9570018208c69405e6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>structdg_1_1_adaptive.html</anchorfile>
      <anchor>a2358b99c6a02db92304b1b6b568e3112</anchor>
      <arglist>(ODE &amp;&amp;ode, value_type t0, const container_type &amp;u0, value_type &amp;t1, container_type &amp;u1, value_type &amp;dt, ControlFunction control, ErrorNorm norm, value_type rtol, value_type atol, value_type reject_limit=2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>failed</name>
      <anchorfile>structdg_1_1_adaptive.html</anchorfile>
      <anchor>ad11328919ed0d30e7e8719cd2f7629a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const unsigned &amp;</type>
      <name>nfailed</name>
      <anchorfile>structdg_1_1_adaptive.html</anchorfile>
      <anchor>a4f07a5345c2628c9f1dbe8d8cee8ef45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned &amp;</type>
      <name>nfailed</name>
      <anchorfile>structdg_1_1_adaptive.html</anchorfile>
      <anchor>a1b665e65a06eb67811c5ec9c4cd7251f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const unsigned &amp;</type>
      <name>nsteps</name>
      <anchorfile>structdg_1_1_adaptive.html</anchorfile>
      <anchor>aaa3bed7fbe0a9615c8f281701430a5b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned &amp;</type>
      <name>nsteps</name>
      <anchorfile>structdg_1_1_adaptive.html</anchorfile>
      <anchor>a7ab0e8a440ba6b0894d6b281445df0a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>get_error</name>
      <anchorfile>structdg_1_1_adaptive.html</anchorfile>
      <anchor>aabe13e0ad61e76d061720af0c47e2b48</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::AdaptiveTimeloop</name>
    <filename>structdg_1_1_adaptive_timeloop.html</filename>
    <templarg>class ContainerType</templarg>
    <base>dg::aTimeloop</base>
    <member kind="typedef">
      <type>dg::get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_adaptive_timeloop.html</anchorfile>
      <anchor>a8e9c271f576107cfa7782512be9c53bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_adaptive_timeloop.html</anchorfile>
      <anchor>aff234445a4d8d449596b38d73164bb1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdaptiveTimeloop</name>
      <anchorfile>structdg_1_1_adaptive_timeloop.html</anchorfile>
      <anchor>ac9a0330609a0573718b852bc0afc24d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdaptiveTimeloop</name>
      <anchorfile>structdg_1_1_adaptive_timeloop.html</anchorfile>
      <anchor>a9664dadb583d01c0d455be20d6495be3</anchor>
      <arglist>(std::function&lt; void(value_type, const ContainerType &amp;, value_type &amp;, ContainerType &amp;, value_type &amp;)&gt; step)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdaptiveTimeloop</name>
      <anchorfile>structdg_1_1_adaptive_timeloop.html</anchorfile>
      <anchor>a567e579368bf581bb608c2537ffe7137</anchor>
      <arglist>(Adaptive &amp;&amp;adapt, ODE &amp;&amp;ode, ControlFunction control, ErrorNorm norm, value_type rtol, value_type atol, value_type reject_limit=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_adaptive_timeloop.html</anchorfile>
      <anchor>aa90d2f60c771a2f9bf3f1c4ae6c30f87</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dt</name>
      <anchorfile>structdg_1_1_adaptive_timeloop.html</anchorfile>
      <anchor>ab8a596483d0c88c984843e541cdc2b89</anchor>
      <arglist>(value_type dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate_in_domain</name>
      <anchorfile>structdg_1_1_adaptive_timeloop.html</anchorfile>
      <anchor>ad5ad1272c722d63824c0f36cfa329c89</anchor>
      <arglist>(value_type t0, const ContainerType &amp;u0, value_type &amp;t1, ContainerType &amp;u1, value_type dt, Domain &amp;&amp;domain, value_type eps_root)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AdaptiveTimeloop *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_adaptive_timeloop.html</anchorfile>
      <anchor>a6c940e50bd0150fbe56575d3d32786b5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Advection</name>
    <filename>structdg_1_1_advection.html</filename>
    <templarg>class Geometry</templarg>
    <templarg>class Matrix</templarg>
    <templarg>class Container</templarg>
    <member kind="typedef">
      <type>Geometry</type>
      <name>geometry_type</name>
      <anchorfile>structdg_1_1_advection.html</anchorfile>
      <anchor>af2f80ec6757ece00d4ff0d0da0011d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>matrix_type</name>
      <anchorfile>structdg_1_1_advection.html</anchorfile>
      <anchor>aee9d871f958f81ab9bfa92570bd1ff78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_advection.html</anchorfile>
      <anchor>a6422cdd503a4a0d28354b5675cfb9382</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; Container &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_advection.html</anchorfile>
      <anchor>ab5d288085405a763c764e6f31021aa6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Advection</name>
      <anchorfile>structdg_1_1_advection.html</anchorfile>
      <anchor>acea9bea9a962f10ba362317fe22ab3b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Advection</name>
      <anchorfile>structdg_1_1_advection.html</anchorfile>
      <anchor>ad89c0977b320e4f13183609ceeebb740</anchor>
      <arglist>(const Geometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Advection</name>
      <anchorfile>structdg_1_1_advection.html</anchorfile>
      <anchor>aa98b6cc2153130966ca59245fc869d0d</anchor>
      <arglist>(const Geometry &amp;g, bc bcx, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_advection.html</anchorfile>
      <anchor>a72491cf1e32607b6fafcd5071db393e0</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upwind</name>
      <anchorfile>structdg_1_1_advection.html</anchorfile>
      <anchor>a223588accadc8ec05b426ed0faf3a06e</anchor>
      <arglist>(value_type alpha, const ContainerType0 &amp;vx, const ContainerType1 &amp;vy, const ContainerType2 &amp;f, value_type beta, ContainerType3 &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::AndersonAcceleration</name>
    <filename>structdg_1_1_anderson_acceleration.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_anderson_acceleration.html</anchorfile>
      <anchor>a9465ebba6cf44a11b5b9d60721c98af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_anderson_acceleration.html</anchorfile>
      <anchor>afffe938176e76d9cf804dfb227b129ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AndersonAcceleration</name>
      <anchorfile>structdg_1_1_anderson_acceleration.html</anchorfile>
      <anchor>a1212805578b60f3e909ec57c888de688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AndersonAcceleration</name>
      <anchorfile>structdg_1_1_anderson_acceleration.html</anchorfile>
      <anchor>a4e9d623588bcc0031554aa825e64f959</anchor>
      <arglist>(const ContainerType &amp;copyable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AndersonAcceleration</name>
      <anchorfile>structdg_1_1_anderson_acceleration.html</anchorfile>
      <anchor>a74d41837c605126bb546f4892b844bb1</anchor>
      <arglist>(const ContainerType &amp;copyable, unsigned mMax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_anderson_acceleration.html</anchorfile>
      <anchor>af7f0b45c58dc4ca6c151402c5e9d8c2c</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>structdg_1_1_anderson_acceleration.html</anchorfile>
      <anchor>a256642f890c394e0766cc9be1e23bc46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_throw_on_fail</name>
      <anchorfile>structdg_1_1_anderson_acceleration.html</anchorfile>
      <anchor>ae93383e761b947f511e025a53a6da521</anchor>
      <arglist>(bool throw_on_fail)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>solve</name>
      <anchorfile>structdg_1_1_anderson_acceleration.html</anchorfile>
      <anchor>ad91429c163a7014d3639c60d44a46c02</anchor>
      <arglist>(BinarySubroutine &amp;&amp;f, ContainerType0 &amp;x, const ContainerType1 &amp;b, const ContainerType2 &amp;weights, value_type rtol, value_type atol, unsigned max_iter, value_type damping, unsigned restart, bool verbose)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::AndersonSolver</name>
    <filename>structdg_1_1_anderson_solver.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_anderson_solver.html</anchorfile>
      <anchor>ad9334dd09f6ff4ca1c4f4234de223de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_anderson_solver.html</anchorfile>
      <anchor>a4428369e4a49d912618b73109e5fcfc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AndersonSolver</name>
      <anchorfile>structdg_1_1_anderson_solver.html</anchorfile>
      <anchor>a5eb7c56476a5bd54684fbcfc624acb54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AndersonSolver</name>
      <anchorfile>structdg_1_1_anderson_solver.html</anchorfile>
      <anchor>a1fd87d2f873f7d4cb66538c194460b7a</anchor>
      <arglist>(const ContainerType &amp;copyable, unsigned mMax, value_type eps, unsigned max_iter, value_type damping, unsigned restart)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>structdg_1_1_anderson_solver.html</anchorfile>
      <anchor>a26a33ba7cd5912b926449d57b61d69b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_benchmark</name>
      <anchorfile>structdg_1_1_anderson_solver.html</anchorfile>
      <anchor>abd5135fe97fac6526e95ba9cc971400a</anchor>
      <arglist>(bool benchmark)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>structdg_1_1_anderson_solver.html</anchorfile>
      <anchor>afd97868a8007bae227e3ac47c8d0f8f4</anchor>
      <arglist>(value_type alpha, Implicit &amp;im, value_type t, ContainerType &amp;y, const ContainerType &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::AnyMatrixTag</name>
    <filename>structdg_1_1_any_matrix_tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>dg::AnyPolicyTag</name>
    <filename>structdg_1_1_any_policy_tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>dg::AnyScalarTag</name>
    <filename>structdg_1_1_any_scalar_tag.html</filename>
    <base>dg::AnyVectorTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::AnyVectorTag</name>
    <filename>structdg_1_1_any_vector_tag.html</filename>
    <base>dg::AnyMatrixTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::ArakawaX</name>
    <filename>structdg_1_1_arakawa_x.html</filename>
    <templarg>class Geometry</templarg>
    <templarg>class Matrix</templarg>
    <templarg>class Container</templarg>
    <member kind="typedef">
      <type>Geometry</type>
      <name>geometry_type</name>
      <anchorfile>structdg_1_1_arakawa_x.html</anchorfile>
      <anchor>abfa9569c00d0351a21b5560508775088</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>matrix_type</name>
      <anchorfile>structdg_1_1_arakawa_x.html</anchorfile>
      <anchor>a52b7ceeff0356d31728913ea1dc96ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_arakawa_x.html</anchorfile>
      <anchor>a64303e59b909052ed5e2ee7a069baeb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; Container &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_arakawa_x.html</anchorfile>
      <anchor>acf289da0211749ce91439c11f42fad3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArakawaX</name>
      <anchorfile>structdg_1_1_arakawa_x.html</anchorfile>
      <anchor>a5b1194715b0b8a12c4cfbff73ab47d05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArakawaX</name>
      <anchorfile>structdg_1_1_arakawa_x.html</anchorfile>
      <anchor>a243bd50339803a21d15b80b14d0c9e4c</anchor>
      <arglist>(const Geometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArakawaX</name>
      <anchorfile>structdg_1_1_arakawa_x.html</anchorfile>
      <anchor>a3ffda1e5246eac36e4e285a0b8ea5881</anchor>
      <arglist>(const Geometry &amp;g, bc bcx, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_arakawa_x.html</anchorfile>
      <anchor>a2849d9e38bac58585bb29f29e960cff9</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_arakawa_x.html</anchorfile>
      <anchor>a72e9783e7a27d2a27343dd3775ac3a1c</anchor>
      <arglist>(const ContainerType0 &amp;lhs, const ContainerType1 &amp;rhs, ContainerType2 &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_arakawa_x.html</anchorfile>
      <anchor>ab948439b6980b88ae47ba747277a0876</anchor>
      <arglist>(value_type alpha, const ContainerType0 &amp;lhs, const ContainerType1 &amp;rhs, value_type beta, ContainerType2 &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_chi</name>
      <anchorfile>structdg_1_1_arakawa_x.html</anchorfile>
      <anchor>a10061ac073c8ad9cefb1ed6252e326d8</anchor>
      <arglist>(const ContainerType0 &amp;new_chi)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>dx</name>
      <anchorfile>structdg_1_1_arakawa_x.html</anchorfile>
      <anchor>a7307aeef3dab8fb774b90f41ca5ecb21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>dy</name>
      <anchorfile>structdg_1_1_arakawa_x.html</anchorfile>
      <anchor>a4194eb748b960f7838272c1198c8e28d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aRealGeometry2d</name>
    <filename>structdg_1_1a_real_geometry2d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealTopology2d</base>
    <member kind="function">
      <type>SparseTensor&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>jacobian</name>
      <anchorfile>structdg_1_1a_real_geometry2d.html</anchorfile>
      <anchor>a1830cf2bd99839d3a5001572b435a4d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseTensor&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>metric</name>
      <anchorfile>structdg_1_1a_real_geometry2d.html</anchorfile>
      <anchor>afc537bf91a216e25b0bdc7225330a1d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>map</name>
      <anchorfile>structdg_1_1a_real_geometry2d.html</anchorfile>
      <anchor>a77371d7f0daaf01f1a67773278b174aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual aRealGeometry2d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1a_real_geometry2d.html</anchorfile>
      <anchor>a8711519c980113c02f7837afb83f0ad1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aRealGeometry2d</name>
      <anchorfile>structdg_1_1a_real_geometry2d.html</anchorfile>
      <anchor>a9e9ccb28e6b0df2acc0badbc4b9c510b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealGeometry2d</name>
      <anchorfile>structdg_1_1a_real_geometry2d.html</anchorfile>
      <anchor>aa85bbd873da2905b19ba22ab194abea5</anchor>
      <arglist>(const aRealGeometry2d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aRealGeometry2d &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_real_geometry2d.html</anchorfile>
      <anchor>a868a2a53f7519976091ad017e01d8443</anchor>
      <arglist>(const aRealGeometry2d &amp;src)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aRealGeometry3d</name>
    <filename>structdg_1_1a_real_geometry3d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealTopology3d</base>
    <member kind="function">
      <type>SparseTensor&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>jacobian</name>
      <anchorfile>structdg_1_1a_real_geometry3d.html</anchorfile>
      <anchor>a0a91d55188741c7bcfad01d5ea43cfb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseTensor&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>metric</name>
      <anchorfile>structdg_1_1a_real_geometry3d.html</anchorfile>
      <anchor>a5aca37705cd7c33f4e9737d8e063f083</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>map</name>
      <anchorfile>structdg_1_1a_real_geometry3d.html</anchorfile>
      <anchor>afcf6fe640bd7129989e73f6be43f6eef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual aRealGeometry3d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1a_real_geometry3d.html</anchorfile>
      <anchor>a8f19959b976752db24af4c88e96fdcc9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aRealGeometry3d</name>
      <anchorfile>structdg_1_1a_real_geometry3d.html</anchorfile>
      <anchor>ad8d504c010350e99f07874fb84ac7ea9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealGeometry3d</name>
      <anchorfile>structdg_1_1a_real_geometry3d.html</anchorfile>
      <anchor>a21ea50a9330616ad3d2be1dc56923ac0</anchor>
      <arglist>(const aRealGeometry3d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aRealGeometry3d &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_real_geometry3d.html</anchorfile>
      <anchor>a50294c857da7e6ea0b35d1d04585fc83</anchor>
      <arglist>(const aRealGeometry3d &amp;src)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aRealGeometryX2d</name>
    <filename>structdg_1_1a_real_geometry_x2d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealTopologyX2d</base>
    <member kind="function">
      <type>SparseTensor&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>jacobian</name>
      <anchorfile>structdg_1_1a_real_geometry_x2d.html</anchorfile>
      <anchor>a2a338ef3839856a65c6d5b720dad11dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseTensor&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>metric</name>
      <anchorfile>structdg_1_1a_real_geometry_x2d.html</anchorfile>
      <anchor>a793612e74cca61ba761c43680abeb483</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>map</name>
      <anchorfile>structdg_1_1a_real_geometry_x2d.html</anchorfile>
      <anchor>a2ace81edb48e78eac2414e386d816510</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual aRealGeometryX2d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1a_real_geometry_x2d.html</anchorfile>
      <anchor>a841cb30d3c66251eaa834451bc0448ca</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aRealGeometryX2d</name>
      <anchorfile>structdg_1_1a_real_geometry_x2d.html</anchorfile>
      <anchor>ae5217f8bb7a7a47e700056def0a17da2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealGeometryX2d</name>
      <anchorfile>structdg_1_1a_real_geometry_x2d.html</anchorfile>
      <anchor>a90a9574584e68c07c4da921813d15c10</anchor>
      <arglist>(const aRealGeometryX2d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aRealGeometryX2d &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_real_geometry_x2d.html</anchorfile>
      <anchor>a00b86e07205232054a9625b40a02d52c</anchor>
      <arglist>(const aRealGeometryX2d &amp;src)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aRealGeometryX3d</name>
    <filename>structdg_1_1a_real_geometry_x3d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealTopologyX3d</base>
    <member kind="function">
      <type>SparseTensor&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>jacobian</name>
      <anchorfile>structdg_1_1a_real_geometry_x3d.html</anchorfile>
      <anchor>ab40282ceb61da26f85aee9fba5046636</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseTensor&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>metric</name>
      <anchorfile>structdg_1_1a_real_geometry_x3d.html</anchorfile>
      <anchor>adbce6757810195bc290a8b29785595c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>map</name>
      <anchorfile>structdg_1_1a_real_geometry_x3d.html</anchorfile>
      <anchor>afea5e3f67102a1c1526c94b1e857f92e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual aRealGeometryX3d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1a_real_geometry_x3d.html</anchorfile>
      <anchor>af7368b4536c4fc6d42299f21fda4c361</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aRealGeometryX3d</name>
      <anchorfile>structdg_1_1a_real_geometry_x3d.html</anchorfile>
      <anchor>a62ae07418dc193ede93bf4bcb29bf932</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealGeometryX3d</name>
      <anchorfile>structdg_1_1a_real_geometry_x3d.html</anchorfile>
      <anchor>ae9fcf9f43e694ac8476a1819570e2dbc</anchor>
      <arglist>(const aRealGeometryX3d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aRealGeometryX3d &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_real_geometry_x3d.html</anchorfile>
      <anchor>a1672855888a2733c3ffe0d986a6814d0</anchor>
      <arglist>(const aRealGeometryX3d &amp;src)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aRealMPIGeometry2d</name>
    <filename>structdg_1_1a_real_m_p_i_geometry2d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealMPITopology2d</base>
    <member kind="function">
      <type>SparseTensor&lt; MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt; &gt;</type>
      <name>jacobian</name>
      <anchorfile>structdg_1_1a_real_m_p_i_geometry2d.html</anchorfile>
      <anchor>a30c1196e6667ee8ca6320e6b77a98f0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseTensor&lt; MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt; &gt;</type>
      <name>metric</name>
      <anchorfile>structdg_1_1a_real_m_p_i_geometry2d.html</anchorfile>
      <anchor>ab1ab755e8d57325f80c3c73e17c17885</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt; &gt;</type>
      <name>map</name>
      <anchorfile>structdg_1_1a_real_m_p_i_geometry2d.html</anchorfile>
      <anchor>acb102844275db5a0f58470da73a7466e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual aRealMPIGeometry2d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1a_real_m_p_i_geometry2d.html</anchorfile>
      <anchor>a017ce1e053137d8b0b88688e7829e999</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual aRealGeometry2d&lt; real_type &gt; *</type>
      <name>global_geometry</name>
      <anchorfile>structdg_1_1a_real_m_p_i_geometry2d.html</anchorfile>
      <anchor>aeb8bd77bb8ea5746c455677aae372812</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aRealMPIGeometry2d</name>
      <anchorfile>structdg_1_1a_real_m_p_i_geometry2d.html</anchorfile>
      <anchor>ae0b10471de1e880b93f48d1903130762</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealMPIGeometry2d</name>
      <anchorfile>structdg_1_1a_real_m_p_i_geometry2d.html</anchorfile>
      <anchor>a997b02dab87ab911e4a25c237ff14842</anchor>
      <arglist>(const aRealMPIGeometry2d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aRealMPIGeometry2d &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_real_m_p_i_geometry2d.html</anchorfile>
      <anchor>a5cbce47d292076fc9c8f0144a72f626c</anchor>
      <arglist>(const aRealMPIGeometry2d &amp;src)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aRealMPIGeometry3d</name>
    <filename>structdg_1_1a_real_m_p_i_geometry3d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealMPITopology3d</base>
    <member kind="function">
      <type>SparseTensor&lt; MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt; &gt;</type>
      <name>jacobian</name>
      <anchorfile>structdg_1_1a_real_m_p_i_geometry3d.html</anchorfile>
      <anchor>a71f8059d6502ecb1663d8ce1dbbafcf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseTensor&lt; MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt; &gt;</type>
      <name>metric</name>
      <anchorfile>structdg_1_1a_real_m_p_i_geometry3d.html</anchorfile>
      <anchor>ab07c1551fd285e67ce8f459fa870f2eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt; &gt;</type>
      <name>map</name>
      <anchorfile>structdg_1_1a_real_m_p_i_geometry3d.html</anchorfile>
      <anchor>afff596ad8f15c9016679164ccfb2b8bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual aRealMPIGeometry3d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1a_real_m_p_i_geometry3d.html</anchorfile>
      <anchor>a799afebfc89e782bff4e406b29916668</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual aRealGeometry3d&lt; real_type &gt; *</type>
      <name>global_geometry</name>
      <anchorfile>structdg_1_1a_real_m_p_i_geometry3d.html</anchorfile>
      <anchor>a957a7fc28f57ef07f6ab99689bf1cea1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aRealMPIGeometry3d</name>
      <anchorfile>structdg_1_1a_real_m_p_i_geometry3d.html</anchorfile>
      <anchor>ac9bf2fb52f6867f658fb56beab1f4352</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealMPIGeometry3d</name>
      <anchorfile>structdg_1_1a_real_m_p_i_geometry3d.html</anchorfile>
      <anchor>a3da8d235b705fa3974bea3fae1163f72</anchor>
      <arglist>(const aRealMPIGeometry3d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aRealMPIGeometry3d &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_real_m_p_i_geometry3d.html</anchorfile>
      <anchor>a421eeeb822c66ce21575dd5202bb4525</anchor>
      <arglist>(const aRealMPIGeometry3d &amp;src)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aRealMPITopology2d</name>
    <filename>structdg_1_1a_real_m_p_i_topology2d.html</filename>
    <templarg>class real_type</templarg>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a945a2e45be2825e47135df7118c914e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>host_vector</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a0c70f2f02442d4a57a79faa76128308a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealMPIGrid2d&lt; real_type &gt;</type>
      <name>host_grid</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>abd4365c999bccb2fcea7077060485a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>x0</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>aecd6355cf056e0079c01a7cac9a79d36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>x1</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a0c4c226729fee18e8bda596eae9b7002</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>y0</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a783d544c6a5b4b1510389f8eac0d9530</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>y1</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a90de39e7ee1add7606ae05cb318fc815</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>lx</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a008e12527d4369c2a690021b1d5a7069</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>ly</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a0f5834bce90f2505c32068ed9605510a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>hx</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a4fa75dbe415f7040be4194a53d5ffeec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>hy</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a19b071899f45b239adf6994f1f188f05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>n</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a1188896333502a14e71ddc494e3a5a53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Nx</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a7f13033a2a2d49e03d774c7e2d621854</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Ny</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a7fdfde6d42e4cddfa27bee2e74eeedeb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcx</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>af7d9d6f907c5cca90a7e46ff924b0777</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcy</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a3cdb7daf0ca2df1cd5dd0875dc7f47b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>communicator</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>aae6c74dc4b243d6506cceaeb9151085f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DLT&lt; real_type &gt; &amp;</type>
      <name>dlt</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a3e85a2aeef8a344e2740b4a4a73d1f18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a724e592a57bb827f08727cecd28b5897</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>local_size</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>af422c93c77dee0dfc747ef043136e433</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>acf70744ff43dc2ffd25e30efe12404a7</anchor>
      <arglist>(std::ostream &amp;os=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pidOf</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>aa0ad4bad87c171346be45622d76c83a0</anchor>
      <arglist>(real_type x, real_type y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyCellNumbers</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a4e1df80b8c060684dd0452d4a850f192</anchor>
      <arglist>(real_type fx, real_type fy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a04f313497ba5351581f4ce0ec8d73a8f</anchor>
      <arglist>(unsigned new_n, unsigned new_Nx, unsigned new_Ny)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>local2globalIdx</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>ac68f8f49f75ac80a5f4647f42b67f400</anchor>
      <arglist>(int localIdx, int PID, int &amp;globalIdx) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>global2localIdx</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a138e23ee39301d639555947518f62aa2</anchor>
      <arglist>(int globalIdx, int &amp;localIdx, int &amp;PID) const</arglist>
    </member>
    <member kind="function">
      <type>const RealGrid2d&lt; real_type &gt; &amp;</type>
      <name>local</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a20ba3f256ec4c33342a9079474624181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RealGrid2d&lt; real_type &gt; &amp;</type>
      <name>global</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>abb61a7d11bc2d562b3fde9ab6ec24a83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~aRealMPITopology2d</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>ab546ca41aea0b84c3bd420ac9c934f37</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealMPITopology2d</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a6a42cdd80d1325dc74143471f65b6d0a</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, unsigned n, unsigned Nx, unsigned Ny, bc bcx, bc bcy, MPI_Comm comm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealMPITopology2d</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>ab6397846e9f393e3ca90ea9caaf16e47</anchor>
      <arglist>(const aRealMPITopology2d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aRealMPITopology2d &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>a9599206c5114a1379bacc45184ac1b0b</anchor>
      <arglist>(const aRealMPITopology2d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>do_set</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology2d.html</anchorfile>
      <anchor>ac9f3afd231b721b0e9cfc2c8ed38677e</anchor>
      <arglist>(unsigned new_n, unsigned new_Nx, unsigned new_Ny)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aRealMPITopology3d</name>
    <filename>structdg_1_1a_real_m_p_i_topology3d.html</filename>
    <templarg>class real_type</templarg>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>ad7b341001f50d974d54c13dc73214636</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>host_vector</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>ac3b1491d8cd8695675c7c6eca9cb73a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealMPIGrid3d&lt; real_type &gt;</type>
      <name>host_grid</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a7c68ef357c1a8e1ca5c8f39b5d8b7675</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>x0</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>ad0564a4f042ef67f423e3c55e0f7f305</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>x1</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a2cfdef0298d466c673ccc9c61a5a1a57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>y0</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>ace6592eaa79b9d3b5f4a7e1cadb666f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>y1</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a62ed26befb933039e743578b99624520</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>z0</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>aa31ab4a7ec06f45ba03480783003ee7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>z1</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a807fed768990f8e6cf48043c50afbd3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>lx</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a26395188211df705f45af56ce6ac626a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>ly</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a78b057cd92e1734f00be11f48dc09636</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>lz</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a02690c1f87f6df9de13adf7b961181aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>hx</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>ab14d7a7e2c436363a8db78b8ce1ebe62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>hy</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a8d7d95a469f71fef4650530aa25885c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>hz</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a25725813951470e00b0fa188255cabf2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>n</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a92a65b899382c0b7d60953b2bcce2bd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Nx</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>ab544cee7ead04aa76c1ba0609119b73e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Ny</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a2dcbbb53dcd0cd804d33f46e0bf4d0f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Nz</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a2cdeee8a94cc584b1db22a7b7defcb25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcx</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a96b733bb3ca78572d161eb6fe3802a0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcy</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a66f46f257cc455d43b45371140787464</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcz</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a0389189e4c1d091616b2076baa450bcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>communicator</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a51b172bcc25af8c1bd6e5c9a4caa691e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>get_perp_comm</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a1da6c0aa424f74d70f23dfd6d6d49405</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DLT&lt; real_type &gt; &amp;</type>
      <name>dlt</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a66851c1a8ae5ddab4d57daa888e81f47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>ae4d053cbfe51e50dd28f6aaffb05c517</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>local_size</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a280683415c9b97e17d9cd42b0e9a91da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a30d51de60969f4177c3d11bd2f925542</anchor>
      <arglist>(std::ostream &amp;os=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pidOf</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a6384d85104c9ba080744a46ccee8f6f3</anchor>
      <arglist>(real_type x, real_type y, real_type z) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyCellNumbers</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a80d6836081f9fcfafe9e9b99ab028ad1</anchor>
      <arglist>(real_type fx, real_type fy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>af81a20a0d36de55c53ec9b539e39e728</anchor>
      <arglist>(unsigned new_n, unsigned new_Nx, unsigned new_Ny, unsigned new_Nz)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>local2globalIdx</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a570cef0f205a6fa144c05a2cc652b890</anchor>
      <arglist>(int localIdx, int PID, int &amp;globalIdx) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>global2localIdx</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a60a6ac4867aa5e104dba2aa72f039452</anchor>
      <arglist>(int globalIdx, int &amp;localIdx, int &amp;PID) const</arglist>
    </member>
    <member kind="function">
      <type>const RealGrid3d&lt; real_type &gt; &amp;</type>
      <name>local</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>aaba37fb615db40d0db084a54d97aa6db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RealGrid3d&lt; real_type &gt; &amp;</type>
      <name>global</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a6c2977a80a74793a5a393a48539de3a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~aRealMPITopology3d</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>aa1951e89bfe682c1f4b7d5ca47a59b70</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealMPITopology3d</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a7b21968691a46bde02996884579e1ad5</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type z0, real_type z1, unsigned n, unsigned Nx, unsigned Ny, unsigned Nz, bc bcx, bc bcy, bc bcz, MPI_Comm comm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealMPITopology3d</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a9bdc6067c0dff7d402757d0220d70ff2</anchor>
      <arglist>(const aRealMPITopology3d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aRealMPITopology3d &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>ae0954ad0871e3f166d9ee85022119ca0</anchor>
      <arglist>(const aRealMPITopology3d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>do_set</name>
      <anchorfile>structdg_1_1a_real_m_p_i_topology3d.html</anchorfile>
      <anchor>a22ffd421f1338c52aacac4aea9198bf2</anchor>
      <arglist>(unsigned new_n, unsigned new_Nx, unsigned new_Ny, unsigned new_Nz)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aRealProductGeometry3d</name>
    <filename>structdg_1_1a_real_product_geometry3d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealGeometry3d</base>
    <member kind="function">
      <type>aRealGeometry2d&lt; real_type &gt; *</type>
      <name>perp_grid</name>
      <anchorfile>structdg_1_1a_real_product_geometry3d.html</anchorfile>
      <anchor>a2c07150b09eadd41d74d2de71883439d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aRealProductGeometry3d</name>
      <anchorfile>structdg_1_1a_real_product_geometry3d.html</anchorfile>
      <anchor>ac83413461aba2fedd57f3cdff6e9e8d9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual aRealProductGeometry3d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1a_real_product_geometry3d.html</anchorfile>
      <anchor>a65b09e3f24448d6d3c3b08c78d182a92</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealProductGeometry3d</name>
      <anchorfile>structdg_1_1a_real_product_geometry3d.html</anchorfile>
      <anchor>aa16ec2890bc468142c9fd1114d3afa55</anchor>
      <arglist>(const aRealProductGeometry3d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aRealProductGeometry3d &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_real_product_geometry3d.html</anchorfile>
      <anchor>a081aeabbeafb1d612eca6721b119bb7d</anchor>
      <arglist>(const aRealProductGeometry3d &amp;src)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aRealProductMPIGeometry3d</name>
    <filename>structdg_1_1a_real_product_m_p_i_geometry3d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealMPIGeometry3d</base>
    <member kind="function">
      <type>aRealMPIGeometry2d&lt; real_type &gt; *</type>
      <name>perp_grid</name>
      <anchorfile>structdg_1_1a_real_product_m_p_i_geometry3d.html</anchorfile>
      <anchor>afcfb58655f193f5f9cae64d7b9d74959</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aRealProductMPIGeometry3d</name>
      <anchorfile>structdg_1_1a_real_product_m_p_i_geometry3d.html</anchorfile>
      <anchor>a5fd7473388956168ab707b66b66b7051</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual aRealProductMPIGeometry3d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1a_real_product_m_p_i_geometry3d.html</anchorfile>
      <anchor>ad6624bd4aeb0a593a538b3fe5d8f3c80</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealProductMPIGeometry3d</name>
      <anchorfile>structdg_1_1a_real_product_m_p_i_geometry3d.html</anchorfile>
      <anchor>ae7af0e03444f1236cf0b655e4695b96d</anchor>
      <arglist>(const aRealProductMPIGeometry3d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aRealProductMPIGeometry3d &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_real_product_m_p_i_geometry3d.html</anchorfile>
      <anchor>a4285ac29ee21ec854c0f7b83aafd7293</anchor>
      <arglist>(const aRealProductMPIGeometry3d &amp;src)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aRealRefinement1d</name>
    <filename>structdg_1_1a_real_refinement1d.html</filename>
    <templarg>class real_type</templarg>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>structdg_1_1a_real_refinement1d.html</anchorfile>
      <anchor>ad2b20a9d2098815d2408e5acb06dec21</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g_old, thrust::host_vector&lt; real_type &gt; &amp;weights, thrust::host_vector&lt; real_type &gt; &amp;abscissas) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>N_new</name>
      <anchorfile>structdg_1_1a_real_refinement1d.html</anchorfile>
      <anchor>aee13739fd3d75a708daaeacf46cc4fdf</anchor>
      <arglist>(unsigned N_old, bc bcx) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual aRealRefinement1d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1a_real_refinement1d.html</anchorfile>
      <anchor>a5ee15372eca316200c55d1f86417d002</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aRealRefinement1d</name>
      <anchorfile>structdg_1_1a_real_refinement1d.html</anchorfile>
      <anchor>adfb652ed1fd93e54516a663e4d437872</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealRefinement1d</name>
      <anchorfile>structdg_1_1a_real_refinement1d.html</anchorfile>
      <anchor>aa30ed397b6917b027db918dc289b08a6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealRefinement1d</name>
      <anchorfile>structdg_1_1a_real_refinement1d.html</anchorfile>
      <anchor>a31c28314a759d92c19c7c6dc47f690ef</anchor>
      <arglist>(const aRealRefinement1d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aRealRefinement1d &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_real_refinement1d.html</anchorfile>
      <anchor>a765f9d810e26c49f8a982b1c8c7d8a2e</anchor>
      <arglist>(const aRealRefinement1d &amp;src)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aRealRefinementX2d</name>
    <filename>structdg_1_1a_real_refinement_x2d.html</filename>
    <templarg>class real_type</templarg>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>structdg_1_1a_real_refinement_x2d.html</anchorfile>
      <anchor>ad157cbf0e16b76c07d5e783df4e5631a</anchor>
      <arglist>(const RealGridX2d&lt; real_type &gt; &amp;g_old, thrust::host_vector&lt; real_type &gt; &amp;weightsX, thrust::host_vector&lt; real_type &gt; &amp;weightsY, thrust::host_vector&lt; real_type &gt; &amp;abscissasX, thrust::host_vector&lt; real_type &gt; &amp;abscissasY) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>nx_new</name>
      <anchorfile>structdg_1_1a_real_refinement_x2d.html</anchorfile>
      <anchor>a3e76be65c741dfba9035caf3bf8eb2fb</anchor>
      <arglist>(unsigned Nx_old, real_type fx_old) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>ny_new</name>
      <anchorfile>structdg_1_1a_real_refinement_x2d.html</anchorfile>
      <anchor>a87b1fa28b8aca539c9a0254f83bd07b0</anchor>
      <arglist>(unsigned Ny_old, real_type fy_old) const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>fx_new</name>
      <anchorfile>structdg_1_1a_real_refinement_x2d.html</anchorfile>
      <anchor>ae1e5f611cb8ddb92d68cf4e993d10895</anchor>
      <arglist>(unsigned Nx_old, real_type fx_old) const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>fy_new</name>
      <anchorfile>structdg_1_1a_real_refinement_x2d.html</anchorfile>
      <anchor>ac900e5b90541433a40002f3c5050f182</anchor>
      <arglist>(unsigned Ny_old, real_type fy_old) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual aRealRefinementX2d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1a_real_refinement_x2d.html</anchorfile>
      <anchor>ae5a2fb6426e36ea55b49467bc9ed976b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aRealRefinementX2d</name>
      <anchorfile>structdg_1_1a_real_refinement_x2d.html</anchorfile>
      <anchor>ade706e8f711f1f483ffa7f40b68aa953</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealRefinementX2d</name>
      <anchorfile>structdg_1_1a_real_refinement_x2d.html</anchorfile>
      <anchor>a1a003ce21fcc3858b6784a6a0f9090cd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealRefinementX2d</name>
      <anchorfile>structdg_1_1a_real_refinement_x2d.html</anchorfile>
      <anchor>a63dece62b1775a3797a5cba1c4ec9b9b</anchor>
      <arglist>(const aRealRefinementX2d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aRealRefinementX2d &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_real_refinement_x2d.html</anchorfile>
      <anchor>a769be08f7e78c0e5df8d71db2188b158</anchor>
      <arglist>(const aRealRefinementX2d &amp;src)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aRealTopology2d</name>
    <filename>structdg_1_1a_real_topology2d.html</filename>
    <templarg>class real_type</templarg>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a6520f5dd27bb8b8beeaede2dc66d3931</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>host_vector</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a11f52c0e6cd72875fb37d1f6924fdca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealGrid2d&lt; real_type &gt;</type>
      <name>host_grid</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>ad798cb5295c023f8a6a08bb839afda7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>x0</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a304d4f80327d051852c3c963a6e04c81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>x1</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>ad28b1b826e97472b0e6276db5dc9d276</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>y0</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>ab3732486881f2a5dc9f39487b690e153</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>y1</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a47e7016772bc3bba8b9ac3f99a8c998a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>lx</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>ac0861b5b90b316b7df03492c88f88aa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>ly</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a24fc5fb833ff46ac3bf35c73113b2eb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>hx</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>aaf86af8d99df420e4309b57d1f3e549c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>hy</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a5d7ef3d1526bbee8f0fe7d2b89d77903</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>n</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a07e2f8251cc921548b69a494f5154bb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Nx</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>ac961738714c0447be155ded45614b00c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Ny</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>afe490daa9a97ce9fe0e6bba14267309e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcx</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a978d58a3c6c5af8478b069fde4adf755</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcy</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>ad178ed6f2090b6bd7853aacba7442820</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DLT&lt; real_type &gt; &amp;</type>
      <name>dlt</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>ab765d366d1dbc40132b685cb2200daaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyCellNumbers</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a8c065693132d9adf0bf36ea5dcc5db0d</anchor>
      <arglist>(real_type fx, real_type fy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a486277fa092c222b28b16dbb45415109</anchor>
      <arglist>(unsigned new_n, unsigned new_Nx, unsigned new_Ny)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a9c845ed70b611a51f85436e6d4fd5874</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a3e26ac974dc931994e5a1c0ab591ff5d</anchor>
      <arglist>(std::ostream &amp;os=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shift</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a22b0bea747760712e7ef51c8b97f7e0b</anchor>
      <arglist>(bool &amp;negative, real_type &amp;x, real_type &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shift</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a1e4104a6e8696c7d0bb7d094b0870370</anchor>
      <arglist>(bool &amp;negative, real_type &amp;x, real_type &amp;y, bc bcx, bc bcy) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a70221bf918027b50f18b082330638149</anchor>
      <arglist>(real_type x, real_type y) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a3e25f67901a0f6b5132bafe6c84274cd</anchor>
      <arglist>(const Vector &amp;x) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~aRealTopology2d</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a2942c101ccfc9643e62d5951720af7b1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealTopology2d</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>ad1edba19469c2ba8937128e143f24eab</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, unsigned n, unsigned Nx, unsigned Ny, bc bcx, bc bcy)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealTopology2d</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>aae3ad2357dd96d1278f044b31e803550</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;gx, const RealGrid1d&lt; real_type &gt; &amp;gy)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealTopology2d</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>aab9314f7577e8252b589232c8c630f72</anchor>
      <arglist>(const aRealTopology2d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aRealTopology2d &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>a5929647fe32f8034a8caae80f9d8153f</anchor>
      <arglist>(const aRealTopology2d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>do_set</name>
      <anchorfile>structdg_1_1a_real_topology2d.html</anchorfile>
      <anchor>add22af03d29abc7ab2e7434250468bf4</anchor>
      <arglist>(unsigned new_n, unsigned new_Nx, unsigned new_Ny)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aRealTopology3d</name>
    <filename>structdg_1_1a_real_topology3d.html</filename>
    <templarg>class real_type</templarg>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a0c4585e957f5dc3d6ee57a5981a1d68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>host_vector</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a517dade03ba22dffe4edf9a09a3f9801</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealGrid3d&lt; real_type &gt;</type>
      <name>host_grid</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a9364d2504c5faa61e93815626b1a7e2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>x0</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a6c70e4d1c5730715427d54b7170336a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>x1</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>aaf516cc24a8de72e250334288d48cf9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>y0</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a035b21891f951cccfcf9afc34b49adad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>y1</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a787e387ec4c0e66cc07c199c73138bc2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>z0</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a91d7b0997339b37e47b512e4e14f3434</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>z1</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>ae0ce32a70342e0cc15a7782ab59b25ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>lx</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a32980a1b03512d76f38e2d44eb6f36f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>ly</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a859bc99616b77dccd32494f2d13d86c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>lz</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>aed9dc18fdcc6bce412d9d03f55305e55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>hx</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a812a79afa47fbb11f66fe30931c620e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>hy</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a73001674ae253981a5e3ed9b0b6bf2b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>hz</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>adba8ff3f6973e8dd66bdc9822642e6eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>n</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a9620c509fb7282ea22a0af0a42882555</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Nx</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a5852a7a95874f021b0ed0bba903a8598</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Ny</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>ab0c4b8b84b2380e447bab5f706188801</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Nz</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>aee018992bc3d3e619b0b97d019313629</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcx</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>ac564a78bea831c9e76a9f9bde0891bdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcy</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>ac0392e6446d2ff859b23cd4673f29c73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcz</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a40a6674b9ea9103d65029eb9d106a78e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DLT&lt; real_type &gt; &amp;</type>
      <name>dlt</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a101d75afbe462f856acc86d44a27002c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a13d7fa0ab0e09b99217e8ac122a8c63b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>af1261d3316d80250f46eb1821a65ce63</anchor>
      <arglist>(std::ostream &amp;os=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shift</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a61026c9b79e31830d4edfebb6346f118</anchor>
      <arglist>(bool &amp;negative, real_type &amp;x, real_type &amp;y, real_type &amp;z) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shift</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>af900c2beb503ed96351a22d35b0deb31</anchor>
      <arglist>(bool &amp;negative, real_type &amp;x, real_type &amp;y, real_type &amp;z, bc bcx, bc bcy, bc bcz) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a7c5dd6db8f2909049cdaa7c1d73bf5de</anchor>
      <arglist>(real_type x, real_type y, real_type z) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a3452c331b42fe75d5b92c10d0046b969</anchor>
      <arglist>(const Vector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyCellNumbers</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a21e05cef6b0347194226aa3dbc3dfb3f</anchor>
      <arglist>(real_type fx, real_type fy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>aa016cb924a13881677207e349bf07774</anchor>
      <arglist>(unsigned new_n, unsigned new_Nx, unsigned new_Ny, unsigned new_Nz)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~aRealTopology3d</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>add5170277cccff65cd3a28bb5b6cfa4b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealTopology3d</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>aa34a2f91dcc179b0754bb582d3fe732e</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type z0, real_type z1, unsigned n, unsigned Nx, unsigned Ny, unsigned Nz, bc bcx, bc bcy, bc bcz)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealTopology3d</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>abae8627102e80cae58bed3e810268d5e</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;gx, const RealGrid1d&lt; real_type &gt; &amp;gy, const RealGrid1d&lt; real_type &gt; &amp;gz)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealTopology3d</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a7ba70a4d0a5e3670fdbd201a94083e73</anchor>
      <arglist>(const aRealTopology3d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aRealTopology3d &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>aa4818f1244f8ae6f7c1c3b611247db68</anchor>
      <arglist>(const aRealTopology3d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>do_set</name>
      <anchorfile>structdg_1_1a_real_topology3d.html</anchorfile>
      <anchor>a070dd952345b72a78425bb3bd78cf280</anchor>
      <arglist>(unsigned new_n, unsigned new_Nx, unsigned new_Ny, unsigned new_Nz)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aRealTopologyX2d</name>
    <filename>structdg_1_1a_real_topology_x2d.html</filename>
    <templarg>class real_type</templarg>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>aef562fc8bcb98def02ef8fa9da41308b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>host_vector</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a0aebb3dfba922fa58ec7a733788ed8ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealGridX2d&lt; real_type &gt;</type>
      <name>host_grid</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a8b7a0d56157f5da402c1e21cc35ecf4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>x0</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a5658a2998afdb9c84acd117a9269a08b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>x1</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a4fb15078fcf3a71d3ad7350126038a01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>y0</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a372167e5ba3dbba48953b13da7dacf97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>y1</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a4753012f300ccf99cade4c377cfcda70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>lx</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a3ea8bc6b7b33321204e800947af7c059</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>ly</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>ab33a94e42227d0000305e5167beca236</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>hx</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a2769851497b7b713f1f43c5a2ddb2ec4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>hy</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>ac06aab5ea481a5d33ca1013aa079bebb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>fx</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a6e9ff7b0b5cc51f6f3fa75f270cbf649</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>fy</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>abf20c8f4ee52ce3c0217a9ecc0c8c698</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>n</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>acb057cf1bdea31802dc4198ea363357a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Nx</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a4895db9d2573531426a2f36f611f3f8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>inner_Nx</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a918365a8a105436a11fa008c2fdb53be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>outer_Nx</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>ad2f3208edb25304809cf72ad3bcc58d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Ny</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a9c51355537bcc2856410cd66ee016754</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>inner_Ny</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>ad9f10286162b99cf560cf6020ea57fdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>outer_Ny</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>abfc1f75e24818b8e5cc0031247baf39a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcx</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a801ffc9fa01452257404ae2b75c48de5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcy</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a3a9ad39369dabec0d1f72efc77f0cb59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealGrid2d&lt; real_type &gt;</type>
      <name>grid</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a44eaff9465bc52c062e95dfb9f6ffab8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DLT&lt; real_type &gt; &amp;</type>
      <name>dlt</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>af4c0b3e14b3fe294629ef376fa7bb525</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a160385b30ca200dd9198ffde3bdf83b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a56a13d7f5d1c2e1fe37ac10d424c488d</anchor>
      <arglist>(std::ostream &amp;os=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shift_topologic</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>ad504bf3c040b4301698a243ab07a52c3</anchor>
      <arglist>(real_type x0, real_type y0, real_type &amp;x1, real_type &amp;y1) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a1b4405bbe719f37f5137bdaff3342cbf</anchor>
      <arglist>(real_type x, real_type y) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~aRealTopologyX2d</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>ae7e1de8dfb21c4c66a9b52bc22d3406a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealTopologyX2d</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a7f557032f5a24ebb3b641dc7d06bcff5</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type fx, real_type fy, unsigned n, unsigned Nx, unsigned Ny, bc bcx, bc bcy)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealTopologyX2d</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>adda955cb2882ad513639f3cafce760b8</anchor>
      <arglist>(const aRealTopologyX2d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aRealTopologyX2d &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_real_topology_x2d.html</anchorfile>
      <anchor>a4868cc4a65bb414f16d753b0ce37009f</anchor>
      <arglist>(const aRealTopologyX2d &amp;src)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::aRealTopologyX3d</name>
    <filename>structdg_1_1a_real_topology_x3d.html</filename>
    <templarg>class real_type</templarg>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>ab7fd8a8d9935415501e12c6d671f659f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>host_vector</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>aae31a792b76cbabfed2f2d29d48b21cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealGridX3d&lt; real_type &gt;</type>
      <name>host_grid</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a30fc0ef64341f498f7a4f6a6f946346e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>x0</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>ab9260010767c1473b627f1b6c4f6b982</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>x1</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>ad2a11190fe31db49c787395c9f70c7b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>y0</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>aa5c29c76fe6b39f1026181a0c19187a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>y1</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a3a8bcaaa41564abbae5fe16d9162ec55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>z0</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a9d6ff9b0842e48d0e81aaa293977a507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>z1</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a44bcafa99f8eb4d79f2d3d1619571aee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>lx</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>afb3cd1026574163fdf025a0085a366af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>ly</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>ad9c2da8893617edb6efb878107420fbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>lz</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a47446c9bb06e046cdfea36a6bf8db51d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>hx</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a51b277150344e942ec5ffa9a0d5652b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>hy</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a73534436c70b762219f1175728f1af81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>hz</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a7b2a051bd875e2ac79372e07018bd193</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>fx</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a5910fa6819b06412ab9379f55a5e6bed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>fy</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>adcb45653b08b27bda935712599e8e5b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>n</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a345d291f9c503814a22a0ced02c7e419</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Nx</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a8303578119addd5ee42e54ca2bde0c96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>inner_Nx</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>ab7785cac926078de3e28a35ee576f9b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>outer_Nx</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>afff7bff66c5cf0e36594b8fd3c8f4005</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Ny</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a7a709fd37a238aa0127a501d2746334a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>inner_Ny</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a723ba5ff53d37ab55540dd911dabbca4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>outer_Ny</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>ac24e893b1414ad7741746a8773353be4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Nz</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a64ca238e7fdbb1145856a36527c324c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcx</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a1d040c0429f7f0bf3e721ec51f5afa3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcy</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a90a7a8edb76c5640be626863c0157c27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcz</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>adff7b858f00a703a2f11d5cd854e438b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealGrid3d&lt; real_type &gt;</type>
      <name>grid</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a2265771299d016eab6c6a43762793eaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DLT&lt; real_type &gt; &amp;</type>
      <name>dlt</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a553a055a920f1ed968d031be878bcb70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a940a6dec97f807ff8e0dde17f1c0d1b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a542e7d993a6e674edd972790136df8f5</anchor>
      <arglist>(std::ostream &amp;os=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>ae801b766e1d5cc637bac93708a7b232b</anchor>
      <arglist>(real_type x, real_type y, real_type z) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~aRealTopologyX3d</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a9c29a0d0b76d5fbd2841411b34ce6b27</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealTopologyX3d</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a525a7beadd4ee8bc7228573d8a2bde0d</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type z0, real_type z1, real_type fx, real_type fy, unsigned n, unsigned Nx, unsigned Ny, unsigned Nz, bc bcx, bc bcy, bc bcz)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aRealTopologyX3d</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>ae94c9b60852d6987e3ab88b69c2aa90c</anchor>
      <arglist>(const aRealTopologyX3d &amp;src)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aRealTopologyX3d &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_real_topology_x3d.html</anchorfile>
      <anchor>a2f0326728bc6520067c3cd0a635f52ee</anchor>
      <arglist>(const aRealTopologyX3d &amp;src)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ARKStep</name>
    <filename>structdg_1_1_a_r_k_step.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_a_r_k_step.html</anchorfile>
      <anchor>a30f9c37b919df9afaea1fb2ba810bc0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_a_r_k_step.html</anchorfile>
      <anchor>a1f3040bed108d5aa235bd1d13ccab74f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ARKStep</name>
      <anchorfile>structdg_1_1_a_r_k_step.html</anchorfile>
      <anchor>a35033bfe32e382cf899808cc87fc4e07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ARKStep</name>
      <anchorfile>structdg_1_1_a_r_k_step.html</anchorfile>
      <anchor>a75136f9d45229ab01b0c84f62ad44cc4</anchor>
      <arglist>(std::string name, const ContainerType &amp;copyable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ARKStep</name>
      <anchorfile>structdg_1_1_a_r_k_step.html</anchorfile>
      <anchor>a50df104db40d511490ece143b789f212</anchor>
      <arglist>(ConvertsToButcherTableau&lt; value_type &gt; ex_tableau, ConvertsToButcherTableau&lt; value_type &gt; im_tableau, const ContainerType &amp;copyable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_a_r_k_step.html</anchorfile>
      <anchor>a68544d14ea6dbd19bf42dbe917ab77ff</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>structdg_1_1_a_r_k_step.html</anchorfile>
      <anchor>a6860dec3c767ccbead99b5cad6617b62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>structdg_1_1_a_r_k_step.html</anchorfile>
      <anchor>a20a30b0859f6e87b9d14f9325c28adde</anchor>
      <arglist>(const std::tuple&lt; Explicit, Implicit, Solver &gt; &amp;ode, value_type t0, const ContainerType &amp;u0, value_type &amp;t1, ContainerType &amp;u1, value_type dt, ContainerType &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>order</name>
      <anchorfile>structdg_1_1_a_r_k_step.html</anchorfile>
      <anchor>a470fe06e18d9ea0f4f09ce067370afe6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>embedded_order</name>
      <anchorfile>structdg_1_1_a_r_k_step.html</anchorfile>
      <anchor>a8da39ac0f6a40804385381875f0cb65c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>num_stages</name>
      <anchorfile>structdg_1_1_a_r_k_step.html</anchorfile>
      <anchor>aea66a330b95370f7d9e726e06a0516fa</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ArrayScalarTag</name>
    <filename>structdg_1_1_array_scalar_tag.html</filename>
    <base>dg::SharedVectorTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::ArrayVectorTag</name>
    <filename>structdg_1_1_array_vector_tag.html</filename>
    <base>dg::RecursiveVectorTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::aTimeloop</name>
    <filename>structdg_1_1a_timeloop.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>dg::get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1a_timeloop.html</anchorfile>
      <anchor>aa97380970aecd889291b393b5a047581</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1a_timeloop.html</anchorfile>
      <anchor>ab9e0954ef0374e7862ec2e63a0681aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>structdg_1_1a_timeloop.html</anchorfile>
      <anchor>a97075599065d0dbdadac0ada83ffc2b4</anchor>
      <arglist>(value_type t0, const ContainerType &amp;u0, value_type t1, ContainerType &amp;u1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate_at_least</name>
      <anchorfile>structdg_1_1a_timeloop.html</anchorfile>
      <anchor>aa62095bebe2bbf536abd7e36496f1bbc</anchor>
      <arglist>(value_type t0, const ContainerType &amp;u0, value_type &amp;t1, ContainerType &amp;u1)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual aTimeloop *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1a_timeloop.html</anchorfile>
      <anchor>a0596bedcad6f76fce5fdbdf8227b3fff</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aTimeloop</name>
      <anchorfile>structdg_1_1a_timeloop.html</anchorfile>
      <anchor>a6e8d819e7f74b65274cb82014baf19bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aTimeloop</name>
      <anchorfile>structdg_1_1a_timeloop.html</anchorfile>
      <anchor>a329650b38aa89ab76a2bafa56ebc5fc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aTimeloop</name>
      <anchorfile>structdg_1_1a_timeloop.html</anchorfile>
      <anchor>a524f4d93bc06e4898b708deb525ad40f</anchor>
      <arglist>(const aTimeloop &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aTimeloop &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1a_timeloop.html</anchorfile>
      <anchor>ae23ccfbb0a5947ac520569e763042e23</anchor>
      <arglist>(const aTimeloop &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Average</name>
    <filename>structdg_1_1_average.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_average.html</anchorfile>
      <anchor>aaa16f1c805c79cb9864688ebdfad6ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Average</name>
      <anchorfile>structdg_1_1_average.html</anchorfile>
      <anchor>a3dfc51f63c7eee2ef491a32add60dd56</anchor>
      <arglist>(const aTopology2d &amp;g, enum coo2d direction, std::string mode=&quot;exact&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Average</name>
      <anchorfile>structdg_1_1_average.html</anchorfile>
      <anchor>ae39a317378b7e52bf6683cd94ca4abda</anchor>
      <arglist>(const aTopology3d &amp;g, enum coo3d direction, std::string mode=&quot;exact&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_average.html</anchorfile>
      <anchor>a183da327d1dc76e85bf3af3659f05469</anchor>
      <arglist>(const ContainerType &amp;src, ContainerType &amp;res, bool extend=true)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Average&lt; MPI_Vector&lt; container &gt; &gt;</name>
    <filename>structdg_1_1_average_3_01_m_p_i___vector_3_01container_01_4_01_4.html</filename>
    <templarg>class container</templarg>
    <member kind="function">
      <type></type>
      <name>Average</name>
      <anchorfile>structdg_1_1_average_3_01_m_p_i___vector_3_01container_01_4_01_4.html</anchorfile>
      <anchor>aae823acb99ff55ac45bd27a9b64ab194</anchor>
      <arglist>(const aMPITopology2d &amp;g, enum coo2d direction, std::string mode=&quot;exact&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Average</name>
      <anchorfile>structdg_1_1_average_3_01_m_p_i___vector_3_01container_01_4_01_4.html</anchorfile>
      <anchor>adb680047f2b39b05665260574833f894</anchor>
      <arglist>(const aMPITopology3d &amp;g, enum coo3d direction, std::string mode=&quot;exact&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_average_3_01_m_p_i___vector_3_01container_01_4_01_4.html</anchorfile>
      <anchor>aa66fa425c449ffb0243a0741a25c6c0b</anchor>
      <arglist>(const MPI_Vector&lt; container &gt; &amp;src, MPI_Vector&lt; container &gt; &amp;res, bool extend=true)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Axpby</name>
    <filename>structdg_1_1_axpby.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>Axpby</name>
      <anchorfile>structdg_1_1_axpby.html</anchorfile>
      <anchor>ab972892c4c9e695aa005fdf097071b7e</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_axpby.html</anchorfile>
      <anchor>a74ad9947a81cf046a9ff2595b762c99f</anchor>
      <arglist>(T x, T &amp;y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Axpbypgz</name>
    <filename>structdg_1_1_axpbypgz.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>Axpbypgz</name>
      <anchorfile>structdg_1_1_axpbypgz.html</anchorfile>
      <anchor>a23d63f06c611152f0ab467cf749e8137</anchor>
      <arglist>(T a, T b, T g)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_axpbypgz.html</anchorfile>
      <anchor>a555fa7367b6503d31b52bdcb99dfc41d</anchor>
      <arglist>(T x, T y, T &amp;z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::AxyPby</name>
    <filename>structdg_1_1_axy_pby.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>AxyPby</name>
      <anchorfile>structdg_1_1_axy_pby.html</anchorfile>
      <anchor>abc58d56d90b9bfbf859ec8fc451b49e8</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_axy_pby.html</anchorfile>
      <anchor>a9a669543fdfdceb8cc711c8fc4d8bb40</anchor>
      <arglist>(T x, T &amp;y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::BathRZ</name>
    <filename>structdg_1_1_bath_r_z.html</filename>
    <member kind="function">
      <type></type>
      <name>BathRZ</name>
      <anchorfile>structdg_1_1_bath_r_z.html</anchorfile>
      <anchor>a82bad049fbb282df69e7f8e596dd07e7</anchor>
      <arglist>(unsigned N_kR, unsigned N_kZ, double R_min, double Z_min, double gamma, double L_E, double amp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_bath_r_z.html</anchorfile>
      <anchor>a7c954690f2256c913663f902312781d2</anchor>
      <arglist>(double R, double Z) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_bath_r_z.html</anchorfile>
      <anchor>a5949df5c0583260eef668b33c8937634</anchor>
      <arglist>(double R, double Z, double phi) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>dg::BICGSTABl</name>
    <filename>classdg_1_1_b_i_c_g_s_t_a_bl.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>classdg_1_1_b_i_c_g_s_t_a_bl.html</anchorfile>
      <anchor>aa24ea9f80f60a00bf90184f44c4d481d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>classdg_1_1_b_i_c_g_s_t_a_bl.html</anchorfile>
      <anchor>a88278b1be230be65d43fe419bc2a5290</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BICGSTABl</name>
      <anchorfile>classdg_1_1_b_i_c_g_s_t_a_bl.html</anchorfile>
      <anchor>aa33dade50bf0a87aed6ac00e31e628cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BICGSTABl</name>
      <anchorfile>classdg_1_1_b_i_c_g_s_t_a_bl.html</anchorfile>
      <anchor>ad441bde61b26e2b1cd8f9419e0eebe89</anchor>
      <arglist>(const ContainerType &amp;copyable, unsigned max_iterations, unsigned l_input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classdg_1_1_b_i_c_g_s_t_a_bl.html</anchorfile>
      <anchor>a80c1d97ebc4638096e19f8a6f70e2737</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max</name>
      <anchorfile>classdg_1_1_b_i_c_g_s_t_a_bl.html</anchorfile>
      <anchor>a204fc913751ef9ef56c8d850f2c00076</anchor>
      <arglist>(unsigned new_max)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_max</name>
      <anchorfile>classdg_1_1_b_i_c_g_s_t_a_bl.html</anchorfile>
      <anchor>a83279d666f03052fec07c506ad962cb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>classdg_1_1_b_i_c_g_s_t_a_bl.html</anchorfile>
      <anchor>a8f270079475e5317d75ba4161076b6fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_verbose</name>
      <anchorfile>classdg_1_1_b_i_c_g_s_t_a_bl.html</anchorfile>
      <anchor>a3e1242a02f5b4a667b512350520fc13e</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_throw_on_fail</name>
      <anchorfile>classdg_1_1_b_i_c_g_s_t_a_bl.html</anchorfile>
      <anchor>a22f351b94f06e82b0ad6b7058fcfa567</anchor>
      <arglist>(bool throw_on_fail)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>solve</name>
      <anchorfile>classdg_1_1_b_i_c_g_s_t_a_bl.html</anchorfile>
      <anchor>ac33eb1be1da724c057de33f9a9f349fc</anchor>
      <arglist>(MatrixType &amp;&amp;A, ContainerType0 &amp;x, const ContainerType1 &amp;b, Preconditioner &amp;&amp;P, const ContainerType2 &amp;W, value_type eps=1e-12, value_type nrmb_correction=1)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::BijectiveComm</name>
    <filename>structdg_1_1_bijective_comm.html</filename>
    <templarg>class Index</templarg>
    <templarg>class Vector</templarg>
    <base>aCommunicator&lt; Vector &gt;</base>
    <member kind="function">
      <type></type>
      <name>BijectiveComm</name>
      <anchorfile>structdg_1_1_bijective_comm.html</anchorfile>
      <anchor>a6ae489e5157a1aae7b07b4871d715ea4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BijectiveComm</name>
      <anchorfile>structdg_1_1_bijective_comm.html</anchorfile>
      <anchor>ac2caf023a7c9fd5c743f6f1d1d7fa04c</anchor>
      <arglist>(const thrust::host_vector&lt; int &gt; &amp;pids, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BijectiveComm</name>
      <anchorfile>structdg_1_1_bijective_comm.html</anchorfile>
      <anchor>ae45309d36d7087af6eec752ec6a8506c</anchor>
      <arglist>(unsigned local_size, thrust::host_vector&lt; int &gt; localGatherMap, thrust::host_vector&lt; int &gt; pidGatherMap, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BijectiveComm</name>
      <anchorfile>structdg_1_1_bijective_comm.html</anchorfile>
      <anchor>a5535fdb5170535612f7efdd89332251a</anchor>
      <arglist>(const thrust::host_vector&lt; int &gt; &amp;globalGatherMap, const ConversionPolicy &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BijectiveComm</name>
      <anchorfile>structdg_1_1_bijective_comm.html</anchorfile>
      <anchor>a6f8f270119b1bd28c43ac178df23f679</anchor>
      <arglist>(const BijectiveComm&lt; OtherIndex, OtherVector &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>const thrust::host_vector&lt; int &gt; &amp;</type>
      <name>get_pids</name>
      <anchorfile>structdg_1_1_bijective_comm.html</anchorfile>
      <anchor>a012aaef1fbac290dedb021dc280376b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BijectiveComm *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_bijective_comm.html</anchorfile>
      <anchor>ae71f27a0610e8a9fee136b283a2d7d2e</anchor>
      <arglist>() const override final</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Buffer</name>
    <filename>structdg_1_1_buffer.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>structdg_1_1_buffer.html</anchorfile>
      <anchor>a93b106d096d72f7f33f21d4bef98f6ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>structdg_1_1_buffer.html</anchorfile>
      <anchor>a0cc9848bc155bebc044924b580e3010f</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>structdg_1_1_buffer.html</anchorfile>
      <anchor>a79b6353e9e9bc00464e119f2bb1fe6ab</anchor>
      <arglist>(const Buffer &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>structdg_1_1_buffer.html</anchorfile>
      <anchor>af158ef3ec9ed17d633eb1f4de8991c21</anchor>
      <arglist>(Buffer &amp;&amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Buffer &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1_buffer.html</anchorfile>
      <anchor>ae64a24a36843557f27f28e23657bcb1f</anchor>
      <arglist>(Buffer src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Buffer</name>
      <anchorfile>structdg_1_1_buffer.html</anchorfile>
      <anchor>a5331276000ae01418b1d2f8de29e5f3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>data</name>
      <anchorfile>structdg_1_1_buffer.html</anchorfile>
      <anchor>a54d758ba20987775035d84e9989268f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>structdg_1_1_buffer.html</anchorfile>
      <anchor>a77b37f821795a58fa87151292d05dc68</anchor>
      <arglist>(Buffer &amp;first, Buffer &amp;second)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ButcherTableau</name>
    <filename>structdg_1_1_butcher_tableau.html</filename>
    <templarg>class real_type</templarg>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_butcher_tableau.html</anchorfile>
      <anchor>af9f9544ca1cf3c9aba9232d94257579d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ButcherTableau</name>
      <anchorfile>structdg_1_1_butcher_tableau.html</anchorfile>
      <anchor>a0a946832a128b637ef521187f18c5fcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ButcherTableau</name>
      <anchorfile>structdg_1_1_butcher_tableau.html</anchorfile>
      <anchor>a6658556818b9057b9a35bd697912064c</anchor>
      <arglist>(unsigned s, unsigned order, const real_type *a, const real_type *b, const real_type *c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ButcherTableau</name>
      <anchorfile>structdg_1_1_butcher_tableau.html</anchorfile>
      <anchor>af0e3d9eb26f1ba560579be09c71bd1fc</anchor>
      <arglist>(unsigned s, unsigned embedded_order, unsigned order, const real_type *a, const real_type *b, const real_type *bt, const real_type *c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ButcherTableau</name>
      <anchorfile>structdg_1_1_butcher_tableau.html</anchorfile>
      <anchor>afbee96f8e8f2b2ccbd9e94c8a8f9d72d</anchor>
      <arglist>(unsigned s, real_type *data)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>a</name>
      <anchorfile>structdg_1_1_butcher_tableau.html</anchorfile>
      <anchor>a6493b23b11f5fc66933320ab2a1b5d3e</anchor>
      <arglist>(unsigned i, unsigned j) const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>c</name>
      <anchorfile>structdg_1_1_butcher_tableau.html</anchorfile>
      <anchor>a08d1ddf8e542ad7867a2fa675aaad26e</anchor>
      <arglist>(unsigned i) const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>b</name>
      <anchorfile>structdg_1_1_butcher_tableau.html</anchorfile>
      <anchor>abc9151ce94f584eee65d4fedecffe9ad</anchor>
      <arglist>(unsigned j) const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>bt</name>
      <anchorfile>structdg_1_1_butcher_tableau.html</anchorfile>
      <anchor>a10b7e1b192ceb514db307af8ce8eec91</anchor>
      <arglist>(unsigned j) const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>d</name>
      <anchorfile>structdg_1_1_butcher_tableau.html</anchorfile>
      <anchor>a7664e83b4ddc79df1f6fec71653a6b84</anchor>
      <arglist>(unsigned j) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>num_stages</name>
      <anchorfile>structdg_1_1_butcher_tableau.html</anchorfile>
      <anchor>acff8887f43f5b6bd9ddb5afd39164115</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>order</name>
      <anchorfile>structdg_1_1_butcher_tableau.html</anchorfile>
      <anchor>a087de9c037155748988d2e9f6e530ba7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>embedded_order</name>
      <anchorfile>structdg_1_1_butcher_tableau.html</anchorfile>
      <anchor>a2dc1c9fab82174dff7c5c879aa3dae32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmbedded</name>
      <anchorfile>structdg_1_1_butcher_tableau.html</anchorfile>
      <anchor>a4a084e63ea537ec672a39269fde978d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isImplicit</name>
      <anchorfile>structdg_1_1_butcher_tableau.html</anchorfile>
      <anchor>ac257734c8e914138c993ce916b934550</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFsal</name>
      <anchorfile>structdg_1_1_butcher_tableau.html</anchorfile>
      <anchor>a29976a04e3e2173c09e6fb2fc45ea593</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Cauchy</name>
    <filename>structdg_1_1_cauchy.html</filename>
    <member kind="function">
      <type></type>
      <name>Cauchy</name>
      <anchorfile>structdg_1_1_cauchy.html</anchorfile>
      <anchor>a508cb8140a3505aeeac4af782e779d50</anchor>
      <arglist>(double x0, double y0, double sigma_x, double sigma_y, double amp)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_cauchy.html</anchorfile>
      <anchor>a8a34afc1cc6167fb1fc3164dc1265f28</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inside</name>
      <anchorfile>structdg_1_1_cauchy.html</anchorfile>
      <anchor>ab4cb7084297243f723ba1546bd46d9ab</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dx</name>
      <anchorfile>structdg_1_1_cauchy.html</anchorfile>
      <anchor>a777acb08fa70c40d07c8d53e1cf62f0b</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dxx</name>
      <anchorfile>structdg_1_1_cauchy.html</anchorfile>
      <anchor>a4964182d6fa83ab8ac002ba2fef86cce</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dy</name>
      <anchorfile>structdg_1_1_cauchy.html</anchorfile>
      <anchor>a92c34f895105f06df2e1a224a0c0a50f</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dyy</name>
      <anchorfile>structdg_1_1_cauchy.html</anchorfile>
      <anchor>aa4d74d63c993c81dd19c7e76e84e2861</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dxy</name>
      <anchorfile>structdg_1_1_cauchy.html</anchorfile>
      <anchor>a6ee1259a0917194949baea73ce5b0862</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>dg::ChebyshevIteration</name>
    <filename>classdg_1_1_chebyshev_iteration.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>classdg_1_1_chebyshev_iteration.html</anchorfile>
      <anchor>a68874251472181ddd45de6fe606e6ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>classdg_1_1_chebyshev_iteration.html</anchorfile>
      <anchor>a107d7421531c1d6e2a34bef7c2a9b047</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChebyshevIteration</name>
      <anchorfile>classdg_1_1_chebyshev_iteration.html</anchorfile>
      <anchor>a88bd4f8c09726e918b67fa2cc34d6ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChebyshevIteration</name>
      <anchorfile>classdg_1_1_chebyshev_iteration.html</anchorfile>
      <anchor>a3f63ba1c02ccbe5ebbd4272060ff6a59</anchor>
      <arglist>(const ContainerType &amp;copyable)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>classdg_1_1_chebyshev_iteration.html</anchorfile>
      <anchor>a21fee5bfcdec59e513a3bdcc5091b79a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classdg_1_1_chebyshev_iteration.html</anchorfile>
      <anchor>ab5243b6ca2c31a7abcc16d666cf0c4b2</anchor>
      <arglist>(const ContainerType &amp;copyable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classdg_1_1_chebyshev_iteration.html</anchorfile>
      <anchor>afba9d745ad1b02c486316615804e706f</anchor>
      <arglist>(MatrixType &amp;&amp;A, ContainerType0 &amp;x, const ContainerType1 &amp;b, value_type min_ev, value_type max_ev, unsigned num_iter, bool x_is_zero=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classdg_1_1_chebyshev_iteration.html</anchorfile>
      <anchor>a3cf30de1a1e660a15c3548f401a374f5</anchor>
      <arglist>(MatrixType &amp;&amp;A, ContainerType0 &amp;x, const ContainerType1 &amp;b, Preconditioner &amp;&amp;P, value_type min_ev, value_type max_ev, unsigned num_iter, bool x_is_zero=false)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ChebyshevPreconditioner</name>
    <filename>structdg_1_1_chebyshev_preconditioner.html</filename>
    <templarg>class Matrix</templarg>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_chebyshev_preconditioner.html</anchorfile>
      <anchor>a363ae901c7f7d252a52eedc46b4b75ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_chebyshev_preconditioner.html</anchorfile>
      <anchor>ab4b63f0c63c0219776a149b4d7bece80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChebyshevPreconditioner</name>
      <anchorfile>structdg_1_1_chebyshev_preconditioner.html</anchorfile>
      <anchor>a2876af2648c2cc6b46dfa377bcf1e41a</anchor>
      <arglist>(Matrix op, const ContainerType &amp;copyable, value_type ev_min, value_type ev_max, unsigned degree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_chebyshev_preconditioner.html</anchorfile>
      <anchor>a95606c350f27c0916082fd45eefde8ca</anchor>
      <arglist>(const ContainerType0 &amp;x, ContainerType1 &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ClonePtr</name>
    <filename>structdg_1_1_clone_ptr.html</filename>
    <templarg>class Cloneable</templarg>
    <member kind="function">
      <type></type>
      <name>ClonePtr</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>aa6de7af4345b06324f9ca10a51113dc9</anchor>
      <arglist>(std::nullptr_t value=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClonePtr</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>a7582bd3046738e9ff31cd031202c0b9c</anchor>
      <arglist>(Cloneable *ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClonePtr</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>a4a1be837576f926286fe1229b6d1dd55</anchor>
      <arglist>(const Cloneable &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClonePtr</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>a6ab47f68876879be9ca7b81ab45d1a29</anchor>
      <arglist>(const ClonePtr &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ClonePtr &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>aa7d33b051497a6af46ce363b71396a43</anchor>
      <arglist>(const ClonePtr &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClonePtr</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>a6f507a7982ef3a7bc1f27168b20c0fae</anchor>
      <arglist>(ClonePtr &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ClonePtr &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>aea40f82c7223ea38d1629593fb9630a3</anchor>
      <arglist>(ClonePtr &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>a6251ff7dfd833d7598758442c1ad5207</anchor>
      <arglist>(Cloneable *ptr)</arglist>
    </member>
    <member kind="function">
      <type>Cloneable *</type>
      <name>release</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>af6f69982f43777bea7876ec10b89bcb7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>a0978344d3418c901635efb0a1c5dacc8</anchor>
      <arglist>(const Cloneable &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Cloneable *</type>
      <name>get</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>a0c8e5ab50e8d1480c10c8bffcdb389c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Cloneable *</type>
      <name>get</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>a6de2472e0a847cb4d3aaa0c4f8df451f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cloneable &amp;</type>
      <name>operator*</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>a839fa239b05322b120cf209191151bb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Cloneable &amp;</type>
      <name>operator*</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>aae871724d27bca4b7d567e3aeff7cb43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cloneable *</type>
      <name>operator-&gt;</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>a0260315cf28657504c5eef9403616123</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Cloneable *</type>
      <name>operator-&gt;</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>a87563442fe85fe95a5b09a41a0819eb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>a50eeda908332d60253ba37b50e193f01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>structdg_1_1_clone_ptr.html</anchorfile>
      <anchor>a3e0596ce856d7b34ded6edffc029160a</anchor>
      <arglist>(ClonePtr &amp;first, ClonePtr &amp;second)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Composite</name>
    <filename>structdg_1_1_composite.html</filename>
    <templarg>class Matrix</templarg>
    <member kind="function">
      <type></type>
      <name>Composite</name>
      <anchorfile>structdg_1_1_composite.html</anchorfile>
      <anchor>a78b26367b95619d5929ab84009cd00df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Composite</name>
      <anchorfile>structdg_1_1_composite.html</anchorfile>
      <anchor>a6577805343b147cde57429aa6a31b045</anchor>
      <arglist>(const Composite&lt; Matrix2 &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Composite</name>
      <anchorfile>structdg_1_1_composite.html</anchorfile>
      <anchor>af913961fbb4b1cd76b473da03a273021</anchor>
      <arglist>(const Matrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Composite</name>
      <anchorfile>structdg_1_1_composite.html</anchorfile>
      <anchor>a5f0439e353e3571a36e2311420a6b8ef</anchor>
      <arglist>(const Matrix &amp;m1, const Matrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>Composite &amp;</type>
      <name>operator=</name>
      <anchorfile>structdg_1_1_composite.html</anchorfile>
      <anchor>a09476504ee4f45ddc54c25d8de5f0994</anchor>
      <arglist>(const Composite&lt; Matrix2 &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_composite.html</anchorfile>
      <anchor>a7b4ea7e97c476d4f937ee8f84cd6138a</anchor>
      <arglist>(const ContainerType1 &amp;v1, ContainerType2 &amp;v2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_composite.html</anchorfile>
      <anchor>a3320f1dca365d8443451860d25c6d135</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType &amp;v1, get_value_type&lt; ContainerType &gt; beta, ContainerType &amp;v2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>structdg_1_1_composite.html</anchorfile>
      <anchor>ab92cef333eed43a46bce0f25d1850ec7</anchor>
      <arglist>(std::ostream &amp;os=std::cout) const</arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>m1</name>
      <anchorfile>structdg_1_1_composite.html</anchorfile>
      <anchor>a3fa35db6b3c0a2a6963c34752ebbc6f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>m2</name>
      <anchorfile>structdg_1_1_composite.html</anchorfile>
      <anchor>a80a6e0600198a5ce4763b66feadf0b5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>dual</name>
      <anchorfile>structdg_1_1_composite.html</anchorfile>
      <anchor>a1cfcdd5b64963bc19a5fe8b5f194b964</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::CONSTANT</name>
    <filename>structdg_1_1_c_o_n_s_t_a_n_t.html</filename>
    <member kind="function">
      <type></type>
      <name>CONSTANT</name>
      <anchorfile>structdg_1_1_c_o_n_s_t_a_n_t.html</anchorfile>
      <anchor>ae8096ed918793f4de9c56cb7d39baa98</anchor>
      <arglist>(double cte)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_c_o_n_s_t_a_n_t.html</anchorfile>
      <anchor>a2f1c8c3d3f4f83d8c3d9c1b6958f6c4b</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_c_o_n_s_t_a_n_t.html</anchorfile>
      <anchor>a0460bbc303c9117d4a6d33a9b7e1b90f</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_c_o_n_s_t_a_n_t.html</anchorfile>
      <anchor>a1be7f48c7baca05c8ee0c5fc3b28ba61</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ConvertsToButcherTableau</name>
    <filename>structdg_1_1_converts_to_butcher_tableau.html</filename>
    <templarg>class real_type</templarg>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_converts_to_butcher_tableau.html</anchorfile>
      <anchor>a10685693db4f8121556330c415266f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertsToButcherTableau</name>
      <anchorfile>structdg_1_1_converts_to_butcher_tableau.html</anchorfile>
      <anchor>a125b2ff2654e7d2b351e79446e9c3928</anchor>
      <arglist>(ButcherTableau&lt; real_type &gt; tableau)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertsToButcherTableau</name>
      <anchorfile>structdg_1_1_converts_to_butcher_tableau.html</anchorfile>
      <anchor>a0abaafc6b0662993e1bcae89203a384b</anchor>
      <arglist>(enum tableau_identifier id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertsToButcherTableau</name>
      <anchorfile>structdg_1_1_converts_to_butcher_tableau.html</anchorfile>
      <anchor>a9b45685b346a1828e3794e232df6b802</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertsToButcherTableau</name>
      <anchorfile>structdg_1_1_converts_to_butcher_tableau.html</anchorfile>
      <anchor>afb039e3771b0fe7fd4a75af5e93323df</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ButcherTableau&lt; real_type &gt;</name>
      <anchorfile>structdg_1_1_converts_to_butcher_tableau.html</anchorfile>
      <anchor>a7b46a00d42dd1d177daf2491fc583786</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ConvertsToMultistepTableau</name>
    <filename>structdg_1_1_converts_to_multistep_tableau.html</filename>
    <templarg>class real_type</templarg>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_converts_to_multistep_tableau.html</anchorfile>
      <anchor>ad46ae2fb2bf158234219c8771367d5f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertsToMultistepTableau</name>
      <anchorfile>structdg_1_1_converts_to_multistep_tableau.html</anchorfile>
      <anchor>ae2d65507dd696c6e54b320a10e9118a0</anchor>
      <arglist>(MultistepTableau&lt; real_type &gt; tableau)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertsToMultistepTableau</name>
      <anchorfile>structdg_1_1_converts_to_multistep_tableau.html</anchorfile>
      <anchor>a5d3be7020e4dd4b1c73c804dc2755ef1</anchor>
      <arglist>(enum tableau_identifier id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertsToMultistepTableau</name>
      <anchorfile>structdg_1_1_converts_to_multistep_tableau.html</anchorfile>
      <anchor>a656e48ee1e17da7ae4b3258e2964c3e6</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertsToMultistepTableau</name>
      <anchorfile>structdg_1_1_converts_to_multistep_tableau.html</anchorfile>
      <anchor>adb7ec0d2d96dca93366204e42172b5f9</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator MultistepTableau&lt; real_type &gt;</name>
      <anchorfile>structdg_1_1_converts_to_multistep_tableau.html</anchorfile>
      <anchor>a5d3fd889f3f7904d7a4f3ada27479a68</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ConvertsToShuOsherTableau</name>
    <filename>structdg_1_1_converts_to_shu_osher_tableau.html</filename>
    <templarg>class real_type</templarg>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_converts_to_shu_osher_tableau.html</anchorfile>
      <anchor>a3102c2eca94c20635db8014d9cb6b31c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertsToShuOsherTableau</name>
      <anchorfile>structdg_1_1_converts_to_shu_osher_tableau.html</anchorfile>
      <anchor>a9704d1be83a4cb06dc53e3bdeaf47a5e</anchor>
      <arglist>(ShuOsherTableau&lt; real_type &gt; tableau)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertsToShuOsherTableau</name>
      <anchorfile>structdg_1_1_converts_to_shu_osher_tableau.html</anchorfile>
      <anchor>a8c1016056e00264c775120161723f737</anchor>
      <arglist>(enum tableau_identifier id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertsToShuOsherTableau</name>
      <anchorfile>structdg_1_1_converts_to_shu_osher_tableau.html</anchorfile>
      <anchor>a23aea656d1dfc75044163e45099a4a43</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertsToShuOsherTableau</name>
      <anchorfile>structdg_1_1_converts_to_shu_osher_tableau.html</anchorfile>
      <anchor>af2fb20cfc62fe90eac429c6a95159d0f</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ShuOsherTableau&lt; real_type &gt;</name>
      <anchorfile>structdg_1_1_converts_to_shu_osher_tableau.html</anchorfile>
      <anchor>ab804d58d60318e3b00783ef7237db679</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::CooSparseBlockMat</name>
    <filename>structdg_1_1_coo_sparse_block_mat.html</filename>
    <templarg>class value_type</templarg>
    <member kind="function">
      <type></type>
      <name>CooSparseBlockMat</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>adb3d7d1d91b63aa3ce3cba8cf9aca306</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CooSparseBlockMat</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>acce1f37c294317037956daa3bdf8b089</anchor>
      <arglist>(int num_block_rows, int num_block_cols, int n, int left_size, int right_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_value</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>aa573b0725f3c77c5037c42f01ab18d8a</anchor>
      <arglist>(int row, int col, const thrust::host_vector&lt; value_type &gt; &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>total_num_rows</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>ab547f80e7381e6780fa7961159830a8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>total_num_cols</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>a0c405af0b529010f56f034423fc512ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>a91cdd748508dd4729f7a545653107705</anchor>
      <arglist>(SharedVectorTag, SerialTag, value_type alpha, const value_type **x, value_type beta, value_type *RESTRICT y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>a27227d871e3d2da4b11eea8e40db2cda</anchor>
      <arglist>(std::ostream &amp;os=std::cout, bool show_data=false) const</arglist>
    </member>
    <member kind="variable">
      <type>thrust::host_vector&lt; value_type &gt;</type>
      <name>data</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>a270f8fb63a914c19b7053beeb03b7432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>thrust::host_vector&lt; int &gt;</type>
      <name>cols_idx</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>ae692b6fd313470e6c4cd849a069ba3d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>thrust::host_vector&lt; int &gt;</type>
      <name>rows_idx</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>a47f1fd7b3572f09aabe5dc9269a6dbe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>thrust::host_vector&lt; int &gt;</type>
      <name>data_idx</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>a13ade6a19e96a10d9aa55220a92365f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_rows</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>a037e28160d038c6c3d190d533553b1f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_cols</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>abb69f47621c8e59bf74f5008b02a3728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_entries</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>af67dc52548a78dd6a9b4b9dc17497240</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>a6b253047ab5281181c67c9a7e073cf26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>left_size</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>a5879228f786f6a22e351e26edd00423b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>right_size</name>
      <anchorfile>structdg_1_1_coo_sparse_block_mat.html</anchorfile>
      <anchor>af2e04cf5f744a5a2284b57d50c849545</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::CosXCosY</name>
    <filename>structdg_1_1_cos_x_cos_y.html</filename>
    <member kind="function">
      <type></type>
      <name>CosXCosY</name>
      <anchorfile>structdg_1_1_cos_x_cos_y.html</anchorfile>
      <anchor>a4c785a3e0a75ad1e0b543fec7479a631</anchor>
      <arglist>(double amp, double bamp, double kx, double ky)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_cos_x_cos_y.html</anchorfile>
      <anchor>a7467eab4c9867948b447d544766b5752</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::CosY</name>
    <filename>structdg_1_1_cos_y.html</filename>
    <member kind="function">
      <type></type>
      <name>CosY</name>
      <anchorfile>structdg_1_1_cos_y.html</anchorfile>
      <anchor>ac2a9102a2a1f90b56be768b1323bd8c3</anchor>
      <arglist>(double amp, double bamp, double ky)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_cos_y.html</anchorfile>
      <anchor>a2804431f969b2f3e3af2820e0ea210c3</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::CudaTag</name>
    <filename>structdg_1_1_cuda_tag.html</filename>
    <base>dg::AnyPolicyTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::CuspMatrixTag</name>
    <filename>structdg_1_1_cusp_matrix_tag.html</filename>
    <base>dg::AnyMatrixTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::CuspVectorTag</name>
    <filename>structdg_1_1_cusp_vector_tag.html</filename>
    <base>dg::ThrustVectorTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::DefaultSolver</name>
    <filename>structdg_1_1_default_solver.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_default_solver.html</anchorfile>
      <anchor>a198cee7128b283b9d1e270e8a36cf17e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_default_solver.html</anchorfile>
      <anchor>a97f8cab8aaa354a9f44baf19b33aefe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefaultSolver</name>
      <anchorfile>structdg_1_1_default_solver.html</anchorfile>
      <anchor>a15c83d4783bf23ab4aeed88cc6b6fe0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefaultSolver</name>
      <anchorfile>structdg_1_1_default_solver.html</anchorfile>
      <anchor>a6904af29802092b896f3a8efde1070a3</anchor>
      <arglist>(const ContainerType &amp;copyable, unsigned max_iter, value_type eps)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>structdg_1_1_default_solver.html</anchorfile>
      <anchor>aabc25400d2fd462b1defca4ef18d5c0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_benchmark</name>
      <anchorfile>structdg_1_1_default_solver.html</anchorfile>
      <anchor>a5d3b23de56430da9ff00104e241c664f</anchor>
      <arglist>(bool benchmark)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>structdg_1_1_default_solver.html</anchorfile>
      <anchor>aeb8369d9d48de04b604acd636d1890f3</anchor>
      <arglist>(value_type alpha, Implicit &amp;im, value_type time, ContainerType &amp;y, const ContainerType &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::DenseMatrixTag</name>
    <filename>structdg_1_1_dense_matrix_tag.html</filename>
    <base>dg::AnyMatrixTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::DIRKStep</name>
    <filename>structdg_1_1_d_i_r_k_step.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_d_i_r_k_step.html</anchorfile>
      <anchor>a3e7d027675d7a9d029b92fa9a7461e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_d_i_r_k_step.html</anchorfile>
      <anchor>a80e55c4382bb70c78fd042994a85f832</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DIRKStep</name>
      <anchorfile>structdg_1_1_d_i_r_k_step.html</anchorfile>
      <anchor>ab5d2f21df20d7ac19f106290cf38107d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DIRKStep</name>
      <anchorfile>structdg_1_1_d_i_r_k_step.html</anchorfile>
      <anchor>a180b711817ba6832c2f8a2a211542837</anchor>
      <arglist>(ConvertsToButcherTableau&lt; value_type &gt; im_tableau, const ContainerType &amp;copyable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_d_i_r_k_step.html</anchorfile>
      <anchor>ae12636b7a27472b46e91cfbd924e4461</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>structdg_1_1_d_i_r_k_step.html</anchorfile>
      <anchor>aeb381e28242f535ab405495a686e2c8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>structdg_1_1_d_i_r_k_step.html</anchorfile>
      <anchor>a173f1b663fdec539d2515d6dd1eebb62</anchor>
      <arglist>(const std::tuple&lt; RHS, Solver &gt; &amp;ode, value_type t0, const ContainerType &amp;u0, value_type &amp;t1, ContainerType &amp;u1, value_type dt, ContainerType &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>structdg_1_1_d_i_r_k_step.html</anchorfile>
      <anchor>a8ca52cb86bb29f1c1b672669077a728a</anchor>
      <arglist>(const std::tuple&lt; RHS, Solver &gt; &amp;ode, value_type t0, const ContainerType &amp;u0, value_type &amp;t1, ContainerType &amp;u1, value_type dt)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>order</name>
      <anchorfile>structdg_1_1_d_i_r_k_step.html</anchorfile>
      <anchor>a1ed6fb8955665c362ce0906fd5d444c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>embedded_order</name>
      <anchorfile>structdg_1_1_d_i_r_k_step.html</anchorfile>
      <anchor>a6fc92a828f9ae56ff477939ad9fe4f43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>num_stages</name>
      <anchorfile>structdg_1_1_d_i_r_k_step.html</anchorfile>
      <anchor>ae56d9ab827e19eef1d45b3ddb9c66489</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Distance</name>
    <filename>structdg_1_1_distance.html</filename>
    <member kind="function">
      <type></type>
      <name>Distance</name>
      <anchorfile>structdg_1_1_distance.html</anchorfile>
      <anchor>a1ac8a105f6249ef980eef7a0e970ad35</anchor>
      <arglist>(double x0, double y0)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_distance.html</anchorfile>
      <anchor>a80e37b2d4f125d1021cb8330fcb204c3</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::divides</name>
    <filename>structdg_1_1divides.html</filename>
    <member kind="function">
      <type>DG_DEVICE T1</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1divides.html</anchorfile>
      <anchor>ad574e67da0a20c2f411ec3c3029d6b48</anchor>
      <arglist>(T1 x1, T2 x2) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::divides_equals</name>
    <filename>structdg_1_1divides__equals.html</filename>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1divides__equals.html</anchorfile>
      <anchor>a443fe8fe0bd1c0892d51f62a0ba187f1</anchor>
      <arglist>(T1 x, T2 &amp;y) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>dg::DLT</name>
    <filename>classdg_1_1_d_l_t.html</filename>
    <templarg>class real_type</templarg>
    <member kind="function">
      <type></type>
      <name>DLT</name>
      <anchorfile>classdg_1_1_d_l_t.html</anchorfile>
      <anchor>a74be649cb8956964b423c954b6b6da18</anchor>
      <arglist>(unsigned n=3)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; real_type &gt; &amp;</type>
      <name>weights</name>
      <anchorfile>classdg_1_1_d_l_t.html</anchorfile>
      <anchor>a12270c1c92b82dad4685a0bb65ffe3bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; real_type &gt; &amp;</type>
      <name>abscissas</name>
      <anchorfile>classdg_1_1_d_l_t.html</anchorfile>
      <anchor>aa16e22c81d0a7f042f3195d49e114d11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; real_type &gt; &amp;</type>
      <name>forward</name>
      <anchorfile>classdg_1_1_d_l_t.html</anchorfile>
      <anchor>a53502d30798073dec6583ec4362bbd4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; real_type &gt; &amp;</type>
      <name>backward</name>
      <anchorfile>classdg_1_1_d_l_t.html</anchorfile>
      <anchor>a4504be8b66d2488f8679afc01eaa8386</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; real_type &gt; &amp;</type>
      <name>backwardEQ</name>
      <anchorfile>classdg_1_1_d_l_t.html</anchorfile>
      <anchor>a4cc1ed466635b138ef5bf95a975026a5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::DPolynomialHeaviside</name>
    <filename>structdg_1_1_d_polynomial_heaviside.html</filename>
    <member kind="function">
      <type></type>
      <name>DPolynomialHeaviside</name>
      <anchorfile>structdg_1_1_d_polynomial_heaviside.html</anchorfile>
      <anchor>af06e118873bf4c6f773471068de53aa4</anchor>
      <arglist>(double xb, double a, int sign=+1)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_d_polynomial_heaviside.html</anchorfile>
      <anchor>a36e78a8810bfb543fcc5b378ce0efead</anchor>
      <arglist>(double x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>dg::Elliptic</name>
    <filename>classdg_1_1_elliptic.html</filename>
    <templarg>class Geometry</templarg>
    <templarg>class Matrix</templarg>
    <templarg>class Container</templarg>
    <member kind="typedef">
      <type>Geometry</type>
      <name>geometry_type</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a3f46a595035cc2ea721a290f69162211</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>matrix_type</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a0339f2b9e7292666814bff7ed79ae9a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container</type>
      <name>container_type</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a150f6366e58f3a46bea317f5ff3569eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; Container &gt;</type>
      <name>value_type</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a23f4bd07d427976a974c53ce43c6d806</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Elliptic</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a3ec2942bd9e5412ed1a83749931d87f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Elliptic</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a9ee7578db98edb531ac53bddc134345d</anchor>
      <arglist>(const Geometry &amp;g, direction dir=forward, value_type jfactor=1., bool chi_weight_jump=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Elliptic</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a84abbeb6936d7200f69352232b18c913</anchor>
      <arglist>(const Geometry &amp;g, bc bcx, bc bcy, direction dir=forward, value_type jfactor=1., bool chi_weight_jump=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a8db8b3caeb3194d6fb456d6b029a8225</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_chi</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a05c4848e84b2aafb86ccf0bbc3c3600f</anchor>
      <arglist>(const ContainerType0 &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_chi</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a84b7ca0bd9110009952160fdfeb21383</anchor>
      <arglist>(const SparseTensor&lt; ContainerType0 &gt; &amp;tau)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>weights</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>afab96b32a4c9366143b3c91b2150815a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>precond</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>ac9d8994a5e31211b2da0f705caebc316</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_jfactor</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>ac8844d322803a20414252c726b2f3a5a</anchor>
      <arglist>(value_type new_jfactor)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>get_jfactor</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a6cf2f8b0517fb474d5c66daa55f1fa1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_jump_weighting</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>ad18bcbe34656420ee8d7b28cba7b46fb</anchor>
      <arglist>(bool jump_weighting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_jump_weighting</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a9e2f77d2083107c369127c66e9199ecd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a8fac01ba417f36c531b472b9fbf2903d</anchor>
      <arglist>(const ContainerType0 &amp;x, ContainerType1 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a032d42981006ff75891088a44fc9f7c0</anchor>
      <arglist>(const ContainerType0 &amp;x, ContainerType1 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a625a186d3da8a48bf61f5635fdc22475</anchor>
      <arglist>(value_type alpha, const ContainerType0 &amp;x, value_type beta, ContainerType1 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>variation</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a64475765b0c4bc4c8303c45a281b9551</anchor>
      <arglist>(const ContainerType0 &amp;phi, ContainerType1 &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>variation</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>a77ffea0cbb08a74c552609729af79093</anchor>
      <arglist>(const ContainerTypeL &amp;lambda, const ContainerType0 &amp;phi, ContainerType1 &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>variation</name>
      <anchorfile>classdg_1_1_elliptic.html</anchorfile>
      <anchor>aa5cde6906d509e11ed697f5b1f117c96</anchor>
      <arglist>(value_type alpha, const ContainerTypeL &amp;lambda, const ContainerType0 &amp;phi, value_type beta, ContainerType1 &amp;sigma)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>dg::Elliptic3d</name>
    <filename>classdg_1_1_elliptic3d.html</filename>
    <templarg>class Geometry</templarg>
    <templarg>class Matrix</templarg>
    <templarg>class Container</templarg>
    <member kind="typedef">
      <type>Geometry</type>
      <name>geometry_type</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>aebe3ab313fd2b27ca536cf8723382266</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>matrix_type</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>ad8563bd3d8e35bae6160b43d1e815a0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container</type>
      <name>container_type</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>ad305e7aefbb046b779873f91cf407993</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; Container &gt;</type>
      <name>value_type</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>a6f4af0cfb52029ba09b10b9f1495fbfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Elliptic3d</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>a1350057b05f30ea91bd3c9a4468faa13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Elliptic3d</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>aafcf137cdf82e810bb8281b0be0d00fa</anchor>
      <arglist>(const Geometry &amp;g, direction dir=forward, value_type jfactor=1., bool chi_weight_jump=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Elliptic3d</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>a84dc89ca51e9f8ddf9d6364200ffe4b3</anchor>
      <arglist>(const Geometry &amp;g, bc bcx, bc bcy, bc bcz, direction dir=forward, value_type jfactor=1., bool chi_weight_jump=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>a6d57c72f58e09b36ecbc692f4926abf4</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_chi</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>a9481bbc52af9510ef09971e45cba4a97</anchor>
      <arglist>(const ContainerType0 &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_chi</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>a6277136adab056add915118a8930f632</anchor>
      <arglist>(const SparseTensor&lt; ContainerType0 &gt; &amp;tau)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>weights</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>a81ac44388afeaab451486de2dcf22264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>precond</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>a337065ca98e764a146828460aa72a17c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_jfactor</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>a79a537157376cf0ddcd689de66c41b67</anchor>
      <arglist>(value_type new_jfactor)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>get_jfactor</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>a793805c6e0d1f18e796123ec7772f039</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_jump_weighting</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>ab8dff2c3619dad9f67545cd48e6dd127</anchor>
      <arglist>(bool jump_weighting)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_jump_weighting</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>aef126bcd9edbf6b87c99bcae9a3af8b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_compute_in_2d</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>a8d3c57872259b3c8723baa1692bf3aab</anchor>
      <arglist>(bool compute_in_2d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>ab39da51776c46b4d928cc5456d9c0d73</anchor>
      <arglist>(const ContainerType0 &amp;x, ContainerType1 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>a36aac0ecf0e650cd199a7a149cb7102d</anchor>
      <arglist>(value_type alpha, const ContainerType0 &amp;x, value_type beta, ContainerType1 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>variation</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>a5e802ddf7a20fcb63929093334876248</anchor>
      <arglist>(const ContainerType0 &amp;phi, ContainerType1 &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>variation</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>a19fd97575b289947ddb5003c8ecc368d</anchor>
      <arglist>(const ContainerTypeL &amp;lambda, const ContainerType0 &amp;phi, ContainerType1 &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>variation</name>
      <anchorfile>classdg_1_1_elliptic3d.html</anchorfile>
      <anchor>a667cb085f8746695a2f06c7f5a22f197</anchor>
      <arglist>(value_type alpha, const ContainerTypeL &amp;lambda, const ContainerType0 &amp;phi, value_type beta, ContainerType1 &amp;sigma)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::EllSparseBlockMat</name>
    <filename>structdg_1_1_ell_sparse_block_mat.html</filename>
    <templarg>class value_type</templarg>
    <member kind="function">
      <type></type>
      <name>EllSparseBlockMat</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>a2f34bd346e2cdf9bb2e888f1405076c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EllSparseBlockMat</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>a5c45f67973ed4df1bc4978e95c143904</anchor>
      <arglist>(int num_block_rows, int num_block_cols, int num_blocks_per_line, int num_different_blocks, int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>total_num_rows</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>a5f3c8429c35f2fc053c2eaa5996b0d2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>total_num_cols</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>a1a09d178e6e56fb8aeb6c9d94cc7fe20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>a97d474ec82b0fbfcbdd24eabdd583b72</anchor>
      <arglist>(SharedVectorTag, SerialTag, value_type alpha, const value_type *RESTRICT x, value_type beta, value_type *RESTRICT y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_default_range</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>a3485d3aaa6724812ebd123cafc1fd91d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>a0122c409ace2cc310a7982513f60862f</anchor>
      <arglist>(std::ostream &amp;os=std::cout, bool show_data=false) const</arglist>
    </member>
    <member kind="variable">
      <type>thrust::host_vector&lt; value_type &gt;</type>
      <name>data</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>a56beeefe5a17057cfa7895f3ad532a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>thrust::host_vector&lt; int &gt;</type>
      <name>cols_idx</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>a9cae2f1171d04d37513a7d1685604dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>thrust::host_vector&lt; int &gt;</type>
      <name>data_idx</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>a2fb3ddccae442119174aba175b37ffd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>thrust::host_vector&lt; int &gt;</type>
      <name>right_range</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>aad68d6b276dba3d835c812de1590f198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_rows</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>a4bf43725ff2db10da6ddda7508ff7b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_cols</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>a97dc6569dd4fcc1af9847b8c8fb9f287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>blocks_per_line</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>a49d70e8ce88ac45a7db26c1375550834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>aa29bbb8bca4155841dbb603362dcdfe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>left_size</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>a794a041e52b3e4fd6297d0dec8f3fc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>right_size</name>
      <anchorfile>structdg_1_1_ell_sparse_block_mat.html</anchorfile>
      <anchor>abce816133c166271872359eb96a9b897</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::EmbeddedPairSum</name>
    <filename>structdg_1_1_embedded_pair_sum.html</filename>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_embedded_pair_sum.html</anchorfile>
      <anchor>a078f5c8cad60ab3f16e673eaa1cc0bda</anchor>
      <arglist>(T1 &amp;y, T1 &amp;yt, T1 b, T1 bt, Ts... rest) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::EntireDomain</name>
    <filename>structdg_1_1_entire_domain.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>structdg_1_1_entire_domain.html</anchorfile>
      <anchor>a721701f0d465c857439a7902a12d3d2d</anchor>
      <arglist>(T &amp;t) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::equals</name>
    <filename>structdg_1_1equals.html</filename>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1equals.html</anchorfile>
      <anchor>ab7489bff3cecae4a3246b9a88a46cc34</anchor>
      <arglist>(T1 x, T2 &amp;y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ERKStep</name>
    <filename>structdg_1_1_e_r_k_step.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_e_r_k_step.html</anchorfile>
      <anchor>a72f873f92577fade064373856bcc37b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_e_r_k_step.html</anchorfile>
      <anchor>a3e470750eeab8a05d089bae909582427</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ERKStep</name>
      <anchorfile>structdg_1_1_e_r_k_step.html</anchorfile>
      <anchor>ae8021476cb62fa4f17a0d9567222a059</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ERKStep</name>
      <anchorfile>structdg_1_1_e_r_k_step.html</anchorfile>
      <anchor>a577ee50e3c13acf8a4c11bba8de92261</anchor>
      <arglist>(ConvertsToButcherTableau&lt; value_type &gt; tableau, const ContainerType &amp;copyable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_e_r_k_step.html</anchorfile>
      <anchor>a479874310b6b0a5e9d54cec3533cca10</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>structdg_1_1_e_r_k_step.html</anchorfile>
      <anchor>a26a389d8d7855dbe35af3b665c17f9e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignore_fsal</name>
      <anchorfile>structdg_1_1_e_r_k_step.html</anchorfile>
      <anchor>a568810ea4b1bf9b99215b3d05353f20d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_fsal</name>
      <anchorfile>structdg_1_1_e_r_k_step.html</anchorfile>
      <anchor>a208459dda0d8224c3d1ad55fc70b3ffc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>structdg_1_1_e_r_k_step.html</anchorfile>
      <anchor>a426757a67529f5e763ac783e882b9c09</anchor>
      <arglist>(RHS &amp;rhs, value_type t0, const ContainerType &amp;u0, value_type &amp;t1, ContainerType &amp;u1, value_type dt, ContainerType &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>structdg_1_1_e_r_k_step.html</anchorfile>
      <anchor>a7c23f7cc25a46c50fbe2007d2d32bb71</anchor>
      <arglist>(RHS &amp;rhs, value_type t0, const ContainerType &amp;u0, value_type &amp;t1, ContainerType &amp;u1, value_type dt)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>order</name>
      <anchorfile>structdg_1_1_e_r_k_step.html</anchorfile>
      <anchor>ada7824a8c5643fddde70c5c7876b4367</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>embedded_order</name>
      <anchorfile>structdg_1_1_e_r_k_step.html</anchorfile>
      <anchor>a9be86632721f583531fff430d50a7d27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>num_stages</name>
      <anchorfile>structdg_1_1_e_r_k_step.html</anchorfile>
      <anchor>a095012ea4608f08685f861855ef3059f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>dg::Error</name>
    <filename>classdg_1_1_error.html</filename>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classdg_1_1_error.html</anchorfile>
      <anchor>a3a53f1d422d8fe4d49b63e28028138cf</anchor>
      <arglist>(const Message &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_message</name>
      <anchorfile>classdg_1_1_error.html</anchorfile>
      <anchor>a68a69057a03958dd0762d00c8a39a6b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classdg_1_1_error.html</anchorfile>
      <anchor>abaa5b9b8412adf4a2692d2553b678277</anchor>
      <arglist>(const Message &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append_line</name>
      <anchorfile>classdg_1_1_error.html</anchorfile>
      <anchor>ab4281aadbf69b004f1ab3d9e7a6878c0</anchor>
      <arglist>(const Message &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classdg_1_1_error.html</anchorfile>
      <anchor>ae06ccdb472d4ad002cdd272837d2aadd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Error</name>
      <anchorfile>classdg_1_1_error.html</anchorfile>
      <anchor>aa128e2a9c314f3685b90968a7182e373</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Evaluate</name>
    <filename>structdg_1_1_evaluate.html</filename>
    <templarg>class BinarySub</templarg>
    <templarg>class Functor</templarg>
    <member kind="function">
      <type></type>
      <name>Evaluate</name>
      <anchorfile>structdg_1_1_evaluate.html</anchorfile>
      <anchor>ad287b05792b5c697d284208bb9760be2</anchor>
      <arglist>(BinarySub sub, Functor g)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_evaluate.html</anchorfile>
      <anchor>aa44a09db183331ff32f95c2999141312</anchor>
      <arglist>(T &amp;y, Ts... xs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>dg::EVE</name>
    <filename>classdg_1_1_e_v_e.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>classdg_1_1_e_v_e.html</anchorfile>
      <anchor>acd0a18fbae5881588259e69848c557c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>classdg_1_1_e_v_e.html</anchorfile>
      <anchor>a75791d373b451c218531bb1412c8f5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EVE</name>
      <anchorfile>classdg_1_1_e_v_e.html</anchorfile>
      <anchor>a0bca329bc49cce740643da82e5589d35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EVE</name>
      <anchorfile>classdg_1_1_e_v_e.html</anchorfile>
      <anchor>a0e04e52f25035676e6dc996053f8bd9c</anchor>
      <arglist>(const ContainerType &amp;copyable, unsigned max_iter=100)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classdg_1_1_e_v_e.html</anchorfile>
      <anchor>a29dfd86b4d04eaecdbb40272c7216fd6</anchor>
      <arglist>(const ContainerType &amp;copyable, unsigned max_iter=100)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max</name>
      <anchorfile>classdg_1_1_e_v_e.html</anchorfile>
      <anchor>a1f995d2a16fb64afc75a8ed31acad204</anchor>
      <arglist>(unsigned new_max)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_max</name>
      <anchorfile>classdg_1_1_e_v_e.html</anchorfile>
      <anchor>abe532f5eec4407a54f242f8f182783ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_throw_on_fail</name>
      <anchorfile>classdg_1_1_e_v_e.html</anchorfile>
      <anchor>ae43a0ca2fb1ecae96f82aed288ac1e87</anchor>
      <arglist>(bool throw_on_fail)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>solve</name>
      <anchorfile>classdg_1_1_e_v_e.html</anchorfile>
      <anchor>ab91ca09ee8873b8c8c9def6d2b180546</anchor>
      <arglist>(MatrixType &amp;&amp;A, ContainerType0 &amp;x, const ContainerType1 &amp;b, Preconditioner &amp;&amp;P, const ContainerType2 &amp;W, value_type &amp;ev_max, value_type eps_ev=1e-12)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::EXP</name>
    <filename>structdg_1_1_e_x_p.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>EXP</name>
      <anchorfile>structdg_1_1_e_x_p.html</anchorfile>
      <anchor>a8fa019eac76ed0cf2147de21ec609a88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_e_x_p.html</anchorfile>
      <anchor>a742a51ce093ad043ae954eff696c63b1</anchor>
      <arglist>(T x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ExplicitMultistep</name>
    <filename>structdg_1_1_explicit_multistep.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_explicit_multistep.html</anchorfile>
      <anchor>ac4d51185ba43738c499181e5b4114911</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_explicit_multistep.html</anchorfile>
      <anchor>a4c12fe176f030b720776e7490fe697e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExplicitMultistep</name>
      <anchorfile>structdg_1_1_explicit_multistep.html</anchorfile>
      <anchor>a0467fdc4f67029703e45767f3e65e724</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExplicitMultistep</name>
      <anchorfile>structdg_1_1_explicit_multistep.html</anchorfile>
      <anchor>a940450ac8bfda753b045aa4af206dd27</anchor>
      <arglist>(ConvertsToMultistepTableau&lt; value_type &gt; tableau, const ContainerType &amp;copyable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_explicit_multistep.html</anchorfile>
      <anchor>ab64ca9d75adb940b6b713e2174591323</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>structdg_1_1_explicit_multistep.html</anchorfile>
      <anchor>add0643a9575d1d1cf1886e2f37432d96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structdg_1_1_explicit_multistep.html</anchorfile>
      <anchor>aee0ee2e5dffac86391b19c1642d977fd</anchor>
      <arglist>(RHS &amp;rhs, value_type t0, const ContainerType &amp;u0, value_type dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>structdg_1_1_explicit_multistep.html</anchorfile>
      <anchor>a8a3de7cbb653bf5c85e13cdc695db136</anchor>
      <arglist>(RHS &amp;rhs, value_type &amp;t, ContainerType &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ExponentialFilter</name>
    <filename>structdg_1_1_exponential_filter.html</filename>
    <member kind="function">
      <type></type>
      <name>ExponentialFilter</name>
      <anchorfile>structdg_1_1_exponential_filter.html</anchorfile>
      <anchor>a7b5f1e5f36411f3c2f3cdbcf18c6dd89</anchor>
      <arglist>(double alpha, double eta_c, unsigned order, unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_exponential_filter.html</anchorfile>
      <anchor>a9a7c3817e8d1a23ffda5ee798e039ac2</anchor>
      <arglist>(unsigned i) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ExpProfX</name>
    <filename>structdg_1_1_exp_prof_x.html</filename>
    <member kind="function">
      <type></type>
      <name>ExpProfX</name>
      <anchorfile>structdg_1_1_exp_prof_x.html</anchorfile>
      <anchor>acf9e0f6bda55e047dc46c397830505b3</anchor>
      <arglist>(double amp, double bamp, double ln)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_exp_prof_x.html</anchorfile>
      <anchor>a429de10dbd1c859d0e9e709b14ff8df6</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_exp_prof_x.html</anchorfile>
      <anchor>a0e1417ec498b8315227acee451400110</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_exp_prof_x.html</anchorfile>
      <anchor>a0dce6eb6c3b11850932c4bea287f6cf9</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Extrapolation</name>
    <filename>structdg_1_1_extrapolation.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_extrapolation.html</anchorfile>
      <anchor>a201b041087d3c7137c0a505033fb1969</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_extrapolation.html</anchorfile>
      <anchor>a9569336bf7df69a10110a39f7204babe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Extrapolation</name>
      <anchorfile>structdg_1_1_extrapolation.html</anchorfile>
      <anchor>ababea85c041e5678db3146ca0a412608</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Extrapolation</name>
      <anchorfile>structdg_1_1_extrapolation.html</anchorfile>
      <anchor>a65275e82a9f2ae5738e27e1c6879544e</anchor>
      <arglist>(unsigned max, const ContainerType &amp;copyable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max</name>
      <anchorfile>structdg_1_1_extrapolation.html</anchorfile>
      <anchor>ae53f543a5839efb3f93100aea02b632e</anchor>
      <arglist>(unsigned max, const ContainerType &amp;copyable)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_max</name>
      <anchorfile>structdg_1_1_extrapolation.html</anchorfile>
      <anchor>a5d48dfa519be4fe534187e8cc3fac3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>structdg_1_1_extrapolation.html</anchorfile>
      <anchor>a27592ce05a5634eb4d9b6877babca527</anchor>
      <arglist>(value_type t) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extrapolate</name>
      <anchorfile>structdg_1_1_extrapolation.html</anchorfile>
      <anchor>a1921e0916d240a193b9bfef135bd290a</anchor>
      <arglist>(value_type t, ContainerType0 &amp;new_x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>derive</name>
      <anchorfile>structdg_1_1_extrapolation.html</anchorfile>
      <anchor>a0faecea87e6492cb41abf5160f48c484</anchor>
      <arglist>(value_type t, ContainerType0 &amp;dot_x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extrapolate</name>
      <anchorfile>structdg_1_1_extrapolation.html</anchorfile>
      <anchor>a7a2a77ab70d4dbd321a9e40987686c1a</anchor>
      <arglist>(ContainerType0 &amp;new_x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>derive</name>
      <anchorfile>structdg_1_1_extrapolation.html</anchorfile>
      <anchor>a84f38c4016e317c1be80bef99e741046</anchor>
      <arglist>(ContainerType0 &amp;dot_x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structdg_1_1_extrapolation.html</anchorfile>
      <anchor>ae568c9e1cc58d37cec74d9394f288fc6</anchor>
      <arglist>(value_type t_new, const ContainerType0 &amp;new_entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structdg_1_1_extrapolation.html</anchorfile>
      <anchor>aa7f82d0fc6eaf03abcc55d166ad00810</anchor>
      <arglist>(const ContainerType0 &amp;new_entry)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>head</name>
      <anchorfile>structdg_1_1_extrapolation.html</anchorfile>
      <anchor>a90252f69700cc172971b4e01387f6448</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ContainerType &amp;</type>
      <name>tail</name>
      <anchorfile>structdg_1_1_extrapolation.html</anchorfile>
      <anchor>a83f7305ece4369380fb24ca0c666f5e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>tail</name>
      <anchorfile>structdg_1_1_extrapolation.html</anchorfile>
      <anchor>a8a40c310ddcbeb8f176937c26e96a515</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Fail</name>
    <filename>structdg_1_1_fail.html</filename>
    <base>dg::Error</base>
    <member kind="function">
      <type></type>
      <name>Fail</name>
      <anchorfile>structdg_1_1_fail.html</anchorfile>
      <anchor>acbccb1ec26460accff6fe8ae47fb9cef</anchor>
      <arglist>(double eps)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fail</name>
      <anchorfile>structdg_1_1_fail.html</anchorfile>
      <anchor>a0515017f4edce80ab570dd2aed3ea79b</anchor>
      <arglist>(double eps, const Message &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>epsilon</name>
      <anchorfile>structdg_1_1_fail.html</anchorfile>
      <anchor>a3cb622e34b41e851cb51e95c639fe26a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Fail</name>
      <anchorfile>structdg_1_1_fail.html</anchorfile>
      <anchor>ab661a6c4e4c56ac2136e787f797396dd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::FilteredExplicitMultistep</name>
    <filename>structdg_1_1_filtered_explicit_multistep.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_filtered_explicit_multistep.html</anchorfile>
      <anchor>ab1c48a976c84a808f95f8fe1abfa8d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_filtered_explicit_multistep.html</anchorfile>
      <anchor>a73c4f3ccddbe7a5479dec29049e2bf92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FilteredExplicitMultistep</name>
      <anchorfile>structdg_1_1_filtered_explicit_multistep.html</anchorfile>
      <anchor>afffe2f89b2fe569a9de4dd9803b1b3b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FilteredExplicitMultistep</name>
      <anchorfile>structdg_1_1_filtered_explicit_multistep.html</anchorfile>
      <anchor>a64870b8b78b28f9a2b461d3603a4c227</anchor>
      <arglist>(ConvertsToMultistepTableau&lt; value_type &gt; tableau, const ContainerType &amp;copyable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_filtered_explicit_multistep.html</anchorfile>
      <anchor>a851d3064911e31cad0ed1f535f380c98</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>structdg_1_1_filtered_explicit_multistep.html</anchorfile>
      <anchor>a178d8e32f5400e81b0cf6716f4052164</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structdg_1_1_filtered_explicit_multistep.html</anchorfile>
      <anchor>af776a0a1610f58912fbc8fd8125b3264</anchor>
      <arglist>(const std::tuple&lt; RHS, Limiter &gt; &amp;ode, value_type t0, const ContainerType &amp;u0, value_type dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>structdg_1_1_filtered_explicit_multistep.html</anchorfile>
      <anchor>a645a43f32c32e754895ac9cec77a9897</anchor>
      <arglist>(const std::tuple&lt; RHS, Limiter &gt; &amp;ode, value_type &amp;t, ContainerType &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::FixedPointSolver</name>
    <filename>structdg_1_1_fixed_point_solver.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_fixed_point_solver.html</anchorfile>
      <anchor>a4b3c3c9fda3c39d0653ad49dac450711</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_fixed_point_solver.html</anchorfile>
      <anchor>aa71454e4e4286d62210032975304c692</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedPointSolver</name>
      <anchorfile>structdg_1_1_fixed_point_solver.html</anchorfile>
      <anchor>a060907f8f8723495c636e36e4fc2800d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedPointSolver</name>
      <anchorfile>structdg_1_1_fixed_point_solver.html</anchorfile>
      <anchor>a703f1da0566d52bebd137053b1e920e4</anchor>
      <arglist>(const ContainerType &amp;copyable, unsigned max_iter, value_type eps)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>structdg_1_1_fixed_point_solver.html</anchorfile>
      <anchor>ac0ec021400c128a13d2b48bc12fee407</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_benchmark</name>
      <anchorfile>structdg_1_1_fixed_point_solver.html</anchorfile>
      <anchor>a4384f39d6a44ecf3fe774d97ef9623d3</anchor>
      <arglist>(bool benchmark)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>structdg_1_1_fixed_point_solver.html</anchorfile>
      <anchor>a70842f7de3921a7d396b36bd2cf97ce7</anchor>
      <arglist>(value_type alpha, Implicit &amp;im, value_type t, ContainerType &amp;y, const ContainerType &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Gaussian</name>
    <filename>structdg_1_1_gaussian.html</filename>
    <member kind="function">
      <type></type>
      <name>Gaussian</name>
      <anchorfile>structdg_1_1_gaussian.html</anchorfile>
      <anchor>a7762f34326cedeae7f563e414d9c40c3</anchor>
      <arglist>(double x0, double y0, double sigma_x, double sigma_y, double amp)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_gaussian.html</anchorfile>
      <anchor>a6c4064423964f591ea37246a89132173</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_gaussian.html</anchorfile>
      <anchor>ae6400bcb1049236049001e02530a2d85</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Gaussian3d</name>
    <filename>structdg_1_1_gaussian3d.html</filename>
    <member kind="function">
      <type></type>
      <name>Gaussian3d</name>
      <anchorfile>structdg_1_1_gaussian3d.html</anchorfile>
      <anchor>acd75cd8bfa2dac659a308c1a17219f1e</anchor>
      <arglist>(double x0, double y0, double z0, double sigma_x, double sigma_y, double sigma_z, double amp)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_gaussian3d.html</anchorfile>
      <anchor>a4e4512b60ba1b4156f4adfc7c71e0218</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_gaussian3d.html</anchorfile>
      <anchor>a54081ab07334b585e37c1763da140c57</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::GaussianDamping</name>
    <filename>structdg_1_1_gaussian_damping.html</filename>
    <member kind="function">
      <type></type>
      <name>GaussianDamping</name>
      <anchorfile>structdg_1_1_gaussian_damping.html</anchorfile>
      <anchor>a7f046248fa21ca4637cd2e4a6416ac24</anchor>
      <arglist>(double psimax, double alpha)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_gaussian_damping.html</anchorfile>
      <anchor>a517b3e5102b1569a3e6f4f5b7ba53f40</anchor>
      <arglist>(double psi) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::GaussianX</name>
    <filename>structdg_1_1_gaussian_x.html</filename>
    <member kind="function">
      <type></type>
      <name>GaussianX</name>
      <anchorfile>structdg_1_1_gaussian_x.html</anchorfile>
      <anchor>a8126f14bde2aec2566da04d2697d0964</anchor>
      <arglist>(double x0, double sigma_x, double amp)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_gaussian_x.html</anchorfile>
      <anchor>a43a3277aa3d2a099285a48bb1bc5426d</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_gaussian_x.html</anchorfile>
      <anchor>a180d9b21a30f7d01c40b83165ba47408</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_gaussian_x.html</anchorfile>
      <anchor>a5f230c77e9bf8a0e3a5b50da0484a899</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::GaussianY</name>
    <filename>structdg_1_1_gaussian_y.html</filename>
    <member kind="function">
      <type></type>
      <name>GaussianY</name>
      <anchorfile>structdg_1_1_gaussian_y.html</anchorfile>
      <anchor>a02d66ca7623f6132e0290fd33568af1f</anchor>
      <arglist>(double y0, double sigma_y, double amp)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_gaussian_y.html</anchorfile>
      <anchor>ad92600ba2b7233f13885ea58c752de77</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::GaussianZ</name>
    <filename>structdg_1_1_gaussian_z.html</filename>
    <member kind="function">
      <type></type>
      <name>GaussianZ</name>
      <anchorfile>structdg_1_1_gaussian_z.html</anchorfile>
      <anchor>aa1915517625deebecb730e2b37a3e888</anchor>
      <arglist>(double z0, double sigma_z, double amp)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_gaussian_z.html</anchorfile>
      <anchor>a6a4659e6beeb3d33351518675b2fb3bc</anchor>
      <arglist>(double z) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_gaussian_z.html</anchorfile>
      <anchor>ab4a33a4709a5645b0a57c5b83933fb52</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::GeneralComm</name>
    <filename>structdg_1_1_general_comm.html</filename>
    <templarg>class Index</templarg>
    <templarg>class Vector</templarg>
    <base>aCommunicator&lt; Vector &gt;</base>
    <member kind="function">
      <type></type>
      <name>GeneralComm</name>
      <anchorfile>structdg_1_1_general_comm.html</anchorfile>
      <anchor>acfa98a579feb3617ba5d532af58c3f8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralComm</name>
      <anchorfile>structdg_1_1_general_comm.html</anchorfile>
      <anchor>a91664bd2c22f4c02bfe53d080a85302c</anchor>
      <arglist>(unsigned local_size, const thrust::host_vector&lt; int &gt; &amp;localGatherMap, const thrust::host_vector&lt; int &gt; &amp;pidGatherMap, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralComm</name>
      <anchorfile>structdg_1_1_general_comm.html</anchorfile>
      <anchor>af818e3e49946b3eab5a26b0c51f42485</anchor>
      <arglist>(const GeneralComm&lt; OtherIndex, OtherVector &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralComm</name>
      <anchorfile>structdg_1_1_general_comm.html</anchorfile>
      <anchor>a0f1e0b2f8be42081cb0ab8a238ab9210</anchor>
      <arglist>(const thrust::host_vector&lt; int &gt; &amp;globalGatherMap, const ConversionPolicy &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>const thrust::host_vector&lt; int &gt; &amp;</type>
      <name>getLocalGatherMap</name>
      <anchorfile>structdg_1_1_general_comm.html</anchorfile>
      <anchor>a0c05f96bc25afc2b48af763cfb42f9c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const thrust::host_vector&lt; int &gt; &amp;</type>
      <name>getPidGatherMap</name>
      <anchorfile>structdg_1_1_general_comm.html</anchorfile>
      <anchor>a3d23b9905b9c9b5e741a001c4843ece2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GeneralComm *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_general_comm.html</anchorfile>
      <anchor>ae9c9f3cc4d1a247cce162ef99ab58e95</anchor>
      <arglist>() const override final</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Heaviside</name>
    <filename>structdg_1_1_heaviside.html</filename>
    <member kind="function">
      <type></type>
      <name>Heaviside</name>
      <anchorfile>structdg_1_1_heaviside.html</anchorfile>
      <anchor>ac80d9db0d5eb276128c66d9e5c72e610</anchor>
      <arglist>(double xb, int sign=+1)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_heaviside.html</anchorfile>
      <anchor>a0f0986d4d4620349d43fb86cc3680e31</anchor>
      <arglist>(double x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Helmholtz</name>
    <filename>structdg_1_1_helmholtz.html</filename>
    <templarg>class Geometry</templarg>
    <templarg>class Matrix</templarg>
    <templarg>class Container</templarg>
    <member kind="typedef">
      <type>Geometry</type>
      <name>geometry_type</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>aedf326be82d4f3a8fa1424820a6eadf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>matrix_type</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>a15ffedf466809e87e7bef7f34aa7e352</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>a9991534c71b96e4a3caf94214523b661</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; Container &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>a7bcfe47ff38699953ffe2f8fb1d898ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Helmholtz</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>afc8ff6039d56932de4ed28b8b88f4fb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Helmholtz</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>a30f63ff09af72229d892b602842088a5</anchor>
      <arglist>(value_type alpha, Elliptic&lt; Geometry, Matrix, Container &gt; elliptic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Helmholtz</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>af4461e07d76c0d9ae017e654b464bc05</anchor>
      <arglist>(const Geometry &amp;g, value_type alpha=1., direction dir=dg::forward, value_type jfactor=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Helmholtz</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>a4caaeb89dfec4961852c0c5cfe1ab292</anchor>
      <arglist>(const Geometry &amp;g, bc bcx, bc bcy, value_type alpha=1., direction dir=dg::forward, value_type jfactor=1.)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>adabc88e10bf72d3b6818ce45f6d42c06</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>af0bf39b5ba87a7ab49c491e75f80a2c9</anchor>
      <arglist>(const ContainerType0 &amp;x, ContainerType1 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>weights</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>a4816a0b76f18360b823445ad075ee25f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>precond</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>acdec9f57b3aec8670c4c582cd5ea6816</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Elliptic&lt; Geometry, Matrix, Container &gt; &amp;</type>
      <name>elliptic</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>a98b6235734077f7b9fc4ae5562c3522b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>alpha</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>a25472576debc4911980ef46c375bfc53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>alpha</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>a8d7eb9854436240c95df2aff903877eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_chi</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>aaa2b6cb944107b2ddc40b534b996cd6a</anchor>
      <arglist>(const ContainerType0 &amp;chi)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>chi</name>
      <anchorfile>structdg_1_1_helmholtz.html</anchorfile>
      <anchor>aa099991aa96079ec1ae761f6ee464fd1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Helmholtz2</name>
    <filename>structdg_1_1_helmholtz2.html</filename>
    <templarg>class Geometry</templarg>
    <templarg>class Matrix</templarg>
    <templarg>class Container</templarg>
    <member kind="typedef">
      <type>Container</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_helmholtz2.html</anchorfile>
      <anchor>aae3689ba22fd75ddcb07ff01b256cf07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Geometry</type>
      <name>geometry_type</name>
      <anchorfile>structdg_1_1_helmholtz2.html</anchorfile>
      <anchor>a4a01cf2bcab924d334bc56b05232fff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>matrix_type</name>
      <anchorfile>structdg_1_1_helmholtz2.html</anchorfile>
      <anchor>af8e8f0ac287b9ff3c7718f016df5a2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; Container &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_helmholtz2.html</anchorfile>
      <anchor>a03cc55c501f30ded3618456effc9c43c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Helmholtz2</name>
      <anchorfile>structdg_1_1_helmholtz2.html</anchorfile>
      <anchor>afe943ee4f86e282d3182fc2b0bea2224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Helmholtz2</name>
      <anchorfile>structdg_1_1_helmholtz2.html</anchorfile>
      <anchor>acaa679abeff1bbb0d1283030d1ba0106</anchor>
      <arglist>(const Geometry &amp;g, value_type alpha=1., direction dir=dg::forward, value_type jfactor=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Helmholtz2</name>
      <anchorfile>structdg_1_1_helmholtz2.html</anchorfile>
      <anchor>a31fe84b70ad5c3d3c396cfa2cb147bed</anchor>
      <arglist>(const Geometry &amp;g, bc bcx, bc bcy, value_type alpha=1., direction dir=dg::forward, value_type jfactor=1.)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_helmholtz2.html</anchorfile>
      <anchor>a34c0975f36c9ed183ff737ad128feb61</anchor>
      <arglist>(const Geometry &amp;g, bc bcx, bc bcy, value_type alpha=1, direction dir=dg::forward, value_type jfactor=1.)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_helmholtz2.html</anchorfile>
      <anchor>a4a345a1b4a6029c87207c4613e5516ed</anchor>
      <arglist>(const Geometry &amp;g, value_type alpha=1, direction dir=dg::forward, value_type jfactor=1.)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_helmholtz2.html</anchorfile>
      <anchor>abf758e9988a361d080e83626806ee955</anchor>
      <arglist>(const Container &amp;x, Container &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>weights</name>
      <anchorfile>structdg_1_1_helmholtz2.html</anchorfile>
      <anchor>ab25e36b0038832467599b50276738a12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>precond</name>
      <anchorfile>structdg_1_1_helmholtz2.html</anchorfile>
      <anchor>a7dff6397d8a3eb1960c98a6019ab748a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>alpha</name>
      <anchorfile>structdg_1_1_helmholtz2.html</anchorfile>
      <anchor>af6b9605164f8ba19932a872c29bfb363</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>alpha</name>
      <anchorfile>structdg_1_1_helmholtz2.html</anchorfile>
      <anchor>ad6b890fbad9fb61b3e87903cd8857c44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_chi</name>
      <anchorfile>structdg_1_1_helmholtz2.html</anchorfile>
      <anchor>a3eb5c89121a7de7974725c4614808b7a</anchor>
      <arglist>(const Container &amp;chi)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>chi</name>
      <anchorfile>structdg_1_1_helmholtz2.html</anchorfile>
      <anchor>ac4cef6e37edc623dd75dc1caf6e441ea</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Helmholtz3d</name>
    <filename>structdg_1_1_helmholtz3d.html</filename>
    <templarg>class Geometry</templarg>
    <templarg>class Matrix</templarg>
    <templarg>class Container</templarg>
    <member kind="typedef">
      <type>Geometry</type>
      <name>geometry_type</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>ab233563b3747661806dfe9cac10495a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>matrix_type</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>ae5570aa8b046614380ae80afd7586c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>aedbd778c183033aec2dd4b1a38671b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; Container &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>afb9a7231555aa9c7e6065d41579af0c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Helmholtz3d</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>a7f97ab5b09ac18fba6878d22b61dcc91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Helmholtz3d</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>a1d0c7952495b80c890274df317484460</anchor>
      <arglist>(value_type alpha, Elliptic3d&lt; Geometry, Matrix, Container &gt; elliptic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Helmholtz3d</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>a1d6228ff0a2a8931b2413d90361fd08d</anchor>
      <arglist>(const Geometry &amp;g, value_type alpha=1., direction dir=dg::forward, value_type jfactor=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Helmholtz3d</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>ac29144f7cd4620b5a4747fa4b7dfd6dc</anchor>
      <arglist>(const Geometry &amp;g, bc bcx, bc bcy, bc bcz, value_type alpha=1., direction dir=dg::forward, value_type jfactor=1.)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>a20a5a314c52672f3b2bac3baed7f8797</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>ae6b66a423721d3f33f0dc5d5f2ae8d1f</anchor>
      <arglist>(const ContainerType0 &amp;x, ContainerType1 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>weights</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>ad184f041935c3c7fd2d8596171a61ed4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>precond</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>a79adf0cb058008e71d4057368297f45f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Elliptic3d&lt; Geometry, Matrix, Container &gt; &amp;</type>
      <name>elliptic</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>a147c1fe4ec8a76460aaf61caa8435ca9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>alpha</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>ae528455efe41d02202f8b05658f0adaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>alpha</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>a1c783eb55840f5982dc4476f16f40330</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_chi</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>a2934b27b68ed48b01006584c53539aa0</anchor>
      <arglist>(const ContainerType0 &amp;chi)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>chi</name>
      <anchorfile>structdg_1_1_helmholtz3d.html</anchorfile>
      <anchor>a23f340b8f53e787ab5043dfac6caa367</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Histogram</name>
    <filename>structdg_1_1_histogram.html</filename>
    <templarg>class container</templarg>
    <member kind="function">
      <type></type>
      <name>Histogram</name>
      <anchorfile>structdg_1_1_histogram.html</anchorfile>
      <anchor>a0759e95df4ac5885f8f436ea47334fe9</anchor>
      <arglist>(const dg::Grid1d &amp;g1d, const std::vector&lt; double &gt; &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>binwidth</name>
      <anchorfile>structdg_1_1_histogram.html</anchorfile>
      <anchor>a41da837ab831cd709ccb49390163b407</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_histogram.html</anchorfile>
      <anchor>a54ef2f9dfccf5c2969399b1ce49b6387</anchor>
      <arglist>(double x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Histogram2D</name>
    <filename>structdg_1_1_histogram2_d.html</filename>
    <templarg>class container</templarg>
    <member kind="function">
      <type></type>
      <name>Histogram2D</name>
      <anchorfile>structdg_1_1_histogram2_d.html</anchorfile>
      <anchor>a5b8734d23299e56a4755fe91a3b005f3</anchor>
      <arglist>(const dg::Grid2d &amp;g2d, const std::vector&lt; double &gt; &amp;inx, const std::vector&lt; double &gt; &amp;iny)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_histogram2_d.html</anchorfile>
      <anchor>ab3b3619e6fbe0e9083c0890146330a43</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Horner2d</name>
    <filename>structdg_1_1_horner2d.html</filename>
    <member kind="function">
      <type></type>
      <name>Horner2d</name>
      <anchorfile>structdg_1_1_horner2d.html</anchorfile>
      <anchor>a276e8d3e32cee6700c338c802752b146</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Horner2d</name>
      <anchorfile>structdg_1_1_horner2d.html</anchorfile>
      <anchor>a7e9aae24b492318eacac5692e9ba0944</anchor>
      <arglist>(std::vector&lt; double &gt; c, unsigned M, unsigned N)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_horner2d.html</anchorfile>
      <anchor>a3b67a6bf3417763448888d8a600cacb6</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::IDENTITY</name>
    <filename>structdg_1_1_i_d_e_n_t_i_t_y.html</filename>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_i_d_e_n_t_i_t_y.html</anchorfile>
      <anchor>ad735a5ab798d5e160d65260e3dc9ca28</anchor>
      <arglist>(T x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::IdentityFilter</name>
    <filename>structdg_1_1_identity_filter.html</filename>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>structdg_1_1_identity_filter.html</anchorfile>
      <anchor>aa988ad289ecd8f410d7bfebfa1a60e87</anchor>
      <arglist>(const ContainerType0 &amp;in, ContainerType1 &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ImExMultistep</name>
    <filename>structdg_1_1_im_ex_multistep.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_im_ex_multistep.html</anchorfile>
      <anchor>a7a148de4470deb1e6c32c865502a2c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_im_ex_multistep.html</anchorfile>
      <anchor>acde60a4404899b758d794681b15628cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImExMultistep</name>
      <anchorfile>structdg_1_1_im_ex_multistep.html</anchorfile>
      <anchor>a97ee0b1e96e9892a8162a311a533012a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImExMultistep</name>
      <anchorfile>structdg_1_1_im_ex_multistep.html</anchorfile>
      <anchor>a21c6a2bcd4c36bf11c38104dd1ba9e3e</anchor>
      <arglist>(ConvertsToMultistepTableau&lt; value_type &gt; tableau, const ContainerType &amp;copyable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_im_ex_multistep.html</anchorfile>
      <anchor>a0a015811731b0508b93a7df83cf1129c</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>structdg_1_1_im_ex_multistep.html</anchorfile>
      <anchor>a464191ef33dac014d5f4e355eeb8e034</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structdg_1_1_im_ex_multistep.html</anchorfile>
      <anchor>a29c33dd9d081414b9d5f8d384b112db0</anchor>
      <arglist>(const std::tuple&lt; Explicit, Implicit, Solver &gt; &amp;ode, value_type t0, const ContainerType &amp;u0, value_type dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>structdg_1_1_im_ex_multistep.html</anchorfile>
      <anchor>af0548115a5bcd41da34d6116af54d144</anchor>
      <arglist>(const std::tuple&lt; Explicit, Implicit, Solver &gt; &amp;ode, value_type &amp;t, ContainerType &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ImplicitMultistep</name>
    <filename>structdg_1_1_implicit_multistep.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_implicit_multistep.html</anchorfile>
      <anchor>a6f27b7d296b4c999640f5fa89ff2dd55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_implicit_multistep.html</anchorfile>
      <anchor>ae4f7d7c8af418e5c0da2aa07310a8636</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitMultistep</name>
      <anchorfile>structdg_1_1_implicit_multistep.html</anchorfile>
      <anchor>a995c90c32057b4f2bbeff905bdc9d934</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitMultistep</name>
      <anchorfile>structdg_1_1_implicit_multistep.html</anchorfile>
      <anchor>a523a8593ea431bb99e3288a28fea654b</anchor>
      <arglist>(ConvertsToMultistepTableau&lt; value_type &gt; tableau, const ContainerType &amp;copyable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_implicit_multistep.html</anchorfile>
      <anchor>a023fb9b0f4bd991980ec335e064ba736</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>structdg_1_1_implicit_multistep.html</anchorfile>
      <anchor>a2645c0b93bf546b1692af79453d5e54e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structdg_1_1_implicit_multistep.html</anchorfile>
      <anchor>a33b44159c1ca7c5fa69070e0e4bbbbbe</anchor>
      <arglist>(const std::tuple&lt; RHS, Solver &gt; &amp;ode, value_type t0, const ContainerType &amp;u0, value_type dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>structdg_1_1_implicit_multistep.html</anchorfile>
      <anchor>ad8b13b3f076b2d681ba8dcebb7ee115b</anchor>
      <arglist>(const std::tuple&lt; RHS, Solver &gt; &amp;ode, value_type &amp;t, container_type &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::InvCoshXsq</name>
    <filename>structdg_1_1_inv_cosh_xsq.html</filename>
    <member kind="function">
      <type></type>
      <name>InvCoshXsq</name>
      <anchorfile>structdg_1_1_inv_cosh_xsq.html</anchorfile>
      <anchor>ab62d44f245bfc5bf37c5afb3054ae021</anchor>
      <arglist>(double amp, double kx)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_inv_cosh_xsq.html</anchorfile>
      <anchor>a97e25d41cb85a3e080fcb7baec54f518</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_inv_cosh_xsq.html</anchorfile>
      <anchor>a6b06a694942ef53b22e12120f36206f1</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_inv_cosh_xsq.html</anchorfile>
      <anchor>aab66ee16d1d9888519d934d3d76deb50</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::InverseTensorMultiply2d</name>
    <filename>structdg_1_1_inverse_tensor_multiply2d.html</filename>
    <templarg>class value_type</templarg>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_inverse_tensor_multiply2d.html</anchorfile>
      <anchor>ab66eb95b3a5f99f3f477e7240c8a8bf1</anchor>
      <arglist>(value_type lambda, value_type t00, value_type t01, value_type t10, value_type t11, value_type in0, value_type in1, value_type mu, value_type &amp;out0, value_type &amp;out1) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::InverseTensorMultiply3d</name>
    <filename>structdg_1_1_inverse_tensor_multiply3d.html</filename>
    <templarg>class value_type</templarg>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_inverse_tensor_multiply3d.html</anchorfile>
      <anchor>a4f103c71b990895047c23e0960b91bb3</anchor>
      <arglist>(value_type lambda, value_type t00, value_type t01, value_type t02, value_type t10, value_type t11, value_type t12, value_type t20, value_type t21, value_type t22, value_type in0, value_type in1, value_type in2, value_type mu, value_type &amp;out0, value_type &amp;out1, value_type &amp;out2) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::INVERT</name>
    <filename>structdg_1_1_i_n_v_e_r_t.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_i_n_v_e_r_t.html</anchorfile>
      <anchor>ae59a5f20252066e6c10f8d92c9c9fc29</anchor>
      <arglist>(T x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::InvSqrt</name>
    <filename>structdg_1_1_inv_sqrt.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_inv_sqrt.html</anchorfile>
      <anchor>a2ce24e361cf2bb5d533d7a7b6918de20</anchor>
      <arglist>(T x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::IPolynomialHeaviside</name>
    <filename>structdg_1_1_i_polynomial_heaviside.html</filename>
    <member kind="function">
      <type></type>
      <name>IPolynomialHeaviside</name>
      <anchorfile>structdg_1_1_i_polynomial_heaviside.html</anchorfile>
      <anchor>a621cdc2875788cfc2872ab78145d20e6</anchor>
      <arglist>(double xb, double a, int sign=+1)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_i_polynomial_heaviside.html</anchorfile>
      <anchor>ac3e34ab2ed5657443b6901e204ff9832</anchor>
      <arglist>(double x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Iris</name>
    <filename>structdg_1_1_iris.html</filename>
    <member kind="function">
      <type></type>
      <name>Iris</name>
      <anchorfile>structdg_1_1_iris.html</anchorfile>
      <anchor>a09896aad3771228af5307fc699aeee16</anchor>
      <arglist>(double psi_min, double psi_max)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_iris.html</anchorfile>
      <anchor>a007f4e06a67a96476c802e7fbc83624c</anchor>
      <arglist>(double psi) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::IslandXY</name>
    <filename>structdg_1_1_island_x_y.html</filename>
    <member kind="function">
      <type></type>
      <name>IslandXY</name>
      <anchorfile>structdg_1_1_island_x_y.html</anchorfile>
      <anchor>aea020c0f8bbfff76caa5dad2692bf266</anchor>
      <arglist>(double lambda, double eps)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_island_x_y.html</anchorfile>
      <anchor>a8339aaf1084886de392c5526123f15e2</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ISNFINITE</name>
    <filename>structdg_1_1_i_s_n_f_i_n_i_t_e.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_i_s_n_f_i_n_i_t_e.html</anchorfile>
      <anchor>a859d7c3f681336018fe3bd7ae31de168</anchor>
      <arglist>(T x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ISNSANE</name>
    <filename>structdg_1_1_i_s_n_s_a_n_e.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_i_s_n_s_a_n_e.html</anchorfile>
      <anchor>a506277910597ff402d61d81a37c20ea2</anchor>
      <arglist>(T x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Lamb</name>
    <filename>structdg_1_1_lamb.html</filename>
    <member kind="function">
      <type></type>
      <name>Lamb</name>
      <anchorfile>structdg_1_1_lamb.html</anchorfile>
      <anchor>a8bbe13dcd12f398e0426f1c92388ecdd</anchor>
      <arglist>(double x0, double y0, double R, double U)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_lamb.html</anchorfile>
      <anchor>a9491de6dbcd01c16abe2fd72d7031b19</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>enstrophy</name>
      <anchorfile>structdg_1_1_lamb.html</anchorfile>
      <anchor>a1a4d0a6af4739c93de2d72fc0ad9931d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>energy</name>
      <anchorfile>structdg_1_1_lamb.html</anchorfile>
      <anchor>adda0fbe43c2cd511c3f8ae332037780a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::LeastSquaresExtrapolation</name>
    <filename>structdg_1_1_least_squares_extrapolation.html</filename>
    <templarg>class ContainerType0</templarg>
    <templarg>class ContainerType1</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType0 &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_least_squares_extrapolation.html</anchorfile>
      <anchor>aa39fffd7d59a2c22733a180c4306293d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerType0</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_least_squares_extrapolation.html</anchorfile>
      <anchor>acda34ea516889a07622db134582ce006</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeastSquaresExtrapolation</name>
      <anchorfile>structdg_1_1_least_squares_extrapolation.html</anchorfile>
      <anchor>a9f294ae9d27984f0fd857a7cbfce2ca1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeastSquaresExtrapolation</name>
      <anchorfile>structdg_1_1_least_squares_extrapolation.html</anchorfile>
      <anchor>a599f628e3d1fabe1f32ffb34a395f030</anchor>
      <arglist>(unsigned max, const ContainerType0 &amp;copyable0, const ContainerType1 &amp;copyable1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max</name>
      <anchorfile>structdg_1_1_least_squares_extrapolation.html</anchorfile>
      <anchor>a49711e887c2a1632c4be8fcabddb87c3</anchor>
      <arglist>(unsigned max, const ContainerType0 &amp;copyable0, const ContainerType1 &amp;copyable1)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_max</name>
      <anchorfile>structdg_1_1_least_squares_extrapolation.html</anchorfile>
      <anchor>a841ec0c97aa32402e107374bb299cd48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extrapolate</name>
      <anchorfile>structdg_1_1_least_squares_extrapolation.html</anchorfile>
      <anchor>a51b8d1cee855313d6685c7716a91d199</anchor>
      <arglist>(double alpha, const ContainerType0 &amp;x, double beta, ContainerType1 &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extrapolate</name>
      <anchorfile>structdg_1_1_least_squares_extrapolation.html</anchorfile>
      <anchor>aff23e453730db12fb676fc5b824d1c64</anchor>
      <arglist>(const ContainerType0 &amp;x, ContainerType1 &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structdg_1_1_least_squares_extrapolation.html</anchorfile>
      <anchor>a756a08dd8ab59973c9cdece4435e8a6d</anchor>
      <arglist>(const ContainerType0 &amp;x_new, const ContainerType1 &amp;y_new)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::LeastSquaresPreconditioner</name>
    <filename>structdg_1_1_least_squares_preconditioner.html</filename>
    <templarg>class Matrix</templarg>
    <templarg>class InnerPreconditioner</templarg>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_least_squares_preconditioner.html</anchorfile>
      <anchor>a5e870c62c87b83f5f60bccd63b143efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_least_squares_preconditioner.html</anchorfile>
      <anchor>a3072eae47940a536aadaa3152384c42a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeastSquaresPreconditioner</name>
      <anchorfile>structdg_1_1_least_squares_preconditioner.html</anchorfile>
      <anchor>ad6645857223f188e9219d7b4a10c2491</anchor>
      <arglist>(Matrix op, InnerPreconditioner P, const ContainerType &amp;copyable, value_type ev_max, unsigned degree)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>structdg_1_1_least_squares_preconditioner.html</anchorfile>
      <anchor>a1298f2435db5b6bbbd46dc97f1e79990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_least_squares_preconditioner.html</anchorfile>
      <anchor>ac762fca78617a054434ba65bc6df18f8</anchor>
      <arglist>(const ContainerType0 &amp;x, ContainerType1 &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>dg::LGMRES</name>
    <filename>classdg_1_1_l_g_m_r_e_s.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>classdg_1_1_l_g_m_r_e_s.html</anchorfile>
      <anchor>abe9634581fa6f2eb54117ba8a63652fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>classdg_1_1_l_g_m_r_e_s.html</anchorfile>
      <anchor>ae87427bca8c5886677ede137b4fc3573</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LGMRES</name>
      <anchorfile>classdg_1_1_l_g_m_r_e_s.html</anchorfile>
      <anchor>a52192f7574bd2fc51a3c5f4c60131c9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LGMRES</name>
      <anchorfile>classdg_1_1_l_g_m_r_e_s.html</anchorfile>
      <anchor>a6fc602b6ac7477f4ba1af600bdf843a4</anchor>
      <arglist>(const ContainerType &amp;copyable, unsigned max_inner, unsigned max_outer, unsigned max_restarts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classdg_1_1_l_g_m_r_e_s.html</anchorfile>
      <anchor>a9d2709383c30422fe3887f027e8ee882</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max</name>
      <anchorfile>classdg_1_1_l_g_m_r_e_s.html</anchorfile>
      <anchor>ab9d8dd701eca5415054420abfbd84d6a</anchor>
      <arglist>(unsigned new_Restarts)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_max</name>
      <anchorfile>classdg_1_1_l_g_m_r_e_s.html</anchorfile>
      <anchor>aa1ee6dc7494b5b2715dafdaae7347811</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_throw_on_fail</name>
      <anchorfile>classdg_1_1_l_g_m_r_e_s.html</anchorfile>
      <anchor>a306caffc59499f657b89cd2656ecb569</anchor>
      <arglist>(bool throw_on_fail)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>classdg_1_1_l_g_m_r_e_s.html</anchorfile>
      <anchor>a77d18f6349314978fa73882338b8ef99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>solve</name>
      <anchorfile>classdg_1_1_l_g_m_r_e_s.html</anchorfile>
      <anchor>a6ce26f3861a3f3bf7e076b6c42c65574</anchor>
      <arglist>(MatrixType &amp;&amp;A, ContainerType0 &amp;x, const ContainerType1 &amp;b, Preconditioner &amp;&amp;P, const ContainerType2 &amp;W, value_type eps=1e-12, value_type nrmb_correction=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>converged</name>
      <anchorfile>classdg_1_1_l_g_m_r_e_s.html</anchorfile>
      <anchor>a1ccb8fa12fda2bbc83302f552936e836</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Line</name>
    <filename>structdg_1_1_line.html</filename>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>structdg_1_1_line.html</anchorfile>
      <anchor>ac9a8e20ea48c2e4620fdeb5903e33830</anchor>
      <arglist>(double x0, double y0, double x1, double y1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_line.html</anchorfile>
      <anchor>ac339f32489d905591eb73a71bbc7571d</anchor>
      <arglist>(double x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::LinearX</name>
    <filename>structdg_1_1_linear_x.html</filename>
    <member kind="function">
      <type></type>
      <name>LinearX</name>
      <anchorfile>structdg_1_1_linear_x.html</anchorfile>
      <anchor>a2721b98ac435a39e4864b42657e7c07c</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_linear_x.html</anchorfile>
      <anchor>a082d05ac51dd757bf78c3cb0c026ede0</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_linear_x.html</anchorfile>
      <anchor>a8d76a05ee99409fe9a11023950ccefe8</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_linear_x.html</anchorfile>
      <anchor>a7e4ac41e7807bf4a75a4d37921488dae</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::LinearY</name>
    <filename>structdg_1_1_linear_y.html</filename>
    <member kind="function">
      <type></type>
      <name>LinearY</name>
      <anchorfile>structdg_1_1_linear_y.html</anchorfile>
      <anchor>a141df376a562eb957ae6c05ce76c78d8</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_linear_y.html</anchorfile>
      <anchor>a4ae75a5bed6b449dd1bd38ebe3c448d0</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_linear_y.html</anchorfile>
      <anchor>a5e9d7bba0fae34b2bf471993d7a68cbd</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::LinearZ</name>
    <filename>structdg_1_1_linear_z.html</filename>
    <member kind="function">
      <type></type>
      <name>LinearZ</name>
      <anchorfile>structdg_1_1_linear_z.html</anchorfile>
      <anchor>aafebe34c10d894f6f0122264ac96a1a0</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_linear_z.html</anchorfile>
      <anchor>abd2f7b2a00fbeca594b5b60ef89a1a95</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::LN</name>
    <filename>structdg_1_1_l_n.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_l_n.html</anchorfile>
      <anchor>a96dd7f6b61baad75332f7f3b06d4caf0</anchor>
      <arglist>(const T &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>dg::Message</name>
    <filename>classdg_1_1_message.html</filename>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>classdg_1_1_message.html</anchorfile>
      <anchor>a98f87ba7128a8fe526fd069c9f29e633</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>classdg_1_1_message.html</anchorfile>
      <anchor>a730b994556024a4136f6f686bd6ed416</anchor>
      <arglist>(const char *file, const int line)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>classdg_1_1_message.html</anchorfile>
      <anchor>aed304046de640c58433eacba67fca85a</anchor>
      <arglist>(std::string m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Message</name>
      <anchorfile>classdg_1_1_message.html</anchorfile>
      <anchor>af882d452d44235589e47e1b5f769efc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Message &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classdg_1_1_message.html</anchorfile>
      <anchor>ad24ff981230d490df4e076ab5d954732</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classdg_1_1_message.html</anchorfile>
      <anchor>a413b514f1a6e2b883e8b239be9426096</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classdg_1_1_message.html</anchorfile>
      <anchor>a2dd18fce46a6842740ba4a10322235ad</anchor>
      <arglist>(std::ostream &amp;os, const Message &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::MinMod</name>
    <filename>structdg_1_1_min_mod.html</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_min_mod.html</anchorfile>
      <anchor>acb5e6689e1f65cea8ca732a345192161</anchor>
      <arglist>(T x1, T x2) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_min_mod.html</anchorfile>
      <anchor>a4893244c4dd6eb7b22dd5a4beaa0b3c0</anchor>
      <arglist>(T x1, T x2, T x3) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::minus_equals</name>
    <filename>structdg_1_1minus__equals.html</filename>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1minus__equals.html</anchorfile>
      <anchor>a4c54ca725b3031fbe2e6ff6ed16a3889</anchor>
      <arglist>(T1 x, T2 &amp;y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::MOD</name>
    <filename>structdg_1_1_m_o_d.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>MOD</name>
      <anchorfile>structdg_1_1_m_o_d.html</anchorfile>
      <anchor>a1661e093118805e4334b61089134bf6f</anchor>
      <arglist>(T m)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_m_o_d.html</anchorfile>
      <anchor>a391838c2e9904a47e3755a99449c5898</anchor>
      <arglist>(T x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ModalFilter</name>
    <filename>structdg_1_1_modal_filter.html</filename>
    <templarg>class MatrixType</templarg>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>real_type</name>
      <anchorfile>structdg_1_1_modal_filter.html</anchorfile>
      <anchor>a37ac8ee253e6da655d4283d88e8d07f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModalFilter</name>
      <anchorfile>structdg_1_1_modal_filter.html</anchorfile>
      <anchor>ac1c1d272fc9dd3ffac350969a440ae99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModalFilter</name>
      <anchorfile>structdg_1_1_modal_filter.html</anchorfile>
      <anchor>aefdc128cc85e54626dffa5dff1646ab5</anchor>
      <arglist>(UnaryOp sigma, const Topology &amp;t, Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_modal_filter.html</anchorfile>
      <anchor>a7c19cfe36d2b95398406fbcb3ebe36e1</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>structdg_1_1_modal_filter.html</anchorfile>
      <anchor>a1f24353c809d966ac75a1a525f60f4d8</anchor>
      <arglist>(const ContainerType &amp;x, ContainerType &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_modal_filter.html</anchorfile>
      <anchor>a0481040bbbc1db6ca961ff540355d4be</anchor>
      <arglist>(const ContainerType &amp;x, ContainerType &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_modal_filter.html</anchorfile>
      <anchor>a9a4bcaa92496c99075f8cae13ca22bb4</anchor>
      <arglist>(real_type alpha, const ContainerType &amp;x, real_type beta, ContainerType &amp;y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ModifiedChebyshevPreconditioner</name>
    <filename>structdg_1_1_modified_chebyshev_preconditioner.html</filename>
    <templarg>class Matrix</templarg>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_modified_chebyshev_preconditioner.html</anchorfile>
      <anchor>aa20a4f4a15aebd6b308572bd98bbc06c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_modified_chebyshev_preconditioner.html</anchorfile>
      <anchor>ab2d69376d7eb1a0db216a58005b20c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModifiedChebyshevPreconditioner</name>
      <anchorfile>structdg_1_1_modified_chebyshev_preconditioner.html</anchorfile>
      <anchor>acdc71d875045ad337950a91d78a8c47e</anchor>
      <arglist>(Matrix op, const ContainerType &amp;copyable, value_type ev_min, value_type ev_max, unsigned degree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_modified_chebyshev_preconditioner.html</anchorfile>
      <anchor>a928b4e7ba9113cd7f0917febb5a90a58</anchor>
      <arglist>(const ContainerType0 &amp;x, ContainerType1 &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::MPI_Vector</name>
    <filename>structdg_1_1_m_p_i___vector.html</filename>
    <templarg>class container</templarg>
    <member kind="typedef">
      <type>container</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_m_p_i___vector.html</anchorfile>
      <anchor>ad42ce5571b198915c6b5c2eb9033ceb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPI_Vector</name>
      <anchorfile>structdg_1_1_m_p_i___vector.html</anchorfile>
      <anchor>a0f9c525a987ea24d60acd942cb5a4f1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPI_Vector</name>
      <anchorfile>structdg_1_1_m_p_i___vector.html</anchorfile>
      <anchor>ab79c8907a64d91971c63f1542df07f04</anchor>
      <arglist>(const container &amp;data, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPI_Vector</name>
      <anchorfile>structdg_1_1_m_p_i___vector.html</anchorfile>
      <anchor>a896368bf40dca6d0e3c860c1875406ca</anchor>
      <arglist>(const MPI_Vector&lt; OtherContainer &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>const container &amp;</type>
      <name>data</name>
      <anchorfile>structdg_1_1_m_p_i___vector.html</anchorfile>
      <anchor>a196cacee8ef212612f77078b518bbba5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>container &amp;</type>
      <name>data</name>
      <anchorfile>structdg_1_1_m_p_i___vector.html</anchorfile>
      <anchor>aa4071a3bb0388035c786c03c25afc951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>communicator</name>
      <anchorfile>structdg_1_1_m_p_i___vector.html</anchorfile>
      <anchor>aab440e329ae64ae5261a5c7fd313ab19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>communicator_mod</name>
      <anchorfile>structdg_1_1_m_p_i___vector.html</anchorfile>
      <anchor>a888b92389a999dbbe0f6151fa657d3b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>communicator_mod_reduce</name>
      <anchorfile>structdg_1_1_m_p_i___vector.html</anchorfile>
      <anchor>ab0d4fab5307f188d3ac9256e45e54646</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_communicator</name>
      <anchorfile>structdg_1_1_m_p_i___vector.html</anchorfile>
      <anchor>ac2442299b7209bebfc668cedb7ecce42</anchor>
      <arglist>(MPI_Comm comm, MPI_Comm comm_mod, MPI_Comm comm_mod_reduce)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>structdg_1_1_m_p_i___vector.html</anchorfile>
      <anchor>adec1137c3cdb2954fb55dfc180cb3ccd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>structdg_1_1_m_p_i___vector.html</anchorfile>
      <anchor>ae86c14f9d503831fbe96ced377a37013</anchor>
      <arglist>(MPI_Vector &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::MPIDistMat</name>
    <filename>structdg_1_1_m_p_i_dist_mat.html</filename>
    <templarg>class LocalMatrix</templarg>
    <templarg>class Collective</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; LocalMatrix &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_m_p_i_dist_mat.html</anchorfile>
      <anchor>a382a85c9d413581afaccfcef642cf46b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPIDistMat</name>
      <anchorfile>structdg_1_1_m_p_i_dist_mat.html</anchorfile>
      <anchor>accef1f6cc1037e206989eacfbf4d6be6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPIDistMat</name>
      <anchorfile>structdg_1_1_m_p_i_dist_mat.html</anchorfile>
      <anchor>a835f104b4be049c637f76c1a619bed47</anchor>
      <arglist>(const LocalMatrix &amp;m, const Collective &amp;c, enum dist_type dist=row_dist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPIDistMat</name>
      <anchorfile>structdg_1_1_m_p_i_dist_mat.html</anchorfile>
      <anchor>a23864630bd3610bb94c0f58ffe1ef6f9</anchor>
      <arglist>(const MPIDistMat&lt; OtherMatrix, OtherCollective &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>const LocalMatrix &amp;</type>
      <name>matrix</name>
      <anchorfile>structdg_1_1_m_p_i_dist_mat.html</anchorfile>
      <anchor>a6d74c30018321b64b7055bee784b4ee1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Collective &amp;</type>
      <name>collective</name>
      <anchorfile>structdg_1_1_m_p_i_dist_mat.html</anchorfile>
      <anchor>ada4ef392b241e439175ad0baf698d5b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>enum dist_type</type>
      <name>get_dist</name>
      <anchorfile>structdg_1_1_m_p_i_dist_mat.html</anchorfile>
      <anchor>a96ffa4df1bbe7b1a512791c5ff2a9ab7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dist</name>
      <anchorfile>structdg_1_1_m_p_i_dist_mat.html</anchorfile>
      <anchor>aa6693e91cfc73a2de97da0cd7a3b7f3d</anchor>
      <arglist>(enum dist_type dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_m_p_i_dist_mat.html</anchorfile>
      <anchor>aae29f0618e252aabcca5bc1bb493e459</anchor>
      <arglist>(value_type alpha, const ContainerType1 &amp;x, value_type beta, ContainerType2 &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_m_p_i_dist_mat.html</anchorfile>
      <anchor>a8bf1107b0a4333f3f9e4fa02041b42b6</anchor>
      <arglist>(const ContainerType1 &amp;x, ContainerType2 &amp;y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::MPIMatrixTag</name>
    <filename>structdg_1_1_m_p_i_matrix_tag.html</filename>
    <base>dg::AnyMatrixTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::MPITag</name>
    <filename>structdg_1_1_m_p_i_tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>dg::MPIVectorTag</name>
    <filename>structdg_1_1_m_p_i_vector_tag.html</filename>
    <base>dg::AnyVectorTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::MultigridCG2d</name>
    <filename>structdg_1_1_multigrid_c_g2d.html</filename>
    <templarg>class Geometry</templarg>
    <templarg>class Matrix</templarg>
    <templarg>class Container</templarg>
    <member kind="typedef">
      <type>Geometry</type>
      <name>geometry_type</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a9f15aac16dcdb67f310e0af621b538c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>matrix_type</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>aeb757d36ec9ffe31587b3d93796e6b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>ae4241083bbf815e345cbbe751e4e6d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; Container &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a31cc3f8e39468ef4b723d00e11b48601</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Geometry</type>
      <name>geometry_type</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a9f15aac16dcdb67f310e0af621b538c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>matrix_type</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>aeb757d36ec9ffe31587b3d93796e6b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>ae4241083bbf815e345cbbe751e4e6d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; Container &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a31cc3f8e39468ef4b723d00e11b48601</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultigridCG2d</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a502323c42d6f651ea5ef5ab6d6a69127</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultigridCG2d</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a93b81ed041ab30de75fdef268a070aaf</anchor>
      <arglist>(const Geometry &amp;grid, const unsigned stages, ContainerParams &amp;&amp;... ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a8c55c73ccca5ff891a977000da9612e8</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a84635b2d0487a62a6a8d3b2d79ee2775</anchor>
      <arglist>(const ContainerType0 &amp;src, std::vector&lt; ContainerType0 &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ContainerType0 &gt;</type>
      <name>project</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>ad6664fcdea24d532ccbdd91577b3789a</anchor>
      <arglist>(const ContainerType0 &amp;src) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>stages</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a7659e4d18315604a75b8f92f4266aba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>num_stages</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>adec75fbb948aa597f8d7c227a395028f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Geometry &amp;</type>
      <name>grid</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a9ec06f651ee1bbbe873ee5828e508d42</anchor>
      <arglist>(unsigned stage) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>max_iter</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>ab94f4c33e61798f03fc0241e76c54efa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_iter</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>aa7a9e3acbd2d7aa1373f48d9e69daaa4</anchor>
      <arglist>(unsigned new_max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_benchmark</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a2a172084292fc798b6bf17e1bb13ba4e</anchor>
      <arglist>(bool benchmark)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>copyable</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a772e344e89b5ba41aaef812b420358a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned &gt;</type>
      <name>direct_solve</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a2943d0d55b8c447d122b1a0a5b13a5f5</anchor>
      <arglist>(std::vector&lt; SymmetricOp &gt; &amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, value_type eps)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned &gt;</type>
      <name>direct_solve</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a19a14a3cfccc39b9c943478fdb211a26</anchor>
      <arglist>(std::vector&lt; SymmetricOp &gt; &amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, std::vector&lt; value_type &gt; eps)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultigridCG2d</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a502323c42d6f651ea5ef5ab6d6a69127</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultigridCG2d</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>ae3d382d16337a5d055fa7ed675761870</anchor>
      <arglist>(const Geometry &amp;grid, const unsigned stages, Params &amp;&amp;... ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a8c55c73ccca5ff891a977000da9612e8</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a84635b2d0487a62a6a8d3b2d79ee2775</anchor>
      <arglist>(const ContainerType0 &amp;src, std::vector&lt; ContainerType0 &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ContainerType0 &gt;</type>
      <name>project</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>ad6664fcdea24d532ccbdd91577b3789a</anchor>
      <arglist>(const ContainerType0 &amp;src) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>stages</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a7659e4d18315604a75b8f92f4266aba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>num_stages</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>adec75fbb948aa597f8d7c227a395028f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Geometry &amp;</type>
      <name>grid</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a9ec06f651ee1bbbe873ee5828e508d42</anchor>
      <arglist>(unsigned stage) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>max_iter</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>ab94f4c33e61798f03fc0241e76c54efa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_iter</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>aa7a9e3acbd2d7aa1373f48d9e69daaa4</anchor>
      <arglist>(unsigned new_max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_benchmark</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a2a172084292fc798b6bf17e1bb13ba4e</anchor>
      <arglist>(bool benchmark)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>copyable</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a772e344e89b5ba41aaef812b420358a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned &gt;</type>
      <name>direct_solve</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a2943d0d55b8c447d122b1a0a5b13a5f5</anchor>
      <arglist>(std::vector&lt; SymmetricOp &gt; &amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, value_type eps)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned &gt;</type>
      <name>direct_solve</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a19a14a3cfccc39b9c943478fdb211a26</anchor>
      <arglist>(std::vector&lt; SymmetricOp &gt; &amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, std::vector&lt; value_type &gt; eps)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned &gt;</type>
      <name>direct_solve_with_chebyshev</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>acecc7cb3fce15d6b8e04321d94deb90b</anchor>
      <arglist>(std::vector&lt; SymmetricOp &gt; &amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, value_type eps, unsigned num_cheby)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned &gt;</type>
      <name>direct_solve_with_chebyshev</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a0dcc51343f586b9a5d038a5e8da58497</anchor>
      <arglist>(std::vector&lt; SymmetricOp &gt; &amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, std::vector&lt; value_type &gt; eps, std::vector&lt; unsigned &gt; num_cheby)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fmg_solve</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>a2cbb59c01bddc244f83d12024b00b4df</anchor>
      <arglist>(std::vector&lt; SymmetricOp &gt; &amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, std::vector&lt; value_type &gt; ev, unsigned nu_pre, unsigned nu_post, unsigned gamma, value_type eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pcg_solve</name>
      <anchorfile>structdg_1_1_multigrid_c_g2d.html</anchorfile>
      <anchor>aeeeb1224eebf10036ab940ec0edf396e</anchor>
      <arglist>(std::vector&lt; SymmetricOp &gt; &amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, std::vector&lt; value_type &gt; ev, unsigned nu_pre, unsigned nu_post, unsigned gamma, value_type eps)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::MultiMatrix</name>
    <filename>structdg_1_1_multi_matrix.html</filename>
    <templarg>class MatrixType</templarg>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>real_type</name>
      <anchorfile>structdg_1_1_multi_matrix.html</anchorfile>
      <anchor>acb8573038dfc39d692d368a0f8739593</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiMatrix</name>
      <anchorfile>structdg_1_1_multi_matrix.html</anchorfile>
      <anchor>ae14e9c27d6e03614857b7086df402885</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiMatrix</name>
      <anchorfile>structdg_1_1_multi_matrix.html</anchorfile>
      <anchor>ae5e7dafd471e65824ceaa4dca79c292a</anchor>
      <arglist>(int dimension)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiMatrix</name>
      <anchorfile>structdg_1_1_multi_matrix.html</anchorfile>
      <anchor>a0143c689f2f620492ee20618df7c0929</anchor>
      <arglist>(const MultiMatrix&lt; OtherMatrix, OtherContainer &gt; &amp;src, Params &amp;&amp;... ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_multi_matrix.html</anchorfile>
      <anchor>aa436941bb966b2bf948ec6d8d00287da</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_multi_matrix.html</anchorfile>
      <anchor>adb947b1f05a3e2e829a0af14a628c3f4</anchor>
      <arglist>(const ContainerType0 &amp;x, ContainerType1 &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_multi_matrix.html</anchorfile>
      <anchor>a08ecec0e827e17bf01b10158a9f46419</anchor>
      <arglist>(real_type alpha, const ContainerType0 &amp;x, real_type beta, ContainerType1 &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Buffer&lt; ContainerType &gt; &gt; &amp;</type>
      <name>get_temp</name>
      <anchorfile>structdg_1_1_multi_matrix.html</anchorfile>
      <anchor>a466264af9598e72f1999f0d8e9dd464d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Buffer&lt; ContainerType &gt; &gt; &amp;</type>
      <name>get_temp</name>
      <anchorfile>structdg_1_1_multi_matrix.html</anchorfile>
      <anchor>ad297c516f32b2f70eec773ad62dcb6ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; MatrixType &gt; &amp;</type>
      <name>get_matrices</name>
      <anchorfile>structdg_1_1_multi_matrix.html</anchorfile>
      <anchor>aac7c6d420767ce0266d8563cbc5681f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; MatrixType &gt; &amp;</type>
      <name>get_matrices</name>
      <anchorfile>structdg_1_1_multi_matrix.html</anchorfile>
      <anchor>ad4a1929d43c0337276cb3c9bb402d2d7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::MultistepTableau</name>
    <filename>structdg_1_1_multistep_tableau.html</filename>
    <templarg>class real_type</templarg>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_multistep_tableau.html</anchorfile>
      <anchor>a9a9086d8042199af933c37aa1cff19bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultistepTableau</name>
      <anchorfile>structdg_1_1_multistep_tableau.html</anchorfile>
      <anchor>a8d4da7ea0f69aa5ba8017417c0b27dfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultistepTableau</name>
      <anchorfile>structdg_1_1_multistep_tableau.html</anchorfile>
      <anchor>ae7f3488ff7aa89b584259993fc8cb032</anchor>
      <arglist>(unsigned steps, unsigned order, const std::vector&lt; real_type &gt; &amp;a_v, const std::vector&lt; real_type &gt; &amp;b_v, const std::vector&lt; real_type &gt; &amp;c_v)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>a</name>
      <anchorfile>structdg_1_1_multistep_tableau.html</anchorfile>
      <anchor>a461539e403ea7bc10e71988af3c0dced</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>ex</name>
      <anchorfile>structdg_1_1_multistep_tableau.html</anchorfile>
      <anchor>a47921c26821feb17e2e958227a7f8c2c</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>im</name>
      <anchorfile>structdg_1_1_multistep_tableau.html</anchorfile>
      <anchor>a7c207ab8254ad39a2ca0821e7a61d081</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>steps</name>
      <anchorfile>structdg_1_1_multistep_tableau.html</anchorfile>
      <anchor>a37b463c9badccac1c99a35590340d32d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>order</name>
      <anchorfile>structdg_1_1_multistep_tableau.html</anchorfile>
      <anchor>a54e82dc720184463cb6dd8735ea5d256</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExplicit</name>
      <anchorfile>structdg_1_1_multistep_tableau.html</anchorfile>
      <anchor>aeaea2ed12ec1dea6e5fd07407d7d83f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isImplicit</name>
      <anchorfile>structdg_1_1_multistep_tableau.html</anchorfile>
      <anchor>a4532c1d8389cca721abd07eb484547e9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::MultistepTimeloop</name>
    <filename>structdg_1_1_multistep_timeloop.html</filename>
    <templarg>class ContainerType</templarg>
    <base>dg::aTimeloop</base>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_multistep_timeloop.html</anchorfile>
      <anchor>a008c4213d8f2454b8dbf8d449a98ccb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_multistep_timeloop.html</anchorfile>
      <anchor>ac65ece900b71bce4b39964539b1d68d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultistepTimeloop</name>
      <anchorfile>structdg_1_1_multistep_timeloop.html</anchorfile>
      <anchor>afd9bf971aa7e19bc1fad86167c0c283c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultistepTimeloop</name>
      <anchorfile>structdg_1_1_multistep_timeloop.html</anchorfile>
      <anchor>a2f2c5136442d46f8b326c3349fbc3fa7</anchor>
      <arglist>(std::function&lt; void(value_type &amp;, ContainerType &amp;)&gt; step, value_type dt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultistepTimeloop</name>
      <anchorfile>structdg_1_1_multistep_timeloop.html</anchorfile>
      <anchor>a00152a99962889d2c4d40eaedab2c7ab</anchor>
      <arglist>(Stepper &amp;&amp;stepper, ODE &amp;&amp;ode, value_type t0, const ContainerType &amp;u0, value_type dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_multistep_timeloop.html</anchorfile>
      <anchor>a8916871d14ad891f24909d3a5bc7effd</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MultistepTimeloop *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_multistep_timeloop.html</anchorfile>
      <anchor>a3882456b58381988c573a10bfc144361</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::NearestNeighborComm</name>
    <filename>structdg_1_1_nearest_neighbor_comm.html</filename>
    <templarg>class Index</templarg>
    <templarg>class Buffer</templarg>
    <templarg>class Vector</templarg>
    <member kind="typedef">
      <type>Vector</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>aabfc3bbed3b1a7ef48d4ae8d1046eac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Buffer</type>
      <name>buffer_type</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>aca21ce71af2867c5b4424f3aedf2ad91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; Vector &gt; *</type>
      <name>pointer_type</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>a3428c68d97ffc6a106be3289a644f0cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; Vector &gt; const *</type>
      <name>const_pointer_type</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>abf727a5b8915ffad2ad814d185e417c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NearestNeighborComm</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>ab8e33ecbc3e2c55deea1ddabc077aa85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NearestNeighborComm</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>aaa9caac5cbeb9fb587e791cf9001ceb2</anchor>
      <arglist>(unsigned n, const unsigned vector_dimensions[3], MPI_Comm comm, unsigned direction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NearestNeighborComm</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>adb90b82c228b5d45c0dea912a65158d6</anchor>
      <arglist>(const NearestNeighborComm&lt; OtherIndex, OtherBuffer, OtherVector &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>n</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>a3f7516e6a6707ebcdcafdc36d9de9f5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const unsigned *</type>
      <name>dims</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>a0a2407e3b294e6788f0fa267353cd29d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>direction</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>ad11be4522a94a3905ffe74e8b08ed96c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>communicator</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>a5a3cd554cb8023482bce926157ad74b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Buffer</type>
      <name>allocate_buffer</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>a9938f3e7dfddbdeaf95a7563df70f56e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>buffer_size</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>a0304036df7739faf176f8dc62d633c7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCommunicating</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>af4382fb4c96b288d55e062e64c235ada</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>map_index</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>a8818544132cf8f05be2fa26b0a537e69</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>global_gather_init</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>ae2a26b474d61904090bf4be60506e64b</anchor>
      <arglist>(const_pointer_type input, buffer_type &amp;buffer, MPI_Request rqst[4]) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>global_gather_wait</name>
      <anchorfile>structdg_1_1_nearest_neighbor_comm.html</anchorfile>
      <anchor>a465366c4b1b50bf2e8e78f352ec11be0</anchor>
      <arglist>(const_pointer_type input, const buffer_type &amp;buffer, MPI_Request rqst[4]) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::NestedGrids</name>
    <filename>structdg_1_1_nested_grids.html</filename>
    <templarg>class Geometry</templarg>
    <templarg>class Matrix</templarg>
    <templarg>class Container</templarg>
    <member kind="typedef">
      <type>Geometry</type>
      <name>geometry_type</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>aa9d17ee09ff77e1acfd7756bcaf2c793</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>matrix_type</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>afd2d97dad3c3b84a0c493226b226bfa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a39b75732776538c71450aa6463e154a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; Container &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>afc1a3dff1ea3badf4375123140f38d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Geometry</type>
      <name>geometry_type</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>aa9d17ee09ff77e1acfd7756bcaf2c793</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>matrix_type</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>afd2d97dad3c3b84a0c493226b226bfa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a39b75732776538c71450aa6463e154a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; Container &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>afc1a3dff1ea3badf4375123140f38d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NestedGrids</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a60f5dd0155b156d52ad32ff63b75ce8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NestedGrids</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>acf02648cc7404eb071caae1e144d6b5e</anchor>
      <arglist>(const Geometry &amp;grid, const unsigned stages, ContainerParams &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a53abf4269bd6da9a9a79a42a355bdcc8</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a3ccffb8c51b11398831af5201a7fd1b5</anchor>
      <arglist>(const ContainerType0 &amp;src, std::vector&lt; ContainerType0 &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ContainerType0 &gt;</type>
      <name>project</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a57e8040ccee77b51e13adad9f0c521e9</anchor>
      <arglist>(const ContainerType0 &amp;src) const</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>copyable</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a1069a223c824e7d7726c7f7eed4a3343</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>stages</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>aa944aaf6c1c04c9615d0135a86466617</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>num_stages</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>abecbc0cf857c4fff2ab8696c75068863</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Geometry &amp;</type>
      <name>grid</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>aba725273db65bb6db6ce13f572d83638</anchor>
      <arglist>(unsigned stage) const</arglist>
    </member>
    <member kind="function">
      <type>const MultiMatrix&lt; Matrix, Container &gt; &amp;</type>
      <name>interpolation</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a2f94337067ac181aa4a2bb913b4e1f0a</anchor>
      <arglist>(unsigned stage) const</arglist>
    </member>
    <member kind="function">
      <type>const MultiMatrix&lt; Matrix, Container &gt; &amp;</type>
      <name>projection</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a4b813831474f8004235f67cffe06ed84</anchor>
      <arglist>(unsigned stage) const</arglist>
    </member>
    <member kind="function">
      <type>Container &amp;</type>
      <name>x</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>adaa2ba9d8bb420a74f18962e4b4d1c2b</anchor>
      <arglist>(unsigned stage)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>x</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>aa41c7f44e61cbb2abc693a03d7cfa20c</anchor>
      <arglist>(unsigned stage) const</arglist>
    </member>
    <member kind="function">
      <type>Container &amp;</type>
      <name>r</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>aa3cc6f9ccea63b2edc31419f5aec15f7</anchor>
      <arglist>(unsigned stage)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>r</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>aac28e4dd73a0ac5f6ed1e1e06c307349</anchor>
      <arglist>(unsigned stage) const</arglist>
    </member>
    <member kind="function">
      <type>Container &amp;</type>
      <name>b</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a1f03d5f69aa3148c1023d0b930cb0d64</anchor>
      <arglist>(unsigned stage)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>b</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a2ebf031761474bb3e4e58731a003e0d4</anchor>
      <arglist>(unsigned stage) const</arglist>
    </member>
    <member kind="function">
      <type>Container &amp;</type>
      <name>w</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>ab1606352751e16691b96eac7a012ba15</anchor>
      <arglist>(unsigned stage)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>w</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a0dbc3d2f1f87ba428927c0c0e1576fa1</anchor>
      <arglist>(unsigned stage) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NestedGrids</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a60f5dd0155b156d52ad32ff63b75ce8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NestedGrids</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a7f746a1ed00e2af547b44eb5f61fc569</anchor>
      <arglist>(const Geometry &amp;grid, const unsigned stages, Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a3ccffb8c51b11398831af5201a7fd1b5</anchor>
      <arglist>(const ContainerType0 &amp;src, std::vector&lt; ContainerType0 &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ContainerType0 &gt;</type>
      <name>project</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a57e8040ccee77b51e13adad9f0c521e9</anchor>
      <arglist>(const ContainerType0 &amp;src) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>stages</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>aa944aaf6c1c04c9615d0135a86466617</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>num_stages</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>abecbc0cf857c4fff2ab8696c75068863</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Geometry &amp;</type>
      <name>grid</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>aba725273db65bb6db6ce13f572d83638</anchor>
      <arglist>(unsigned stage) const</arglist>
    </member>
    <member kind="function">
      <type>const MultiMatrix&lt; Matrix, Container &gt; &amp;</type>
      <name>interpolation</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a2f94337067ac181aa4a2bb913b4e1f0a</anchor>
      <arglist>(unsigned stage) const</arglist>
    </member>
    <member kind="function">
      <type>const MultiMatrix&lt; Matrix, Container &gt; &amp;</type>
      <name>projection</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a4b813831474f8004235f67cffe06ed84</anchor>
      <arglist>(unsigned stage) const</arglist>
    </member>
    <member kind="function">
      <type>Container &amp;</type>
      <name>x</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>adaa2ba9d8bb420a74f18962e4b4d1c2b</anchor>
      <arglist>(unsigned stage)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>x</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>aa41c7f44e61cbb2abc693a03d7cfa20c</anchor>
      <arglist>(unsigned stage) const</arglist>
    </member>
    <member kind="function">
      <type>Container &amp;</type>
      <name>r</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>aa3cc6f9ccea63b2edc31419f5aec15f7</anchor>
      <arglist>(unsigned stage)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>r</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>aac28e4dd73a0ac5f6ed1e1e06c307349</anchor>
      <arglist>(unsigned stage) const</arglist>
    </member>
    <member kind="function">
      <type>Container &amp;</type>
      <name>b</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a1f03d5f69aa3148c1023d0b930cb0d64</anchor>
      <arglist>(unsigned stage)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>b</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a2ebf031761474bb3e4e58731a003e0d4</anchor>
      <arglist>(unsigned stage) const</arglist>
    </member>
    <member kind="function">
      <type>Container &amp;</type>
      <name>w</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>ab1606352751e16691b96eac7a012ba15</anchor>
      <arglist>(unsigned stage)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>w</name>
      <anchorfile>structdg_1_1_nested_grids.html</anchorfile>
      <anchor>a0dbc3d2f1f87ba428927c0c0e1576fa1</anchor>
      <arglist>(unsigned stage) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::NoPolicyTag</name>
    <filename>structdg_1_1_no_policy_tag.html</filename>
  </compound>
  <compound kind="class">
    <name>dg::NoRoot1d</name>
    <filename>classdg_1_1_no_root1d.html</filename>
    <member kind="function">
      <type></type>
      <name>NoRoot1d</name>
      <anchorfile>classdg_1_1_no_root1d.html</anchorfile>
      <anchor>a6a8d832066aae20bd1aa4d7ee249e9c9</anchor>
      <arglist>(double x_min, double x_max, double wert_min, double wert_max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>classdg_1_1_no_root1d.html</anchorfile>
      <anchor>adb516cd73aa745af46425f22bcdae326</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>what</name>
      <anchorfile>classdg_1_1_no_root1d.html</anchorfile>
      <anchor>a3d7d24b68ddde5e5fe9c20f1e945e9c8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::NotATensorTag</name>
    <filename>structdg_1_1_not_a_tensor_tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>dg::OmpTag</name>
    <filename>structdg_1_1_omp_tag.html</filename>
    <base>dg::AnyPolicyTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::ONE</name>
    <filename>structdg_1_1_o_n_e.html</filename>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_o_n_e.html</anchorfile>
      <anchor>a12a3ae48e2e4118af510e261cf5ee3d1</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_o_n_e.html</anchorfile>
      <anchor>a09ee16efc03aafae90aa75feb2640015</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_o_n_e.html</anchorfile>
      <anchor>af7bb98cd1b1035692b83769a17de8f97</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::OneDimensionalTag</name>
    <filename>structdg_1_1_one_dimensional_tag.html</filename>
  </compound>
  <compound kind="class">
    <name>dg::Operator</name>
    <filename>classdg_1_1_operator.html</filename>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a322ecb3322b51f04d23178d05578cdd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operator</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>af341daeacc03a69bacaaf2335cd6f228</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operator</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a55e6f171312dcb8c5ffb11dc2afc7b7b</anchor>
      <arglist>(const unsigned n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operator</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>aea27e076660f16ed925b3460aff2a43f</anchor>
      <arglist>(const unsigned n, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operator</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>acbcb3aedb2690b1fe6026bdc99847585</anchor>
      <arglist>(InputIterator first, InputIterator last, std::enable_if_t&lt;!std::is_integral&lt; InputIterator &gt;::value &gt; *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operator</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a1eaf0ce3926e91737bf45681aa751618</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a01cb782df1d4d495640a87dff49d2d85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a0390d21ebd0be6ac0c5c1cdfc7be977d</anchor>
      <arglist>(const size_t i, const size_t j)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator()</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a9616d2c9b7c3c49ef33022bdb7ea9bce</anchor>
      <arglist>(const size_t i, const size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a27a50258a872a793ac1976e0264dca8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a44444c7825eaa78694f13ad3fed1f5e8</anchor>
      <arglist>(unsigned m, T val=T())</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; value_type &gt; &amp;</type>
      <name>data</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>abf3ec48b5962c26f747eebba1203fa53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap_lines</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a83eadeace6ca788f8fd06a3210674baa</anchor>
      <arglist>(const size_t i, const size_t k)</arglist>
    </member>
    <member kind="function">
      <type>Operator</type>
      <name>transpose</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>ae4121fa51cf89a4975c216617c287ac0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>ab4ecb3a5d8671e65f4ab5210d8c4745f</anchor>
      <arglist>(const Operator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a508b5ee0bfabfe96bbe7894f6d23fdf0</anchor>
      <arglist>(const Operator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Operator</type>
      <name>operator-</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a73556e06534d0076ae9eb69ef9009485</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Operator &amp;</type>
      <name>operator+=</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>aa19db562edf58eecc13b5f54afbfcbb4</anchor>
      <arglist>(const Operator &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>Operator &amp;</type>
      <name>operator-=</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a4613263c30304789d350cd07e90a0798</anchor>
      <arglist>(const Operator &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>Operator &amp;</type>
      <name>operator*=</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a12929db1a46e81e5cbcbaed1164c54d4</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="friend">
      <type>friend Operator</type>
      <name>operator+</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>aaa97ad076b4a15ea3ac251575424bd88</anchor>
      <arglist>(const Operator &amp;lhs, const Operator &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend Operator</type>
      <name>operator-</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a18222a08be1b4ab3ff9acc121cd428d3</anchor>
      <arglist>(const Operator &amp;lhs, const Operator &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend Operator</type>
      <name>operator*</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>aa0c12018483764a7d5bbbe9715ceeedb</anchor>
      <arglist>(const T &amp;value, const Operator &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend Operator</type>
      <name>operator*</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a59ac512dcfdd7d5cbaf91b99c9570f69</anchor>
      <arglist>(const Operator &amp;lhs, const T &amp;value)</arglist>
    </member>
    <member kind="friend">
      <type>friend Operator</type>
      <name>operator*</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a21c2941115cda0ff80533f6da58895eb</anchor>
      <arglist>(const Operator &amp;lhs, const Operator &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend Ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>abbf3f103512071de9068685876c06f17</anchor>
      <arglist>(Ostream &amp;os, const Operator &amp;mat)</arglist>
    </member>
    <member kind="friend">
      <type>friend Istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classdg_1_1_operator.html</anchorfile>
      <anchor>a34f3de717c3ed957d64c2c1fbe75def9</anchor>
      <arglist>(Istream &amp;is, Operator&lt; T &gt; &amp;mat)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::PairSum</name>
    <filename>structdg_1_1_pair_sum.html</filename>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_pair_sum.html</anchorfile>
      <anchor>ab235c2dc2d5d58eebb0fb709b76e770c</anchor>
      <arglist>(T a, T x, Ts... rest) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>dg::PCG</name>
    <filename>classdg_1_1_p_c_g.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>classdg_1_1_p_c_g.html</anchorfile>
      <anchor>abade4ea06ecf7bbfc6330468b9b229be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>classdg_1_1_p_c_g.html</anchorfile>
      <anchor>a5ef89010e9771cf4ccd5b3e9a8bcf17e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PCG</name>
      <anchorfile>classdg_1_1_p_c_g.html</anchorfile>
      <anchor>ac3afd38c9a2a85de924f2977cc49c5ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PCG</name>
      <anchorfile>classdg_1_1_p_c_g.html</anchorfile>
      <anchor>a54c6db9dbdcd557bf91bb47a8cb512e5</anchor>
      <arglist>(const ContainerType &amp;copyable, unsigned max_iterations)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max</name>
      <anchorfile>classdg_1_1_p_c_g.html</anchorfile>
      <anchor>aa89bc5710f1a7cecc887e70e84557744</anchor>
      <arglist>(unsigned new_max)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_max</name>
      <anchorfile>classdg_1_1_p_c_g.html</anchorfile>
      <anchor>ad04e0790b9a83d9c5e582dedea0daea3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>classdg_1_1_p_c_g.html</anchorfile>
      <anchor>a85d06136e39ebb7fc05a43fe3280563e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_verbose</name>
      <anchorfile>classdg_1_1_p_c_g.html</anchorfile>
      <anchor>a63ef33138778077af8d4c1713e6ba868</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_throw_on_fail</name>
      <anchorfile>classdg_1_1_p_c_g.html</anchorfile>
      <anchor>a44344f2e4a30a0c8a03cf50211d38c2d</anchor>
      <arglist>(bool throw_on_fail)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classdg_1_1_p_c_g.html</anchorfile>
      <anchor>aa7b457056e99d04a6e5ddd1252cd2a3c</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>solve</name>
      <anchorfile>classdg_1_1_p_c_g.html</anchorfile>
      <anchor>abd0183d69b4936e9eeaddbbb94f2623a</anchor>
      <arglist>(MatrixType &amp;&amp;A, ContainerType0 &amp;x, const ContainerType1 &amp;b, Preconditioner &amp;&amp;P, const ContainerType2 &amp;W, value_type eps=1e-12, value_type nrmb_correction=1, int test_frequency=1)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::PLUS</name>
    <filename>structdg_1_1_p_l_u_s.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>PLUS</name>
      <anchorfile>structdg_1_1_p_l_u_s.html</anchorfile>
      <anchor>a6046659f109429be9e83c4a344c14064</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_p_l_u_s.html</anchorfile>
      <anchor>aa11a1e9dd44eff890f79a84e69886ece</anchor>
      <arglist>(T x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Plus</name>
    <filename>structdg_1_1_plus.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>Plus</name>
      <anchorfile>structdg_1_1_plus.html</anchorfile>
      <anchor>a988e9a85c20bcb901ef3ac7a36e36dc9</anchor>
      <arglist>(T a)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_plus.html</anchorfile>
      <anchor>a6fbbd5df88b88493b954ad88ae3f1c6f</anchor>
      <arglist>(T &amp;y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::plus_equals</name>
    <filename>structdg_1_1plus__equals.html</filename>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1plus__equals.html</anchorfile>
      <anchor>a80a2d24a7e2147faeecf24601c8af310</anchor>
      <arglist>(T1 x, T2 &amp;y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::PointwiseDivide</name>
    <filename>structdg_1_1_pointwise_divide.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>PointwiseDivide</name>
      <anchorfile>structdg_1_1_pointwise_divide.html</anchorfile>
      <anchor>a5ef72df5865f09cc06bc8174faabf4cb</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_pointwise_divide.html</anchorfile>
      <anchor>a351be2cb94ff0daad54551c9f65cc26c</anchor>
      <arglist>(T y, T &amp;z) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_pointwise_divide.html</anchorfile>
      <anchor>a338b200878e55065c1b68bbeec308b63</anchor>
      <arglist>(T x, T y, T &amp;z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::PointwiseDot</name>
    <filename>structdg_1_1_pointwise_dot.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>PointwiseDot</name>
      <anchorfile>structdg_1_1_pointwise_dot.html</anchorfile>
      <anchor>aba5fe32e237b5047f01f376aabfb9a50</anchor>
      <arglist>(T a, T b, T g=(T) 0)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_pointwise_dot.html</anchorfile>
      <anchor>a79384fa96b63144ec7411afbba684752</anchor>
      <arglist>(T x, T y, T &amp;z) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_pointwise_dot.html</anchorfile>
      <anchor>a20d71ef43f144dc4ed4cd434e5ea9860</anchor>
      <arglist>(T x1, T x2, T x3, T &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_pointwise_dot.html</anchorfile>
      <anchor>afdab2a115ba5e76ca07d4e1844315896</anchor>
      <arglist>(T x1, T y1, T x2, T y2, T &amp;z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Poisson</name>
    <filename>structdg_1_1_poisson.html</filename>
    <templarg>class Geometry</templarg>
    <templarg>class Matrix</templarg>
    <templarg>class Container</templarg>
    <member kind="typedef">
      <type>Geometry</type>
      <name>geometry_type</name>
      <anchorfile>structdg_1_1_poisson.html</anchorfile>
      <anchor>a6f46f4565f5e67e358130e038c498e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>matrix_type</name>
      <anchorfile>structdg_1_1_poisson.html</anchorfile>
      <anchor>ab0e34617f4c99d4c4c250a84b1bf7593</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_poisson.html</anchorfile>
      <anchor>a9909d57fa755c917cc844a3774e2fbb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; Container &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_poisson.html</anchorfile>
      <anchor>a7db4d83bfc463585923b901fa0f895bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Poisson</name>
      <anchorfile>structdg_1_1_poisson.html</anchorfile>
      <anchor>a82113887e820079f6e9f9331c5065a42</anchor>
      <arglist>(const Geometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Poisson</name>
      <anchorfile>structdg_1_1_poisson.html</anchorfile>
      <anchor>a6239fcf7105953113b5d0136dbb4edf0</anchor>
      <arglist>(const Geometry &amp;g, bc bcx, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Poisson</name>
      <anchorfile>structdg_1_1_poisson.html</anchorfile>
      <anchor>a74677e77775fd0f46c8d9d949de36ab3</anchor>
      <arglist>(const Geometry &amp;g, bc bcxlhs, bc bcylhs, bc bcxrhs, bc bcyrhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_poisson.html</anchorfile>
      <anchor>ad60e506911c9c3a5c5b4fb26ed7e13ba</anchor>
      <arglist>(const ContainerType0 &amp;lhs, const ContainerType1 &amp;rhs, ContainerType2 &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_chi</name>
      <anchorfile>structdg_1_1_poisson.html</anchorfile>
      <anchor>a9aae656b490b396feceec683b95ac454</anchor>
      <arglist>(const ContainerType0 &amp;new_chi)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>dxlhs</name>
      <anchorfile>structdg_1_1_poisson.html</anchorfile>
      <anchor>a56ea8b8fa67bf3901db5f5f01957a05d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>dylhs</name>
      <anchorfile>structdg_1_1_poisson.html</anchorfile>
      <anchor>a24a5063e8ded6c0cb22486e32bd1e289</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>dxrhs</name>
      <anchorfile>structdg_1_1_poisson.html</anchorfile>
      <anchor>a46360aad162db6e9b12328ddb1c8b038</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>dyrhs</name>
      <anchorfile>structdg_1_1_poisson.html</anchorfile>
      <anchor>a7ad994bc019c6d15363369fde288d592</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::PolynomialHeaviside</name>
    <filename>structdg_1_1_polynomial_heaviside.html</filename>
    <member kind="function">
      <type></type>
      <name>PolynomialHeaviside</name>
      <anchorfile>structdg_1_1_polynomial_heaviside.html</anchorfile>
      <anchor>ad08cf2a8fc63430b7dbc5c3ae40cd7b3</anchor>
      <arglist>(double xb, double a, int sign=+1)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_polynomial_heaviside.html</anchorfile>
      <anchor>a55ead336198a70f3e8b12d410ae9d018</anchor>
      <arglist>(double x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::PolynomialRectangle</name>
    <filename>structdg_1_1_polynomial_rectangle.html</filename>
    <member kind="function">
      <type></type>
      <name>PolynomialRectangle</name>
      <anchorfile>structdg_1_1_polynomial_rectangle.html</anchorfile>
      <anchor>ae0cea1b98299a72a64ca9c7acc0a37bc</anchor>
      <arglist>(double xl, double al, double xr, double ar)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_polynomial_rectangle.html</anchorfile>
      <anchor>adf23a3c1728c0a9dd511e594f84662c6</anchor>
      <arglist>(double x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::POSVALUE</name>
    <filename>structdg_1_1_p_o_s_v_a_l_u_e.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_p_o_s_v_a_l_u_e.html</anchorfile>
      <anchor>ae30b9233ddd94a619806b9a8dbf02818</anchor>
      <arglist>(T x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::PsiPupil</name>
    <filename>structdg_1_1_psi_pupil.html</filename>
    <member kind="function">
      <type></type>
      <name>PsiPupil</name>
      <anchorfile>structdg_1_1_psi_pupil.html</anchorfile>
      <anchor>a62a3822519d49540e9faee24607df3f1</anchor>
      <arglist>(double psimax)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_psi_pupil.html</anchorfile>
      <anchor>a9ff61d040aa5a11858337a5540144a5a</anchor>
      <arglist>(double psi) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Pupil</name>
    <filename>structdg_1_1_pupil.html</filename>
    <member kind="function">
      <type></type>
      <name>Pupil</name>
      <anchorfile>structdg_1_1_pupil.html</anchorfile>
      <anchor>a479e782efe8f97f50d4ed30f27b05ef3</anchor>
      <arglist>(double psimax)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_pupil.html</anchorfile>
      <anchor>a68347a056c290c5a05da9e5e3ccba631</anchor>
      <arglist>(double psi) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealCartesianGrid2d</name>
    <filename>structdg_1_1_real_cartesian_grid2d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealGeometry2d</base>
    <member kind="function">
      <type></type>
      <name>RealCartesianGrid2d</name>
      <anchorfile>structdg_1_1_real_cartesian_grid2d.html</anchorfile>
      <anchor>a910bdcf88ea8a97fd983fd03c9a9b02d</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, unsigned n, unsigned Nx, unsigned Ny, bc bcx=PER, bc bcy=PER)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealCartesianGrid2d</name>
      <anchorfile>structdg_1_1_real_cartesian_grid2d.html</anchorfile>
      <anchor>ad7d0d8e4abe6acad8092de500e8c13d3</anchor>
      <arglist>(const dg::RealGrid2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealCartesianGrid2d&lt; real_type &gt; *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_cartesian_grid2d.html</anchorfile>
      <anchor>ac1a3e2613821aba8412731a92429e124</anchor>
      <arglist>() const override final</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealCartesianGrid3d</name>
    <filename>structdg_1_1_real_cartesian_grid3d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealProductGeometry3d</base>
    <member kind="typedef">
      <type>RealCartesianGrid2d&lt; real_type &gt;</type>
      <name>perpendicular_grid</name>
      <anchorfile>structdg_1_1_real_cartesian_grid3d.html</anchorfile>
      <anchor>a6983abc41baf73627afdb1e44033a57b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealCartesianGrid3d</name>
      <anchorfile>structdg_1_1_real_cartesian_grid3d.html</anchorfile>
      <anchor>aeae4e0d7fcf43711849bd69506c5aa12</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type z0, real_type z1, unsigned n, unsigned Nx, unsigned Ny, unsigned Nz, bc bcx=PER, bc bcy=PER, bc bcz=PER)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealCartesianGrid3d</name>
      <anchorfile>structdg_1_1_real_cartesian_grid3d.html</anchorfile>
      <anchor>a86fca11d5eb8ea53671ae161042ee6e6</anchor>
      <arglist>(const dg::RealGrid3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealCartesianGrid3d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_cartesian_grid3d.html</anchorfile>
      <anchor>a94f56f706d5f0b890ec4e09ca6376ce4</anchor>
      <arglist>() const override final</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealCartesianGridX2d</name>
    <filename>structdg_1_1_real_cartesian_grid_x2d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealGeometryX2d</base>
    <member kind="function">
      <type></type>
      <name>RealCartesianGridX2d</name>
      <anchorfile>structdg_1_1_real_cartesian_grid_x2d.html</anchorfile>
      <anchor>af7f920a911e99d79603d3a7e68730f0f</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type fx, real_type fy, unsigned n, unsigned Nx, unsigned Ny, bc bcx=PER, bc bcy=PER)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealCartesianGridX2d</name>
      <anchorfile>structdg_1_1_real_cartesian_grid_x2d.html</anchorfile>
      <anchor>aa5e73c26b49e95dcbe4034cf1047ecef</anchor>
      <arglist>(const dg::GridX2d &amp;g)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealCartesianGridX2d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_cartesian_grid_x2d.html</anchorfile>
      <anchor>ae7cc05e48021b78dd1aea2ba2cf5f313</anchor>
      <arglist>() const override final</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealCartesianGridX3d</name>
    <filename>structdg_1_1_real_cartesian_grid_x3d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealGeometryX3d</base>
    <member kind="function">
      <type></type>
      <name>RealCartesianGridX3d</name>
      <anchorfile>structdg_1_1_real_cartesian_grid_x3d.html</anchorfile>
      <anchor>ae55b5b7730924cdda2758467c3459132</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type z0, real_type z1, real_type fx, real_type fy, unsigned n, unsigned Nx, unsigned Ny, unsigned Nz, bc bcx=PER, bc bcy=PER, bc bcz=PER)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealCartesianGridX3d</name>
      <anchorfile>structdg_1_1_real_cartesian_grid_x3d.html</anchorfile>
      <anchor>a252d5079d9f9f996526e3f30ba6b12cc</anchor>
      <arglist>(const dg::GridX3d &amp;g)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealCartesianGridX3d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_cartesian_grid_x3d.html</anchorfile>
      <anchor>a836beccd89004efbcbaa3dbd24e992a9</anchor>
      <arglist>() const override final</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealCartesianMPIGrid2d</name>
    <filename>structdg_1_1_real_cartesian_m_p_i_grid2d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealMPIGeometry2d</base>
    <member kind="function">
      <type></type>
      <name>RealCartesianMPIGrid2d</name>
      <anchorfile>structdg_1_1_real_cartesian_m_p_i_grid2d.html</anchorfile>
      <anchor>a63d6e0c9e19ad5eda247d93152baec75</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, unsigned n, unsigned Nx, unsigned Ny, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealCartesianMPIGrid2d</name>
      <anchorfile>structdg_1_1_real_cartesian_m_p_i_grid2d.html</anchorfile>
      <anchor>a3665e030b6b70a3f6500a696180a4207</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, unsigned n, unsigned Nx, unsigned Ny, bc bcx, bc bcy, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealCartesianMPIGrid2d</name>
      <anchorfile>structdg_1_1_real_cartesian_m_p_i_grid2d.html</anchorfile>
      <anchor>a9f084e27169fdc57fc55b8d85130b559</anchor>
      <arglist>(const dg::RealMPIGrid2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealCartesianMPIGrid2d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_cartesian_m_p_i_grid2d.html</anchorfile>
      <anchor>a1d6a86fcfb077e2ddadcd56d3af96a80</anchor>
      <arglist>() const override final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealCartesianGrid2d&lt; real_type &gt; *</type>
      <name>global_geometry</name>
      <anchorfile>structdg_1_1_real_cartesian_m_p_i_grid2d.html</anchorfile>
      <anchor>a765af18a4828878b62edc7c51b16c76f</anchor>
      <arglist>() const override final</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealCartesianMPIGrid3d</name>
    <filename>structdg_1_1_real_cartesian_m_p_i_grid3d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealProductMPIGeometry3d</base>
    <member kind="typedef">
      <type>RealCartesianMPIGrid2d&lt; real_type &gt;</type>
      <name>perpendicular_grid</name>
      <anchorfile>structdg_1_1_real_cartesian_m_p_i_grid3d.html</anchorfile>
      <anchor>a39489d7c4abd5a7527883cea781a2b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealCartesianMPIGrid3d</name>
      <anchorfile>structdg_1_1_real_cartesian_m_p_i_grid3d.html</anchorfile>
      <anchor>a18bbd3a3ae364f4917eaabcff9ab67b4</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type z0, real_type z1, unsigned n, unsigned Nx, unsigned Ny, unsigned Nz, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealCartesianMPIGrid3d</name>
      <anchorfile>structdg_1_1_real_cartesian_m_p_i_grid3d.html</anchorfile>
      <anchor>a84f2d0cf256adccf1a462a77d1967683</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type z0, real_type z1, unsigned n, unsigned Nx, unsigned Ny, unsigned Nz, bc bcx, bc bcy, bc bcz, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealCartesianMPIGrid3d</name>
      <anchorfile>structdg_1_1_real_cartesian_m_p_i_grid3d.html</anchorfile>
      <anchor>acfbaddfa7561bd283b452b7bbaa6f012</anchor>
      <arglist>(const dg::RealMPIGrid3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealCartesianMPIGrid3d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_cartesian_m_p_i_grid3d.html</anchorfile>
      <anchor>a5a27e3dbe17abd119006178b1ece6ede</anchor>
      <arglist>() const override final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealCartesianGrid3d&lt; real_type &gt; *</type>
      <name>global_geometry</name>
      <anchorfile>structdg_1_1_real_cartesian_m_p_i_grid3d.html</anchorfile>
      <anchor>aae342110c1552f9dbc6f4b54eed36801</anchor>
      <arglist>() const override final</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealCartesianRefinedGrid2d</name>
    <filename>structdg_1_1_real_cartesian_refined_grid2d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealGeometry2d</base>
    <member kind="function">
      <type></type>
      <name>RealCartesianRefinedGrid2d</name>
      <anchorfile>structdg_1_1_real_cartesian_refined_grid2d.html</anchorfile>
      <anchor>a641c29d2ded34ce7c83dfe16b07e48a2</anchor>
      <arglist>(const aRealRefinement1d&lt; real_type &gt; &amp;refX, const aRealRefinement1d&lt; real_type &gt; &amp;refY, real_type x0, real_type x1, real_type y0, real_type y1, unsigned n, unsigned Nx, unsigned Ny, bc bcx=dg::PER, bc bcy=dg::PER)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealCartesianRefinedGrid2d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_cartesian_refined_grid2d.html</anchorfile>
      <anchor>aeb5683b565f186afde8c59b9ec6d3482</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealCartesianRefinedGrid3d</name>
    <filename>structdg_1_1_real_cartesian_refined_grid3d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealGeometry3d</base>
    <member kind="function">
      <type></type>
      <name>RealCartesianRefinedGrid3d</name>
      <anchorfile>structdg_1_1_real_cartesian_refined_grid3d.html</anchorfile>
      <anchor>a2a185ba06e87cb8d3785a35d56f4a62f</anchor>
      <arglist>(const aRealRefinement1d&lt; real_type &gt; &amp;refX, const aRealRefinement1d&lt; real_type &gt; &amp;refY, aRealRefinement1d&lt; real_type &gt; &amp;refZ, real_type x0, real_type x1, real_type y0, real_type y1, real_type z0, real_type z1, unsigned n, unsigned Nx, unsigned Ny, unsigned Nz, bc bcx=dg::PER, bc bcy=dg::PER, bc bcz=dg::PER)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealCartesianRefinedGrid3d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_cartesian_refined_grid3d.html</anchorfile>
      <anchor>a3b9815466b5f27ea752e80b314d3eaa7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealCartesianRefinedGridX2d</name>
    <filename>structdg_1_1_real_cartesian_refined_grid_x2d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealGeometryX2d</base>
    <member kind="function">
      <type></type>
      <name>RealCartesianRefinedGridX2d</name>
      <anchorfile>structdg_1_1_real_cartesian_refined_grid_x2d.html</anchorfile>
      <anchor>a7c234136fd1aa18c523dc6d0f72def7f</anchor>
      <arglist>(const aRealRefinementX2d&lt; real_type &gt; &amp;ref, real_type x0, real_type x1, real_type y0, real_type y1, real_type fx, real_type fy, unsigned n, unsigned Nx, unsigned Ny, bc bcx=dg::PER, bc bcy=dg::PER)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealCartesianRefinedGridX2d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_cartesian_refined_grid_x2d.html</anchorfile>
      <anchor>afa4f832961eea6426df5275931495736</anchor>
      <arglist>() const override final</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealCartesianRefinedGridX3d</name>
    <filename>structdg_1_1_real_cartesian_refined_grid_x3d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealGeometryX3d</base>
    <member kind="function">
      <type></type>
      <name>RealCartesianRefinedGridX3d</name>
      <anchorfile>structdg_1_1_real_cartesian_refined_grid_x3d.html</anchorfile>
      <anchor>a7f36598b602e9d0d382356d59a724b26</anchor>
      <arglist>(const aRealRefinementX2d&lt; real_type &gt; &amp;ref, real_type x0, real_type x1, real_type y0, real_type y1, real_type z0, real_type z1, real_type fx, real_type fy, unsigned n, unsigned Nx, unsigned Ny, unsigned Nz, bc bcx=dg::PER, bc bcy=dg::PER, bc bcz=dg::PER)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealCartesianRefinedGridX3d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_cartesian_refined_grid_x3d.html</anchorfile>
      <anchor>acd98e2cadf45b83a0cdc16ea244f5768</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealCylindricalGrid3d</name>
    <filename>structdg_1_1_real_cylindrical_grid3d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealProductGeometry3d</base>
    <member kind="typedef">
      <type>RealCartesianGrid2d&lt; real_type &gt;</type>
      <name>perpendicular_grid</name>
      <anchorfile>structdg_1_1_real_cylindrical_grid3d.html</anchorfile>
      <anchor>ad96544e0664e3a56941dfa0f231a376a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealCylindricalGrid3d</name>
      <anchorfile>structdg_1_1_real_cylindrical_grid3d.html</anchorfile>
      <anchor>aa10aebb2bb96d7792260905a32d73a56</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type z0, real_type z1, unsigned n, unsigned Nx, unsigned Ny, unsigned Nz, bc bcx=PER, bc bcy=PER, bc bcz=PER)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealCylindricalGrid3d *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_cylindrical_grid3d.html</anchorfile>
      <anchor>a928365eef0ff7d6621f5cc0299679826</anchor>
      <arglist>() const override final</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealCylindricalMPIGrid3d</name>
    <filename>structdg_1_1_real_cylindrical_m_p_i_grid3d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealProductMPIGeometry3d</base>
    <member kind="typedef">
      <type>RealCartesianMPIGrid2d&lt; real_type &gt;</type>
      <name>perpendicular_grid</name>
      <anchorfile>structdg_1_1_real_cylindrical_m_p_i_grid3d.html</anchorfile>
      <anchor>a64b27f3a9c1afed1d0a52e4f9c883ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealCylindricalMPIGrid3d</name>
      <anchorfile>structdg_1_1_real_cylindrical_m_p_i_grid3d.html</anchorfile>
      <anchor>a9abead75be109b711a523bd062038f94</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type z0, real_type z1, unsigned n, unsigned Nx, unsigned Ny, unsigned Nz, bc bcx, bc bcy, bc bcz, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealCylindricalMPIGrid3d</name>
      <anchorfile>structdg_1_1_real_cylindrical_m_p_i_grid3d.html</anchorfile>
      <anchor>ada3c8bca230adf94e1fa3b39632b8212</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type z0, real_type z1, unsigned n, unsigned Nx, unsigned Ny, unsigned Nz, bc bcx, bc bcy, MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealCylindricalMPIGrid3d&lt; real_type &gt; *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_cylindrical_m_p_i_grid3d.html</anchorfile>
      <anchor>ab600ea2c54d0ff4f236049df75988261</anchor>
      <arglist>() const override final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealCylindricalGrid3d&lt; real_type &gt; *</type>
      <name>global_geometry</name>
      <anchorfile>structdg_1_1_real_cylindrical_m_p_i_grid3d.html</anchorfile>
      <anchor>a40b7fb42c5371bb396ad3596a635c013</anchor>
      <arglist>() const override final</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealEquidistRefinement</name>
    <filename>structdg_1_1_real_equidist_refinement.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealRefinement1d</base>
    <member kind="function">
      <type></type>
      <name>RealEquidistRefinement</name>
      <anchorfile>structdg_1_1_real_equidist_refinement.html</anchorfile>
      <anchor>af874b23d31c408bd9b53c3a8f713bd58</anchor>
      <arglist>(unsigned add_x, unsigned node, unsigned howmany=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealEquidistRefinement *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_equidist_refinement.html</anchorfile>
      <anchor>afcec9a21c19de083eadc8f72cfd4c20b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealEquidistXRefinement</name>
    <filename>structdg_1_1_real_equidist_x_refinement.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealRefinementX2d</base>
    <member kind="function">
      <type></type>
      <name>RealEquidistXRefinement</name>
      <anchorfile>structdg_1_1_real_equidist_x_refinement.html</anchorfile>
      <anchor>ac270d4f7b1cd09eeed8f2e9d20d80dc4</anchor>
      <arglist>(unsigned add_x, unsigned add_y, unsigned howmanyX=1, unsigned howmanyY=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealEquidistXRefinement *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_equidist_x_refinement.html</anchorfile>
      <anchor>ab618a3c7ac1d1bff1f78c4bd71976f60</anchor>
      <arglist>() const override final</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealExponentialRefinement</name>
    <filename>structdg_1_1_real_exponential_refinement.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealRefinement1d</base>
    <member kind="function">
      <type></type>
      <name>RealExponentialRefinement</name>
      <anchorfile>structdg_1_1_real_exponential_refinement.html</anchorfile>
      <anchor>ab0db54635a79c4512c9df9140ce95bf7</anchor>
      <arglist>(unsigned add_x, unsigned node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealExponentialRefinement *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_exponential_refinement.html</anchorfile>
      <anchor>a6a603cd8143a963054b2be3bd787610a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealExponentialXRefinement</name>
    <filename>structdg_1_1_real_exponential_x_refinement.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealRefinementX2d</base>
    <member kind="function">
      <type></type>
      <name>RealExponentialXRefinement</name>
      <anchorfile>structdg_1_1_real_exponential_x_refinement.html</anchorfile>
      <anchor>a5f679ab6d9f4129121736ca510455bc4</anchor>
      <arglist>(unsigned add_x, unsigned add_y, unsigned howmanyX=1, unsigned howmanyY=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealExponentialXRefinement *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_exponential_x_refinement.html</anchorfile>
      <anchor>ad5f9722bfc7434333ecb7c59997c841b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealFemRefinement</name>
    <filename>structdg_1_1_real_fem_refinement.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealRefinement1d</base>
    <member kind="function">
      <type></type>
      <name>RealFemRefinement</name>
      <anchorfile>structdg_1_1_real_fem_refinement.html</anchorfile>
      <anchor>a24bae30df09e74e1989da11d2939cd95</anchor>
      <arglist>(unsigned multiple)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealFemRefinement *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_fem_refinement.html</anchorfile>
      <anchor>a40cb34fadf3360c79661a2239d1233fc</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealGrid1d</name>
    <filename>structdg_1_1_real_grid1d.html</filename>
    <templarg>class real_type</templarg>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>a88b3efe6b0dc8c53be1b182e043930ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>host_vector</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>adcbba2e7de091a8d4ef99815196d9685</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealGrid1d&lt; real_type &gt;</type>
      <name>host_grid</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>a5b316c83e94baa26955b68a7ab6c9f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealGrid1d</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>a7ceb9c6d90f15a14ea47cf0c0754fbe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealGrid1d</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>adfdbea868da5cf99188cb69318df8f1e</anchor>
      <arglist>(real_type x0, real_type x1, unsigned n, unsigned N, bc bcx=PER)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>x0</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>ab59a01f31f70589c28a396f669d29337</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>x1</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>aa966d5f133b54b947fd6563a11ddedeb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>lx</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>a47609d35f11ca87e8c824b96c28da072</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>h</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>a0bcaba1559271982149ee2c56563c0a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>N</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>aad2b1983fdc91626a165b05db68a83d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>n</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>a1c631f2939de2618df8b852056f3428d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcx</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>a0e9b382200cb203ff232706210ca8d8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>af672bbef35a1cbb3ac06d9b93b20eecc</anchor>
      <arglist>(real_type x0, real_type x1, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>a3c5c7d6cc366a4561a1405526a3ba25a</anchor>
      <arglist>(unsigned n, unsigned N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>a5b73685504772096fe8ae9902eaf7ca9</anchor>
      <arglist>(real_type x0, real_type x1, unsigned n, unsigned N, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>a51307e35b5bae9592b29b4669f088b8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DLT&lt; real_type &gt; &amp;</type>
      <name>dlt</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>a4d2b0f6065c27ffe4efe38944d6f2c57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>ac48d2455dcb73a58798baf8c04caabd9</anchor>
      <arglist>(std::ostream &amp;os=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shift</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>a4df356851e887b0ba00f1dbc9b609d42</anchor>
      <arglist>(bool &amp;negative, real_type &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shift</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>a6cf21531cd34636c6d538183ebea3a02</anchor>
      <arglist>(bool &amp;negative, real_type &amp;x, bc bcx) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>structdg_1_1_real_grid1d.html</anchorfile>
      <anchor>ad39b309f33dd338e6f5f4f3fc5f9d614</anchor>
      <arglist>(real_type x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealGrid2d</name>
    <filename>structdg_1_1_real_grid2d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealTopology2d</base>
    <member kind="function">
      <type></type>
      <name>RealGrid2d</name>
      <anchorfile>structdg_1_1_real_grid2d.html</anchorfile>
      <anchor>ad0d8de5efa9757845b63dfd86de1334e</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, unsigned n, unsigned Nx, unsigned Ny, bc bcx=PER, bc bcy=PER)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealGrid2d</name>
      <anchorfile>structdg_1_1_real_grid2d.html</anchorfile>
      <anchor>a051177b0c936b5297748e3595702b59b</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;gx, const RealGrid1d&lt; real_type &gt; &amp;gy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealGrid2d</name>
      <anchorfile>structdg_1_1_real_grid2d.html</anchorfile>
      <anchor>a44b57fe6446caf0709e073f61fa3dc5a</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealGrid3d</name>
    <filename>structdg_1_1_real_grid3d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealTopology3d</base>
    <member kind="function">
      <type></type>
      <name>RealGrid3d</name>
      <anchorfile>structdg_1_1_real_grid3d.html</anchorfile>
      <anchor>a6c05091cda47b2b7fdf2f6e301d00f34</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type z0, real_type z1, unsigned n, unsigned Nx, unsigned Ny, unsigned Nz, bc bcx=PER, bc bcy=PER, bc bcz=PER)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealGrid3d</name>
      <anchorfile>structdg_1_1_real_grid3d.html</anchorfile>
      <anchor>a435f583e0209ddf6db2d659faf552d34</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;gx, const RealGrid1d&lt; real_type &gt; &amp;gy, const RealGrid1d&lt; real_type &gt; &amp;gz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealGrid3d</name>
      <anchorfile>structdg_1_1_real_grid3d.html</anchorfile>
      <anchor>a6abdc509e81103fe35933fc9aca4eccc</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealGridX1d</name>
    <filename>structdg_1_1_real_grid_x1d.html</filename>
    <templarg>class real_type</templarg>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>a57a105d7214d9bc2b2173ec155059ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>host_vector</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>ac45708ed2eb1eaae622aa35e6ebe30c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealGridX1d&lt; real_type &gt;</type>
      <name>host_grid</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>aa2e0eb9873451885d66e97df1a535b96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealGridX1d</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>a0e7f34fe6c88dda18f6cc1c71c1392db</anchor>
      <arglist>(real_type x0, real_type x1, real_type f, unsigned n, unsigned N, bc bcx=NEU)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>x0</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>a9ed8df1f727d761c68272f302d30fd87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>x1</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>ab1da6ef2467e3c625aac4fbdc55a9c99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>ab2603ea643e937104408c0f26d6b50bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>lx</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>ac554dc786efd701a8c4d662acdf69431</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>h</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>ac622d210bdc58772bd0dce4692b8e478</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>N</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>a8e3567e58f027c14cf169fd63710d7bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>outer_N</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>a848311bc41df382ce7ddae78b6898f32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>inner_N</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>a26c44338cf80623a6aa9db0abba4beee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>n</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>aa57a218e8b0e9467a5633fc46f54f265</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bc</type>
      <name>bcx</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>a3fd5e18bbbe420ba5a98fd11311d825c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>a620e29433cfe1488687fad0f4bcb4f74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>a9d6e3c0c071389ba14fe3b91468b97a1</anchor>
      <arglist>(std::ostream &amp;os=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>const DLT&lt; real_type &gt; &amp;</type>
      <name>dlt</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>a34fb0f84b2c91cba13a0077f79339fef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealGrid1d&lt; real_type &gt;</type>
      <name>grid</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>af23c08cb78b39fd94d82c9ac091a7ca9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shift_topologic</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>a98f4f229b56a973e8ebd4442466f2dc7</anchor>
      <arglist>(real_type x0, real_type &amp;x1) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>structdg_1_1_real_grid_x1d.html</anchorfile>
      <anchor>a3ea0d54654b61e5cbc354cefea6b6035</anchor>
      <arglist>(real_type x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealGridX2d</name>
    <filename>structdg_1_1_real_grid_x2d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealTopologyX2d</base>
    <member kind="function">
      <type></type>
      <name>RealGridX2d</name>
      <anchorfile>structdg_1_1_real_grid_x2d.html</anchorfile>
      <anchor>ac2099b422ffd9b3ab6460ebaebf56f9b</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type fx, real_type fy, unsigned n, unsigned Nx, unsigned Ny, bc bcx=PER, bc bcy=NEU)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealGridX2d</name>
      <anchorfile>structdg_1_1_real_grid_x2d.html</anchorfile>
      <anchor>a2872605b6e9c30d4baef184de4765674</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealGridX3d</name>
    <filename>structdg_1_1_real_grid_x3d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealTopologyX3d</base>
    <member kind="function">
      <type></type>
      <name>RealGridX3d</name>
      <anchorfile>structdg_1_1_real_grid_x3d.html</anchorfile>
      <anchor>a799e70292f837615f169be40a1925212</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type z0, real_type z1, real_type fx, real_type fy, unsigned n, unsigned Nx, unsigned Ny, unsigned Nz, bc bcx=PER, bc bcy=NEU, bc bcz=PER)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealGridX3d</name>
      <anchorfile>structdg_1_1_real_grid_x3d.html</anchorfile>
      <anchor>add6b6452d4475cbf46582253220061b7</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealIdentityRefinement</name>
    <filename>structdg_1_1_real_identity_refinement.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealRefinement1d</base>
    <member kind="function" virtualness="virtual">
      <type>virtual RealIdentityRefinement *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_identity_refinement.html</anchorfile>
      <anchor>a014fd668d130383481b9fe88f8d1e0bb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealIdentityXRefinement</name>
    <filename>structdg_1_1_real_identity_x_refinement.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealRefinementX2d</base>
    <member kind="function" virtualness="virtual">
      <type>virtual RealIdentityXRefinement *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_identity_x_refinement.html</anchorfile>
      <anchor>a1ba584ef8e9c2801299c5e14f24822e8</anchor>
      <arglist>() const override final</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealLinearRefinement</name>
    <filename>structdg_1_1_real_linear_refinement.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealRefinement1d</base>
    <member kind="function">
      <type></type>
      <name>RealLinearRefinement</name>
      <anchorfile>structdg_1_1_real_linear_refinement.html</anchorfile>
      <anchor>a7dae8b890dc6766204ec5e31af09b7cb</anchor>
      <arglist>(unsigned multiple)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealLinearRefinement *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_real_linear_refinement.html</anchorfile>
      <anchor>afff4a945bd65f849d19e131565d30ff4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealMPIGrid2d</name>
    <filename>structdg_1_1_real_m_p_i_grid2d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealMPITopology2d</base>
    <member kind="function">
      <type></type>
      <name>RealMPIGrid2d</name>
      <anchorfile>structdg_1_1_real_m_p_i_grid2d.html</anchorfile>
      <anchor>a6e1e1fb5597312e40859ca477dff2c02</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, unsigned n, unsigned Nx, unsigned Ny, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealMPIGrid2d</name>
      <anchorfile>structdg_1_1_real_m_p_i_grid2d.html</anchorfile>
      <anchor>a95d23008f7d96289ec8eb864ac95ef24</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, unsigned n, unsigned Nx, unsigned Ny, bc bcx, bc bcy, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealMPIGrid2d</name>
      <anchorfile>structdg_1_1_real_m_p_i_grid2d.html</anchorfile>
      <anchor>a72578b795d7a102ca7cb80d59a2a675f</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RealMPIGrid3d</name>
    <filename>structdg_1_1_real_m_p_i_grid3d.html</filename>
    <templarg>class real_type</templarg>
    <base>dg::aRealMPITopology3d</base>
    <member kind="function">
      <type></type>
      <name>RealMPIGrid3d</name>
      <anchorfile>structdg_1_1_real_m_p_i_grid3d.html</anchorfile>
      <anchor>a36a2b586dca0be98c72d0cbb3ba99cf4</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type z0, real_type z1, unsigned n, unsigned Nx, unsigned Ny, unsigned Nz, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealMPIGrid3d</name>
      <anchorfile>structdg_1_1_real_m_p_i_grid3d.html</anchorfile>
      <anchor>a235f729aaa2970298f1879a42910ff0e</anchor>
      <arglist>(real_type x0, real_type x1, real_type y0, real_type y1, real_type z0, real_type z1, unsigned n, unsigned Nx, unsigned Ny, unsigned Nz, bc bcx, bc bcy, bc bcz, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealMPIGrid3d</name>
      <anchorfile>structdg_1_1_real_m_p_i_grid3d.html</anchorfile>
      <anchor>ae7b7f5321b58c46b4e698ac2d5a995f0</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RecursiveVectorTag</name>
    <filename>structdg_1_1_recursive_vector_tag.html</filename>
    <base>dg::AnyVectorTag</base>
  </compound>
  <compound kind="class">
    <name>dg::RefinedElliptic</name>
    <filename>classdg_1_1_refined_elliptic.html</filename>
    <templarg>class Geometry</templarg>
    <templarg>class IMatrix</templarg>
    <templarg>class Matrix</templarg>
    <templarg>class Container</templarg>
    <member kind="typedef">
      <type>Geometry</type>
      <name>geometry_type</name>
      <anchorfile>classdg_1_1_refined_elliptic.html</anchorfile>
      <anchor>a48c7728016f89a88e3d7ddbb3b15b0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>matrix_type</name>
      <anchorfile>classdg_1_1_refined_elliptic.html</anchorfile>
      <anchor>ab82ed2ecf0d5bceaf76b40dff884135a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container</type>
      <name>container_type</name>
      <anchorfile>classdg_1_1_refined_elliptic.html</anchorfile>
      <anchor>a93d58cb13096de4d2a7f6f847092ca2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_value_type&lt; Container &gt;</type>
      <name>value_type</name>
      <anchorfile>classdg_1_1_refined_elliptic.html</anchorfile>
      <anchor>a50877a4197c77cfc7bc63b2b917710b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefinedElliptic</name>
      <anchorfile>classdg_1_1_refined_elliptic.html</anchorfile>
      <anchor>ab8107fa48b9c805cb8ee893ee44807e6</anchor>
      <arglist>(const Geometry &amp;g_coarse, const Geometry &amp;g_fine, direction dir=forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefinedElliptic</name>
      <anchorfile>classdg_1_1_refined_elliptic.html</anchorfile>
      <anchor>ae4285efca8a7b3bf8cf3103329331d02</anchor>
      <arglist>(const Geometry &amp;g_coarse, const Geometry &amp;g_fine, bc bcx, bc bcy, direction dir=forward)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_chi</name>
      <anchorfile>classdg_1_1_refined_elliptic.html</anchorfile>
      <anchor>aece3498bc1981baca8027963ed145d0f</anchor>
      <arglist>(const ContainerType0 &amp;chi)</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>weights</name>
      <anchorfile>classdg_1_1_refined_elliptic.html</anchorfile>
      <anchor>a0e6746350be480b2a1fbd4369c9b5ea7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>precond</name>
      <anchorfile>classdg_1_1_refined_elliptic.html</anchorfile>
      <anchor>a86186a6c6166e40d29ee6a7ca60070d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>classdg_1_1_refined_elliptic.html</anchorfile>
      <anchor>ad821b5d68ff20272e2c94acc8a0cd142</anchor>
      <arglist>(const ContainerType0 &amp;x, ContainerType1 &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::RowColDistMat</name>
    <filename>structdg_1_1_row_col_dist_mat.html</filename>
    <templarg>class LocalMatrixInner</templarg>
    <templarg>class LocalMatrixOuter</templarg>
    <templarg>class Collective</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; LocalMatrixInner &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_row_col_dist_mat.html</anchorfile>
      <anchor>a403442a8360abb63eef362d6ff33fb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowColDistMat</name>
      <anchorfile>structdg_1_1_row_col_dist_mat.html</anchorfile>
      <anchor>aaa4284e5e09774695761bd1f79642445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowColDistMat</name>
      <anchorfile>structdg_1_1_row_col_dist_mat.html</anchorfile>
      <anchor>ac1167c2040b070df42643fef4648f43b</anchor>
      <arglist>(const LocalMatrixInner &amp;inside, const LocalMatrixOuter &amp;outside, const Collective &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowColDistMat</name>
      <anchorfile>structdg_1_1_row_col_dist_mat.html</anchorfile>
      <anchor>a3e60395af1bfd71d925af6e704405a50</anchor>
      <arglist>(const RowColDistMat&lt; OtherMatrixInner, OtherMatrixOuter, OtherCollective &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>const LocalMatrixInner &amp;</type>
      <name>inner_matrix</name>
      <anchorfile>structdg_1_1_row_col_dist_mat.html</anchorfile>
      <anchor>a0834b4e266d319926585239c5a5c34d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalMatrixOuter &amp;</type>
      <name>outer_matrix</name>
      <anchorfile>structdg_1_1_row_col_dist_mat.html</anchorfile>
      <anchor>a747e60dba981e7d0ba5c0a2af0ddf3e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Collective &amp;</type>
      <name>collective</name>
      <anchorfile>structdg_1_1_row_col_dist_mat.html</anchorfile>
      <anchor>ab4f5f9a7aa445d419afa8e10146b7fbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_row_col_dist_mat.html</anchorfile>
      <anchor>a41a5a4b65cb34798c693322f7679d13f</anchor>
      <arglist>(value_type alpha, const ContainerType1 &amp;x, value_type beta, ContainerType2 &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>structdg_1_1_row_col_dist_mat.html</anchorfile>
      <anchor>abfafc42df2ab3bfbbb01ebeac6088b43</anchor>
      <arglist>(const ContainerType1 &amp;x, ContainerType2 &amp;y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Scal</name>
    <filename>structdg_1_1_scal.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>Scal</name>
      <anchorfile>structdg_1_1_scal.html</anchorfile>
      <anchor>a34723e85aed9837d32198c6ead6b5cb7</anchor>
      <arglist>(T a)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_scal.html</anchorfile>
      <anchor>a1d74a62b803d1b42ec5b19f000f854c0</anchor>
      <arglist>(T &amp;y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ScalarTag</name>
    <filename>structdg_1_1_scalar_tag.html</filename>
    <base>dg::AnyScalarTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::SelfMadeMatrixTag</name>
    <filename>structdg_1_1_self_made_matrix_tag.html</filename>
    <base>dg::AnyMatrixTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::SerialTag</name>
    <filename>structdg_1_1_serial_tag.html</filename>
    <base>dg::AnyPolicyTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::SharedTag</name>
    <filename>structdg_1_1_shared_tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>dg::SharedVectorTag</name>
    <filename>structdg_1_1_shared_vector_tag.html</filename>
    <base>dg::AnyVectorTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::ShuOsher</name>
    <filename>structdg_1_1_shu_osher.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_shu_osher.html</anchorfile>
      <anchor>a87feee1bd1282a00dfbad1d7ee77f579</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_shu_osher.html</anchorfile>
      <anchor>a2063cdc3752d5faef3aa613fa5596f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShuOsher</name>
      <anchorfile>structdg_1_1_shu_osher.html</anchorfile>
      <anchor>a4bec62971f6e168bc49bb3ae49c893db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShuOsher</name>
      <anchorfile>structdg_1_1_shu_osher.html</anchorfile>
      <anchor>a51d719b372f76bdaa7a31f6957f39a50</anchor>
      <arglist>(dg::ConvertsToShuOsherTableau&lt; value_type &gt; tableau, const ContainerType &amp;copyable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_shu_osher.html</anchorfile>
      <anchor>abed353b1cc0bc2f1f7fc60d50ea55167</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>copyable</name>
      <anchorfile>structdg_1_1_shu_osher.html</anchorfile>
      <anchor>a46b31db63911ea8e8754f152d2041ab2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>structdg_1_1_shu_osher.html</anchorfile>
      <anchor>af80b406fe2e9fa8e9f0ca843b5d6b1ec</anchor>
      <arglist>(const std::tuple&lt; RHS, Limiter &gt; &amp;ode, value_type t0, const ContainerType &amp;u0, value_type &amp;t1, ContainerType &amp;u1, value_type dt)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>order</name>
      <anchorfile>structdg_1_1_shu_osher.html</anchorfile>
      <anchor>a7d9a39c621cc0c3b92f3e7d95d8f6f76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>num_stages</name>
      <anchorfile>structdg_1_1_shu_osher.html</anchorfile>
      <anchor>ae83cb5e2d096d869498a8c8d258277dd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ShuOsherTableau</name>
    <filename>structdg_1_1_shu_osher_tableau.html</filename>
    <templarg>class real_type</templarg>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_shu_osher_tableau.html</anchorfile>
      <anchor>a0ab2181dc58398f428fbf29eb78e4d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShuOsherTableau</name>
      <anchorfile>structdg_1_1_shu_osher_tableau.html</anchorfile>
      <anchor>a50058acd3a769600517fd6130dfa8983</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShuOsherTableau</name>
      <anchorfile>structdg_1_1_shu_osher_tableau.html</anchorfile>
      <anchor>ac66f6739d3dff6bf7c0f5ac603c6f167</anchor>
      <arglist>(unsigned stages, unsigned order, const std::vector&lt; real_type &gt; &amp;alpha_v, const std::vector&lt; real_type &gt; &amp;beta_v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ButcherTableau&lt; real_type &gt;</name>
      <anchorfile>structdg_1_1_shu_osher_tableau.html</anchorfile>
      <anchor>aa7cfb441b8dcdadd97ab7b8182f58fd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>alpha</name>
      <anchorfile>structdg_1_1_shu_osher_tableau.html</anchorfile>
      <anchor>a968f1761efc5f07deddcba3c960d7f51</anchor>
      <arglist>(unsigned i, unsigned j)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>beta</name>
      <anchorfile>structdg_1_1_shu_osher_tableau.html</anchorfile>
      <anchor>a063f400cd5d5036e3dc13e25cd0774c6</anchor>
      <arglist>(unsigned i, unsigned j)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>num_stages</name>
      <anchorfile>structdg_1_1_shu_osher_tableau.html</anchorfile>
      <anchor>a81c55b58aeb84eb50f4a740040e0c824</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>order</name>
      <anchorfile>structdg_1_1_shu_osher_tableau.html</anchorfile>
      <anchor>a9116e6cf8b1db5e66654a163e9b94c59</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Simpsons</name>
    <filename>structdg_1_1_simpsons.html</filename>
    <templarg>class ContainerType</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_simpsons.html</anchorfile>
      <anchor>ad185b64846e6c6ecdc05ec9dded39e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_simpsons.html</anchorfile>
      <anchor>aa34bec14a343596b150512d9c7a863b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Simpsons</name>
      <anchorfile>structdg_1_1_simpsons.html</anchorfile>
      <anchor>a568759e381bd838f6afb13a4bc942a4f</anchor>
      <arglist>(unsigned order=3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_order</name>
      <anchorfile>structdg_1_1_simpsons.html</anchorfile>
      <anchor>adb1056156b67c96d89d5b4127b5e79b6</anchor>
      <arglist>(unsigned order)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_order</name>
      <anchorfile>structdg_1_1_simpsons.html</anchorfile>
      <anchor>a49567edaed6d08adadcb375ea69c61a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structdg_1_1_simpsons.html</anchorfile>
      <anchor>a6c00602479ea564ef46032f336f2e5d3</anchor>
      <arglist>(value_type t0, const ContainerType &amp;u0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>structdg_1_1_simpsons.html</anchorfile>
      <anchor>a82fa60767462a5677bbc2f6403227b5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structdg_1_1_simpsons.html</anchorfile>
      <anchor>a86a00367cc1e8c1c0f3fd2320e8f3e2e</anchor>
      <arglist>(value_type t_new, const ContainerType &amp;u_new)</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>get_integral</name>
      <anchorfile>structdg_1_1_simpsons.html</anchorfile>
      <anchor>aaca0de299b55ccbf4f25b2d48f8f44de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; value_type, 2 &gt;</type>
      <name>get_boundaries</name>
      <anchorfile>structdg_1_1_simpsons.html</anchorfile>
      <anchor>a8fd3827751e1b971aae32978477a5efc</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::SinglestepTimeloop</name>
    <filename>structdg_1_1_singlestep_timeloop.html</filename>
    <templarg>class ContainerType</templarg>
    <base>dg::aTimeloop</base>
    <member kind="typedef">
      <type>ContainerType</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_singlestep_timeloop.html</anchorfile>
      <anchor>a8e6eadea77ba106c6ddf9f6da680e6cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::get_value_type&lt; ContainerType &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_singlestep_timeloop.html</anchorfile>
      <anchor>acdf86df19f084a261f90ccdedeee7e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SinglestepTimeloop</name>
      <anchorfile>structdg_1_1_singlestep_timeloop.html</anchorfile>
      <anchor>ac8bf32f4eecc321100281ce5b71aa444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SinglestepTimeloop</name>
      <anchorfile>structdg_1_1_singlestep_timeloop.html</anchorfile>
      <anchor>a3af3abc0a6c49e253db95683c03eb10d</anchor>
      <arglist>(std::function&lt; void(value_type, const ContainerType &amp;, value_type &amp;, ContainerType &amp;, value_type)&gt; step, value_type dt=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SinglestepTimeloop</name>
      <anchorfile>structdg_1_1_singlestep_timeloop.html</anchorfile>
      <anchor>a1a98faf9fb9c7768224f5044cc0f0f66</anchor>
      <arglist>(Stepper &amp;&amp;stepper, ODE &amp;&amp;ode, value_type dt=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_singlestep_timeloop.html</anchorfile>
      <anchor>a2b0ddb660db4696e5c2f064e497613ab</anchor>
      <arglist>(Params &amp;&amp;...ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dt</name>
      <anchorfile>structdg_1_1_singlestep_timeloop.html</anchorfile>
      <anchor>aa5417114e0a906bdd3d8861df5cefb08</anchor>
      <arglist>(value_type dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate_steps</name>
      <anchorfile>structdg_1_1_singlestep_timeloop.html</anchorfile>
      <anchor>a6bcad404b4cee2b4ade4bd35ec566f7f</anchor>
      <arglist>(value_type t0, const container_type &amp;u0, value_type t1, container_type &amp;u1, unsigned steps)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SinglestepTimeloop *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_singlestep_timeloop.html</anchorfile>
      <anchor>a5d628ecda3c3059515fe8a151acaf2c8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::SinProfX</name>
    <filename>structdg_1_1_sin_prof_x.html</filename>
    <member kind="function">
      <type></type>
      <name>SinProfX</name>
      <anchorfile>structdg_1_1_sin_prof_x.html</anchorfile>
      <anchor>a1d8a1a06b4c66cf68b532ddaa47e3e4e</anchor>
      <arglist>(double amp, double bamp, double kx)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_sin_prof_x.html</anchorfile>
      <anchor>ab6ed5e24b74ace0cf6d200d1cc618ea5</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_sin_prof_x.html</anchorfile>
      <anchor>a06680697a068117deb620f1c0c4a4a07</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_sin_prof_x.html</anchorfile>
      <anchor>a6162b09c1c2a2a5a8140659be6b72830</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::SinX</name>
    <filename>structdg_1_1_sin_x.html</filename>
    <member kind="function">
      <type></type>
      <name>SinX</name>
      <anchorfile>structdg_1_1_sin_x.html</anchorfile>
      <anchor>ab12cf6b148f6284d52fc3f6286cd500e</anchor>
      <arglist>(double amp, double bamp, double kx)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_sin_x.html</anchorfile>
      <anchor>a29718d7f20b332c64b61d0f75480345f</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_sin_x.html</anchorfile>
      <anchor>a56f852f67848d2500b526d226919b80b</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_sin_x.html</anchorfile>
      <anchor>a65cb6642ab37a8fff6eb017f4b246fc7</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::SinXCosY</name>
    <filename>structdg_1_1_sin_x_cos_y.html</filename>
    <member kind="function">
      <type></type>
      <name>SinXCosY</name>
      <anchorfile>structdg_1_1_sin_x_cos_y.html</anchorfile>
      <anchor>a3cbf9f5af92ef2bf6128d06c4e7cbd71</anchor>
      <arglist>(double amp, double bamp, double kx, double ky)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_sin_x_cos_y.html</anchorfile>
      <anchor>a7c6db7e26afc406b49ea2aa65a8e610c</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::SinXSinY</name>
    <filename>structdg_1_1_sin_x_sin_y.html</filename>
    <member kind="function">
      <type></type>
      <name>SinXSinY</name>
      <anchorfile>structdg_1_1_sin_x_sin_y.html</anchorfile>
      <anchor>a2d6166528550cecc978c34be9f06d08e</anchor>
      <arglist>(double amp, double bamp, double kx, double ky)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_sin_x_sin_y.html</anchorfile>
      <anchor>ade8488added34c1963b7de57b56a0196</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::SinY</name>
    <filename>structdg_1_1_sin_y.html</filename>
    <member kind="function">
      <type></type>
      <name>SinY</name>
      <anchorfile>structdg_1_1_sin_y.html</anchorfile>
      <anchor>aa16b9d571271d4326e1c4a8b951cd5d8</anchor>
      <arglist>(double amp, double bamp, double ky)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_sin_y.html</anchorfile>
      <anchor>a691ced3363e6032eb8d24590e87c50a1</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::SlopeLimiter</name>
    <filename>structdg_1_1_slope_limiter.html</filename>
    <templarg>class Limiter</templarg>
    <member kind="function">
      <type></type>
      <name>SlopeLimiter</name>
      <anchorfile>structdg_1_1_slope_limiter.html</anchorfile>
      <anchor>a3815c56c5a8175e3c48716993f6f22f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SlopeLimiter</name>
      <anchorfile>structdg_1_1_slope_limiter.html</anchorfile>
      <anchor>a84c601e71929a03035a15d9d925391c5</anchor>
      <arglist>(Limiter l)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_slope_limiter.html</anchorfile>
      <anchor>a2a35d692dfb812f86580c544c6bbc4a3</anchor>
      <arglist>(T v, T gm, T g0, T gp, T hm, T hp) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::SlopeLimiterProduct</name>
    <filename>structdg_1_1_slope_limiter_product.html</filename>
    <templarg>class Limiter</templarg>
    <member kind="function">
      <type></type>
      <name>SlopeLimiterProduct</name>
      <anchorfile>structdg_1_1_slope_limiter_product.html</anchorfile>
      <anchor>ada1ee28ad92e917a7a2952dae66d4d6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SlopeLimiterProduct</name>
      <anchorfile>structdg_1_1_slope_limiter_product.html</anchorfile>
      <anchor>a8bed557cccb41e3bc2799f3810d93d79</anchor>
      <arglist>(Limiter l)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_slope_limiter_product.html</anchorfile>
      <anchor>a75e4a4fb6fc7ff05fb4602925c7d8f58</anchor>
      <arglist>(T v, T gm, T g0, T gp, T hm, T hp) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::SparseBlockMatrixTag</name>
    <filename>structdg_1_1_sparse_block_matrix_tag.html</filename>
    <base>dg::AnyMatrixTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::SparseTensor</name>
    <filename>structdg_1_1_sparse_tensor.html</filename>
    <templarg>class container</templarg>
    <member kind="typedef">
      <type>container</type>
      <name>container_type</name>
      <anchorfile>structdg_1_1_sparse_tensor.html</anchorfile>
      <anchor>a5bf0669dc82dd8b7cd98ba435f16690d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseTensor</name>
      <anchorfile>structdg_1_1_sparse_tensor.html</anchorfile>
      <anchor>a3f16dfb5f42919faf151ca3588e97a70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseTensor</name>
      <anchorfile>structdg_1_1_sparse_tensor.html</anchorfile>
      <anchor>ac9fefe1b8ce8c92c48703cd964748014</anchor>
      <arglist>(const Topology &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseTensor</name>
      <anchorfile>structdg_1_1_sparse_tensor.html</anchorfile>
      <anchor>a4130b44287f60f121f9602d242b84c82</anchor>
      <arglist>(const container &amp;copyable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_sparse_tensor.html</anchorfile>
      <anchor>a092437fae121aafca6d75cdc16f059d1</anchor>
      <arglist>(const Topology &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_sparse_tensor.html</anchorfile>
      <anchor>abf5904392851f828c6637efb72dee84c</anchor>
      <arglist>(const container &amp;copyable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseTensor</name>
      <anchorfile>structdg_1_1_sparse_tensor.html</anchorfile>
      <anchor>a2e0e000ead631f50fae8316d176c5b73</anchor>
      <arglist>(const SparseTensor&lt; OtherContainer &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>idx</name>
      <anchorfile>structdg_1_1_sparse_tensor.html</anchorfile>
      <anchor>a360416d36b69a36180f095422e5ba3b5</anchor>
      <arglist>(unsigned i, unsigned j) const</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>idx</name>
      <anchorfile>structdg_1_1_sparse_tensor.html</anchorfile>
      <anchor>a8111772e04edec306fc2cd14f9ecde13</anchor>
      <arglist>(unsigned i, unsigned j)</arglist>
    </member>
    <member kind="function">
      <type>const container &amp;</type>
      <name>value</name>
      <anchorfile>structdg_1_1_sparse_tensor.html</anchorfile>
      <anchor>af490f0060fe6ba9ad92ef912577d34bb</anchor>
      <arglist>(size_t i, size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; container &gt; &amp;</type>
      <name>values</name>
      <anchorfile>structdg_1_1_sparse_tensor.html</anchorfile>
      <anchor>a6a281f22e33f1e1d70b3f59b1fe3d970</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; container &gt; &amp;</type>
      <name>values</name>
      <anchorfile>structdg_1_1_sparse_tensor.html</anchorfile>
      <anchor>ab6efc05d782cc007c13d9a3a71b137a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseTensor</type>
      <name>transpose</name>
      <anchorfile>structdg_1_1_sparse_tensor.html</anchorfile>
      <anchor>a3c00f17ba15517d5e597e72e6bcbc90e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::SQRT</name>
    <filename>structdg_1_1_s_q_r_t.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_s_q_r_t.html</anchorfile>
      <anchor>aff0a630beb7a03098397e1694e384e6c</anchor>
      <arglist>(T x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Square</name>
    <filename>structdg_1_1_square.html</filename>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_square.html</anchorfile>
      <anchor>abdee72ef2d67150f7add91c46376a16d</anchor>
      <arglist>(T x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::StdMapTag</name>
    <filename>structdg_1_1_std_map_tag.html</filename>
    <base>dg::RecursiveVectorTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::Sum</name>
    <filename>structdg_1_1_sum.html</filename>
    <member kind="function">
      <type>DG_DEVICE T1</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_sum.html</anchorfile>
      <anchor>ae4317583a3bb4d477f8bfca06829c8d0</anchor>
      <arglist>(T1 x, Ts... rest) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::SurjectiveComm</name>
    <filename>structdg_1_1_surjective_comm.html</filename>
    <templarg>class Index</templarg>
    <templarg>class Vector</templarg>
    <base>aCommunicator&lt; Vector &gt;</base>
    <member kind="function">
      <type></type>
      <name>SurjectiveComm</name>
      <anchorfile>structdg_1_1_surjective_comm.html</anchorfile>
      <anchor>a2a5e7265796976d5fdc8678afdcd378b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurjectiveComm</name>
      <anchorfile>structdg_1_1_surjective_comm.html</anchorfile>
      <anchor>af3344107265a72e6cd1a27500ffbdf77</anchor>
      <arglist>(unsigned local_size, const thrust::host_vector&lt; int &gt; &amp;localGatherMap, const thrust::host_vector&lt; int &gt; &amp;pidGatherMap, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurjectiveComm</name>
      <anchorfile>structdg_1_1_surjective_comm.html</anchorfile>
      <anchor>af8cc6421308608d9df93dd630e76dd06</anchor>
      <arglist>(const thrust::host_vector&lt; int &gt; &amp;globalGatherMap, const ConversionPolicy &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurjectiveComm</name>
      <anchorfile>structdg_1_1_surjective_comm.html</anchorfile>
      <anchor>acdce84558335b7f3c61d8ef22e15d215</anchor>
      <arglist>(const SurjectiveComm&lt; OtherIndex, OtherVector &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>const thrust::host_vector&lt; int &gt; &amp;</type>
      <name>getLocalGatherMap</name>
      <anchorfile>structdg_1_1_surjective_comm.html</anchorfile>
      <anchor>ad0afc39b715350bfae896fb0adfdb7c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const thrust::host_vector&lt; int &gt; &amp;</type>
      <name>getPidGatherMap</name>
      <anchorfile>structdg_1_1_surjective_comm.html</anchorfile>
      <anchor>a6972a3384f1945984465fa899d5ed5d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Index &amp;</type>
      <name>getSortedGatherMap</name>
      <anchorfile>structdg_1_1_surjective_comm.html</anchorfile>
      <anchor>a01ca0a47a21c15fc54d052d2c602232e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SurjectiveComm *</type>
      <name>clone</name>
      <anchorfile>structdg_1_1_surjective_comm.html</anchorfile>
      <anchor>adceb219b4a80a9ddb71de6e714ffa1c9</anchor>
      <arglist>() const override final</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TanhProfX</name>
    <filename>structdg_1_1_tanh_prof_x.html</filename>
    <member kind="function">
      <type></type>
      <name>TanhProfX</name>
      <anchorfile>structdg_1_1_tanh_prof_x.html</anchorfile>
      <anchor>af43b20abf216b2802ef1538f847915a8</anchor>
      <arglist>(double xb, double width, int sign=1, double bgamp=0., double profamp=1.)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_tanh_prof_x.html</anchorfile>
      <anchor>aa8bae8e58ff82891e491538b8c6ed627</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_tanh_prof_x.html</anchorfile>
      <anchor>a6f64fff5c52838cf05c242528eb41740</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_tanh_prof_x.html</anchorfile>
      <anchor>a6aca5e22ad75bbb03745ef87aa7619b7</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorDeterminant2d</name>
    <filename>structdg_1_1_tensor_determinant2d.html</filename>
    <templarg>class value_type</templarg>
    <member kind="function">
      <type>DG_DEVICE value_type</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_tensor_determinant2d.html</anchorfile>
      <anchor>a475486fbf599949ed4e10868936a6ae3</anchor>
      <arglist>(value_type t00, value_type t01, value_type t10, value_type t11) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorDeterminant3d</name>
    <filename>structdg_1_1_tensor_determinant3d.html</filename>
    <templarg>class value_type</templarg>
    <member kind="function">
      <type>DG_DEVICE value_type</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_tensor_determinant3d.html</anchorfile>
      <anchor>a20f4c5cf22a89f6a25040a7a4922350c</anchor>
      <arglist>(value_type t00, value_type t01, value_type t02, value_type t10, value_type t11, value_type t12, value_type t20, value_type t21, value_type t22) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorDot2d</name>
    <filename>structdg_1_1_tensor_dot2d.html</filename>
    <templarg>class value_type</templarg>
    <member kind="function">
      <type>DG_DEVICE value_type</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_tensor_dot2d.html</anchorfile>
      <anchor>aadbf4aad129c59960f2091b8ca595856</anchor>
      <arglist>(value_type lambda, value_type v0, value_type v1, value_type t00, value_type t01, value_type t10, value_type t11, value_type mu, value_type w0, value_type w1) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorDot3d</name>
    <filename>structdg_1_1_tensor_dot3d.html</filename>
    <templarg>class value_type</templarg>
    <member kind="function">
      <type>DG_DEVICE value_type</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_tensor_dot3d.html</anchorfile>
      <anchor>a58203c33467ac5369985cb1b98439745</anchor>
      <arglist>(value_type lambda, value_type v0, value_type v1, value_type v2, value_type t00, value_type t01, value_type t02, value_type t10, value_type t11, value_type t12, value_type t20, value_type t21, value_type t22, value_type mu, value_type w0, value_type w1, value_type w2) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorMultiply2d</name>
    <filename>structdg_1_1_tensor_multiply2d.html</filename>
    <templarg>class value_type</templarg>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_tensor_multiply2d.html</anchorfile>
      <anchor>a05dc6ce3a9107a00adff7bd59d90190f</anchor>
      <arglist>(value_type lambda, value_type t00, value_type t01, value_type t10, value_type t11, value_type in0, value_type in1, value_type mu, value_type &amp;out0, value_type &amp;out1) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorMultiply3d</name>
    <filename>structdg_1_1_tensor_multiply3d.html</filename>
    <templarg>class value_type</templarg>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_tensor_multiply3d.html</anchorfile>
      <anchor>a9a669699226ed1f61bd2a3ad12ed930a</anchor>
      <arglist>(value_type lambda, value_type t00, value_type t01, value_type t02, value_type t10, value_type t11, value_type t12, value_type t20, value_type t21, value_type t22, value_type in0, value_type in1, value_type in2, value_type mu, value_type &amp;out0, value_type &amp;out1, value_type &amp;out2) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits</name>
    <filename>structdg_1_1_tensor_traits.html</filename>
    <templarg>class Vector</templarg>
    <templarg>class Enable</templarg>
    <member kind="typedef">
      <type>void</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits.html</anchorfile>
      <anchor>ae83e6821de9ca0a8c7602dc6143707b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NotATensorTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits.html</anchorfile>
      <anchor>ae4b638a26e2cf4c7481e0dc916e81c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoPolicyTag</type>
      <name>execution_policy</name>
      <anchorfile>structdg_1_1_tensor_traits.html</anchorfile>
      <anchor>acbb605f6be5cb0d556d3e8ba9fb053c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; CooSparseBlockMat&lt; T &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01_coo_sparse_block_mat_3_01_t_01_4_01_4.html</filename>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_coo_sparse_block_mat_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a4dfc2591d792b9989e805a66884489bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseBlockMatrixTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_coo_sparse_block_mat_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a01a701e4ef722f90dbee17a82960cfee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; cusp::coo_matrix&lt; I, V, M &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01cusp_1_1coo__matrix_3_01_i_00_01_v_00_01_m_01_4_01_4.html</filename>
    <templarg>class I</templarg>
    <templarg>class V</templarg>
    <templarg>class M</templarg>
    <member kind="typedef">
      <type>V</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01cusp_1_1coo__matrix_3_01_i_00_01_v_00_01_m_01_4_01_4.html</anchorfile>
      <anchor>ab02b210604438dcbb361cbae12867525</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CuspMatrixTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01cusp_1_1coo__matrix_3_01_i_00_01_v_00_01_m_01_4_01_4.html</anchorfile>
      <anchor>a0542bf3e4489be37a6db44a22d5cd4f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; cusp::csr_matrix&lt; I, V, M &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01cusp_1_1csr__matrix_3_01_i_00_01_v_00_01_m_01_4_01_4.html</filename>
    <templarg>class I</templarg>
    <templarg>class V</templarg>
    <templarg>class M</templarg>
    <member kind="typedef">
      <type>V</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01cusp_1_1csr__matrix_3_01_i_00_01_v_00_01_m_01_4_01_4.html</anchorfile>
      <anchor>a20bc10733c09134ce32803bafb32f2ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CuspMatrixTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01cusp_1_1csr__matrix_3_01_i_00_01_v_00_01_m_01_4_01_4.html</anchorfile>
      <anchor>a9d589d777ce7ea25e58c3d2411f8b59c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; cusp::dia_matrix&lt; I, V, M &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01cusp_1_1dia__matrix_3_01_i_00_01_v_00_01_m_01_4_01_4.html</filename>
    <templarg>class I</templarg>
    <templarg>class V</templarg>
    <templarg>class M</templarg>
    <member kind="typedef">
      <type>V</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01cusp_1_1dia__matrix_3_01_i_00_01_v_00_01_m_01_4_01_4.html</anchorfile>
      <anchor>ac3c7c573c7471cf568fd8938a3cd3139</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CuspMatrixTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01cusp_1_1dia__matrix_3_01_i_00_01_v_00_01_m_01_4_01_4.html</anchorfile>
      <anchor>a092259ed31f5a12f62cbf49883d48e20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; cusp::ell_matrix&lt; I, V, M &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01cusp_1_1ell__matrix_3_01_i_00_01_v_00_01_m_01_4_01_4.html</filename>
    <templarg>class I</templarg>
    <templarg>class V</templarg>
    <templarg>class M</templarg>
    <member kind="typedef">
      <type>V</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01cusp_1_1ell__matrix_3_01_i_00_01_v_00_01_m_01_4_01_4.html</anchorfile>
      <anchor>a4c9cac95f46405e3d6ca658338e212aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CuspMatrixTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01cusp_1_1ell__matrix_3_01_i_00_01_v_00_01_m_01_4_01_4.html</anchorfile>
      <anchor>a742b8ae2dce12404f59e221fd7839e45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; cusp::hyb_matrix&lt; I, V, M &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01cusp_1_1hyb__matrix_3_01_i_00_01_v_00_01_m_01_4_01_4.html</filename>
    <templarg>class I</templarg>
    <templarg>class V</templarg>
    <templarg>class M</templarg>
    <member kind="typedef">
      <type>V</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01cusp_1_1hyb__matrix_3_01_i_00_01_v_00_01_m_01_4_01_4.html</anchorfile>
      <anchor>a7078c5fc82682c003a5a2d337a34caf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CuspMatrixTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01cusp_1_1hyb__matrix_3_01_i_00_01_v_00_01_m_01_4_01_4.html</anchorfile>
      <anchor>ab9899994cfd3bc2d7ef9efa964a603bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; EllSparseBlockMat&lt; T &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01_ell_sparse_block_mat_3_01_t_01_4_01_4.html</filename>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_ell_sparse_block_mat_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>aa4d67714f7a8c9863722dcc01d7b046b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseBlockMatrixTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_ell_sparse_block_mat_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>aa4d6aadd3521aab56ee8e636d2b127ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; MPI_Vector&lt; container &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01_m_p_i___vector_3_01container_01_4_01_4.html</filename>
    <templarg>class container</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; container &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_m_p_i___vector_3_01container_01_4_01_4.html</anchorfile>
      <anchor>a4121dc610eb1620d7b3600348849f06d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIVectorTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_m_p_i___vector_3_01container_01_4_01_4.html</anchorfile>
      <anchor>ad3f52bfba44c771721c2cb8622060461</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_execution_policy&lt; container &gt;</type>
      <name>execution_policy</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_m_p_i___vector_3_01container_01_4_01_4.html</anchorfile>
      <anchor>a775a58b0adca9de09a8d134c0a34e282</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; MPIDistMat&lt; L, C &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01_m_p_i_dist_mat_3_01_l_00_01_c_01_4_01_4.html</filename>
    <templarg>class L</templarg>
    <templarg>class C</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; L &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_m_p_i_dist_mat_3_01_l_00_01_c_01_4_01_4.html</anchorfile>
      <anchor>af34e0d04440c6eba0d6830a35bcb8d22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIMatrixTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_m_p_i_dist_mat_3_01_l_00_01_c_01_4_01_4.html</anchorfile>
      <anchor>acc1d89a9ffaf5d6d48bdd299c6c64350</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; RowColDistMat&lt; LI, LO, C &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01_row_col_dist_mat_3_01_l_i_00_01_l_o_00_01_c_01_4_01_4.html</filename>
    <templarg>class LI</templarg>
    <templarg>class LO</templarg>
    <templarg>class C</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; LI &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_row_col_dist_mat_3_01_l_i_00_01_l_o_00_01_c_01_4_01_4.html</anchorfile>
      <anchor>ad08dd42403cc37fa22fb336164cf87e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIMatrixTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_row_col_dist_mat_3_01_l_i_00_01_l_o_00_01_c_01_4_01_4.html</anchorfile>
      <anchor>aca27f13b20d633c4891e99f413a5aff1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; std::array&lt; T, N &gt;, std::enable_if_t&lt; !std::is_arithmetic&lt; T &gt;::value &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01std_1_1array_3_01_t_00_01_n_01_4_00_01std_1_1enable__if__t_3_01_953a436b51ba0262d6e3603139fba8b2c.html</filename>
    <templarg>class T</templarg>
    <templarg>std::size_t N</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; T &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01std_1_1array_3_01_t_00_01_n_01_4_00_01std_1_1enable__if__t_3_01_953a436b51ba0262d6e3603139fba8b2c.html</anchorfile>
      <anchor>a34328ec923b871ac45379c86997408db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayVectorTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01std_1_1array_3_01_t_00_01_n_01_4_00_01std_1_1enable__if__t_3_01_953a436b51ba0262d6e3603139fba8b2c.html</anchorfile>
      <anchor>a4a6f3e3a11b464215835f78e6517dd18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_execution_policy&lt; T &gt;</type>
      <name>execution_policy</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01std_1_1array_3_01_t_00_01_n_01_4_00_01std_1_1enable__if__t_3_01_953a436b51ba0262d6e3603139fba8b2c.html</anchorfile>
      <anchor>ad34d9518efbaed38ba07b1e2a8d16ad7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; std::array&lt; T, N &gt;, std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01std_1_1array_3_01_t_00_01_n_01_4_00_01std_1_1enable__if__t_3_01ste651a233ff1a26a1de2c5554e491dc38.html</filename>
    <templarg>class T</templarg>
    <templarg>std::size_t N</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01std_1_1array_3_01_t_00_01_n_01_4_00_01std_1_1enable__if__t_3_01ste651a233ff1a26a1de2c5554e491dc38.html</anchorfile>
      <anchor>a7e1d5d0741921fa45578bd5ed4420523</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayScalarTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01std_1_1array_3_01_t_00_01_n_01_4_00_01std_1_1enable__if__t_3_01ste651a233ff1a26a1de2c5554e491dc38.html</anchorfile>
      <anchor>a5011fab3fbfe20abd63b381d6d409d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SerialTag</type>
      <name>execution_policy</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01std_1_1array_3_01_t_00_01_n_01_4_00_01std_1_1enable__if__t_3_01ste651a233ff1a26a1de2c5554e491dc38.html</anchorfile>
      <anchor>ac0f131d47cd0f94a772db4e17365bd39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; std::map&lt; Key, T &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01std_1_1map_3_01_key_00_01_t_01_4_01_4.html</filename>
    <templarg>class Key</templarg>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; T &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01std_1_1map_3_01_key_00_01_t_01_4_01_4.html</anchorfile>
      <anchor>a4954eec38c0763250514cf3e9c296100</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StdMapTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01std_1_1map_3_01_key_00_01_t_01_4_01_4.html</anchorfile>
      <anchor>a7a1d154d88e236d9fdf4756cc173cc84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_execution_policy&lt; T &gt;</type>
      <name>execution_policy</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01std_1_1map_3_01_key_00_01_t_01_4_01_4.html</anchorfile>
      <anchor>a56b44f83a536773922ff73f1124fc194</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; std::vector&lt; T &gt;, std::enable_if_t&lt; !std::is_arithmetic&lt; T &gt;::value &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01std_1_1vector_3_01_t_01_4_00_01std_1_1enable__if__t_3_01_9std_1_18a4c0a95f28d9e7e97cd1d10129d7441.html</filename>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; T &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01std_1_1vector_3_01_t_01_4_00_01std_1_1enable__if__t_3_01_9std_1_18a4c0a95f28d9e7e97cd1d10129d7441.html</anchorfile>
      <anchor>ad349f397351cf9e5bb2845fd0133d450</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RecursiveVectorTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01std_1_1vector_3_01_t_01_4_00_01std_1_1enable__if__t_3_01_9std_1_18a4c0a95f28d9e7e97cd1d10129d7441.html</anchorfile>
      <anchor>a1414807f51c569755f4a19a444fd2eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_execution_policy&lt; T &gt;</type>
      <name>execution_policy</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01std_1_1vector_3_01_t_01_4_00_01std_1_1enable__if__t_3_01_9std_1_18a4c0a95f28d9e7e97cd1d10129d7441.html</anchorfile>
      <anchor>a155b0b3c0816f411cdb0f3cb69813a4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; std::vector&lt; T &gt;, std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01std_1_1vector_3_01_t_01_4_00_01std_1_1enable__if__t_3_01std_1_1is43bac212692e7f0d40a1fa0316db4ace.html</filename>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01std_1_1vector_3_01_t_01_4_00_01std_1_1enable__if__t_3_01std_1_1is43bac212692e7f0d40a1fa0316db4ace.html</anchorfile>
      <anchor>a4f2661ceea28b665f61c42d70bc3b5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ThrustVectorTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01std_1_1vector_3_01_t_01_4_00_01std_1_1enable__if__t_3_01std_1_1is43bac212692e7f0d40a1fa0316db4ace.html</anchorfile>
      <anchor>a66b94c61e906a939c6c7333fee242b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SerialTag</type>
      <name>execution_policy</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01std_1_1vector_3_01_t_01_4_00_01std_1_1enable__if__t_3_01std_1_1is43bac212692e7f0d40a1fa0316db4ace.html</anchorfile>
      <anchor>a90e6b6d575cb5b4069c5316a1d9dc4ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; T, std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01_t_00_01std_1_1enable__if__t_3_01std_1_1is__arithmetic_3_01_t_01_4_1_1value_01_4_01_4.html</filename>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_t_00_01std_1_1enable__if__t_3_01std_1_1is__arithmetic_3_01_t_01_4_1_1value_01_4_01_4.html</anchorfile>
      <anchor>a4268c0bad6a61cff65c2dfc5bd87931d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_t_00_01std_1_1enable__if__t_3_01std_1_1is__arithmetic_3_01_t_01_4_1_1value_01_4_01_4.html</anchorfile>
      <anchor>adb02ad40a2d16d2308416fb2c669ec15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AnyPolicyTag</type>
      <name>execution_policy</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_t_00_01std_1_1enable__if__t_3_01std_1_1is__arithmetic_3_01_t_01_4_1_1value_01_4_01_4.html</anchorfile>
      <anchor>a30abaf4d396a2a06d9f2fb51361a722f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; thrust::device_vector&lt; T &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01thrust_1_1device__vector_3_01_t_01_4_01_4.html</filename>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01thrust_1_1device__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a425cfae9bd3c3828079304a95561f560</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ThrustVectorTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01thrust_1_1device__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>ad46373ec8e9fd9f3c056d73a3ccc1313</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CudaTag</type>
      <name>execution_policy</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01thrust_1_1device__vector_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a26d37dd790a7eec86373fbf2a215c974</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; thrust::host_vector&lt; T &gt;, std::enable_if_t&lt; !std::is_arithmetic&lt; T &gt;::value &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01thrust_1_1host__vector_3_01_t_01_4_00_01std_1_1enable__if__t_3_01390ab22b8cb1b61cb4f7cfd6526cf90d.html</filename>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; T &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01thrust_1_1host__vector_3_01_t_01_4_00_01std_1_1enable__if__t_3_01390ab22b8cb1b61cb4f7cfd6526cf90d.html</anchorfile>
      <anchor>abbb401a32f600a769d39cee7238eb6f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RecursiveVectorTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01thrust_1_1host__vector_3_01_t_01_4_00_01std_1_1enable__if__t_3_01390ab22b8cb1b61cb4f7cfd6526cf90d.html</anchorfile>
      <anchor>a8d11b54b327d99824d7042d66031502b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_execution_policy&lt; T &gt;</type>
      <name>execution_policy</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01thrust_1_1host__vector_3_01_t_01_4_00_01std_1_1enable__if__t_3_01390ab22b8cb1b61cb4f7cfd6526cf90d.html</anchorfile>
      <anchor>a24230a9aa64bf570ddb03d80a9090252</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; thrust::host_vector&lt; T &gt;, std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01thrust_1_1host__vector_3_01_t_01_4_00_01std_1_1enable__if__t_3_0108752795600727f598b915e08bbde1f6.html</filename>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01thrust_1_1host__vector_3_01_t_01_4_00_01std_1_1enable__if__t_3_0108752795600727f598b915e08bbde1f6.html</anchorfile>
      <anchor>a645ea0db3eb62ff4e40cabc84ed6ebec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ThrustVectorTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01thrust_1_1host__vector_3_01_t_01_4_00_01std_1_1enable__if__t_3_0108752795600727f598b915e08bbde1f6.html</anchorfile>
      <anchor>a31660eef75fb34b516dc393edfb15a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SerialTag</type>
      <name>execution_policy</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01thrust_1_1host__vector_3_01_t_01_4_00_01std_1_1enable__if__t_3_0108752795600727f598b915e08bbde1f6.html</anchorfile>
      <anchor>a94236ec4257d8e31b6ce9f0cb9df3b92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TensorTraits&lt; View&lt; ThrustVector &gt; &gt;</name>
    <filename>structdg_1_1_tensor_traits_3_01_view_3_01_thrust_vector_01_4_01_4.html</filename>
    <templarg>class ThrustVector</templarg>
    <member kind="typedef">
      <type>get_value_type&lt; ThrustVector &gt;</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_view_3_01_thrust_vector_01_4_01_4.html</anchorfile>
      <anchor>ad9057534c90d0dba4909417bd45aa2dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ThrustVectorTag</type>
      <name>tensor_category</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_view_3_01_thrust_vector_01_4_01_4.html</anchorfile>
      <anchor>adf395c874ce97a7fa7645ccc2ee3f85b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>get_execution_policy&lt; ThrustVector &gt;</type>
      <name>execution_policy</name>
      <anchorfile>structdg_1_1_tensor_traits_3_01_view_3_01_thrust_vector_01_4_01_4.html</anchorfile>
      <anchor>ae57408eba2b6bba3819826b6c01fb065</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ThreeDimensionalTag</name>
    <filename>structdg_1_1_three_dimensional_tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>dg::ThrustVectorTag</name>
    <filename>structdg_1_1_thrust_vector_tag.html</filename>
    <base>dg::ArrayScalarTag</base>
  </compound>
  <compound kind="struct">
    <name>dg::Timer</name>
    <filename>structdg_1_1_timer.html</filename>
    <member kind="function">
      <type>void</type>
      <name>tic</name>
      <anchorfile>structdg_1_1_timer.html</anchorfile>
      <anchor>ad158907d0e4a975b832fed780d7b4655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toc</name>
      <anchorfile>structdg_1_1_timer.html</anchorfile>
      <anchor>a3c1a18f62626dcfaf728c2b490a64a43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>diff</name>
      <anchorfile>structdg_1_1_timer.html</anchorfile>
      <anchor>a27a84dc8acb525e9617cd34d64aad4ed</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::times_equals</name>
    <filename>structdg_1_1times__equals.html</filename>
    <member kind="function">
      <type>DG_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1times__equals.html</anchorfile>
      <anchor>a348b940aa36575bae80fb8fe2d06c156</anchor>
      <arglist>(T1 x, T2 &amp;y) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TopologyTraits</name>
    <filename>structdg_1_1_topology_traits.html</filename>
    <templarg>class Topology</templarg>
    <member kind="typedef">
      <type>Topology::memory_category</type>
      <name>memory_category</name>
      <anchorfile>structdg_1_1_topology_traits.html</anchorfile>
      <anchor>ab645d8b9ec555edbb8a9c4dbe5e8200a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Topology::dimensionality</type>
      <name>dimensionality</name>
      <anchorfile>structdg_1_1_topology_traits.html</anchorfile>
      <anchor>af730188a6727ccb753a7ccd7db0009ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Topology::value_type</type>
      <name>value_type</name>
      <anchorfile>structdg_1_1_topology_traits.html</anchorfile>
      <anchor>afac43512dd917206ad2f3aca2a27d4a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TripletSum</name>
    <filename>structdg_1_1_triplet_sum.html</filename>
    <member kind="function">
      <type>DG_DEVICE T1</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_triplet_sum.html</anchorfile>
      <anchor>aecc5fc5aab0953cecca16777cacbe424</anchor>
      <arglist>(T1 a, T1 x1, T1 y1, Ts... rest) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::TwoDimensionalTag</name>
    <filename>structdg_1_1_two_dimensional_tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>dg::Upwind</name>
    <filename>structdg_1_1_upwind.html</filename>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_upwind.html</anchorfile>
      <anchor>a2d10161e79c58cb23d314c5153fa90dd</anchor>
      <arglist>(T velocity, T backward, T forward) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::UpwindProduct</name>
    <filename>structdg_1_1_upwind_product.html</filename>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_upwind_product.html</anchorfile>
      <anchor>aad33619bde3fa3a309d9a838707a207e</anchor>
      <arglist>(T velocity, T backward, T forward) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::VanLeer</name>
    <filename>structdg_1_1_van_leer.html</filename>
    <member kind="function">
      <type>DG_DEVICE T</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_van_leer.html</anchorfile>
      <anchor>aedc60a08b44c056d4d48a7b2a8d253c7</anchor>
      <arglist>(T x1, T x2) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::View</name>
    <filename>structdg_1_1_view.html</filename>
    <templarg>class ThrustVector</templarg>
    <member kind="typedef">
      <type>std::conditional_t&lt; std::is_const&lt; ThrustVector &gt;::value, typename ThrustVector::const_iterator, typename ThrustVector::iterator &gt;</type>
      <name>iterator</name>
      <anchorfile>structdg_1_1_view.html</anchorfile>
      <anchor>a92742a0486e9ac4f8e7ffccd8b7be936</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ThrustVector::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>structdg_1_1_view.html</anchorfile>
      <anchor>a603eadfac959a4b0f66da90094fd1d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; std::is_const&lt; ThrustVector &gt;::value, typename ThrustVector::const_pointer, typename ThrustVector::pointer &gt;</type>
      <name>pointer</name>
      <anchorfile>structdg_1_1_view.html</anchorfile>
      <anchor>aae94a476472852f88195d01fe6a0c431</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ThrustVector::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>structdg_1_1_view.html</anchorfile>
      <anchor>ac833e3989049b120016d7f0f85aa66a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>View</name>
      <anchorfile>structdg_1_1_view.html</anchorfile>
      <anchor>a705f3dc64a44fe89672d5321eff587a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>View</name>
      <anchorfile>structdg_1_1_view.html</anchorfile>
      <anchor>a1cb733130affe1ec9990b7d822237d5c</anchor>
      <arglist>(OtherView &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>View</name>
      <anchorfile>structdg_1_1_view.html</anchorfile>
      <anchor>ab75889c58a13d500104f4b88a47a980f</anchor>
      <arglist>(InputIterator data, unsigned size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>structdg_1_1_view.html</anchorfile>
      <anchor>aac16426643de19452a940cd57cc19475</anchor>
      <arglist>(InputIterator data, unsigned size)</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>data</name>
      <anchorfile>structdg_1_1_view.html</anchorfile>
      <anchor>a8aa7177ce62b3e937f98a07df05b6bcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structdg_1_1_view.html</anchorfile>
      <anchor>a96671c17c1c3203a76a00c1aca9cd0a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structdg_1_1_view.html</anchorfile>
      <anchor>a7e35d7aeb63af64f7495fbb5ac09731e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structdg_1_1_view.html</anchorfile>
      <anchor>a6db2e0fb5c2b0476b708f97be8f103ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structdg_1_1_view.html</anchorfile>
      <anchor>aad7433f5c7ec23c0c305dbea3e8e2d15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>structdg_1_1_view.html</anchorfile>
      <anchor>a2c28d614a7e4df73687310d0d713fedb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>structdg_1_1_view.html</anchorfile>
      <anchor>a740005da354ae9b84a18362ade93485c</anchor>
      <arglist>(View &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::Vortex</name>
    <filename>structdg_1_1_vortex.html</filename>
    <member kind="function">
      <type></type>
      <name>Vortex</name>
      <anchorfile>structdg_1_1_vortex.html</anchorfile>
      <anchor>a3cb30fdf2c8da900f2b6f3366dbaf237</anchor>
      <arglist>(double x0, double y0, unsigned state, double R, double u_dipole, double kz=0)</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_vortex.html</anchorfile>
      <anchor>a2ff6d88733a783fad4331490093652e8</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_vortex.html</anchorfile>
      <anchor>a702f35dac640eb5af31e8aa10b0e3f01</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::WallDistance</name>
    <filename>structdg_1_1_wall_distance.html</filename>
    <member kind="function">
      <type></type>
      <name>WallDistance</name>
      <anchorfile>structdg_1_1_wall_distance.html</anchorfile>
      <anchor>a4b28821101928d2250225b2e30546ef2</anchor>
      <arglist>(std::vector&lt; double &gt; vertical, std::vector&lt; double &gt; horizontal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WallDistance</name>
      <anchorfile>structdg_1_1_wall_distance.html</anchorfile>
      <anchor>a45a1f4848d4fd81d6ce52cf7904ca456</anchor>
      <arglist>(dg::Grid2d walls)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_wall_distance.html</anchorfile>
      <anchor>acc2be0b903a70fa253a7ddfa815fd743</anchor>
      <arglist>(double R, double Z) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dg::ZERO</name>
    <filename>structdg_1_1_z_e_r_o.html</filename>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_z_e_r_o.html</anchorfile>
      <anchor>a117d414fd6d9b543ac3fdf30cfbb44bc</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_z_e_r_o.html</anchorfile>
      <anchor>a049c8d998d51fac9aea99f2c2a87b882</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>DG_DEVICE double</type>
      <name>operator()</name>
      <anchorfile>structdg_1_1_z_e_r_o.html</anchorfile>
      <anchor>af1eab37cbfb06765881c904967d5e590</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>dg</name>
    <filename>namespacedg.html</filename>
    <namespace>dg::blas1</namespace>
    <namespace>dg::blas2</namespace>
    <namespace>dg::create</namespace>
    <namespace>dg::tensor</namespace>
    <namespace>dg::x</namespace>
    <class kind="struct">dg::ABS</class>
    <class kind="struct">dg::AbsMax</class>
    <class kind="struct">dg::AbsMin</class>
    <class kind="struct">dg::aCommunicator</class>
    <class kind="struct">dg::Adaptive</class>
    <class kind="struct">dg::AdaptiveTimeloop</class>
    <class kind="struct">dg::Advection</class>
    <class kind="struct">dg::AndersonAcceleration</class>
    <class kind="struct">dg::AndersonSolver</class>
    <class kind="struct">dg::AnyMatrixTag</class>
    <class kind="struct">dg::AnyPolicyTag</class>
    <class kind="struct">dg::AnyScalarTag</class>
    <class kind="struct">dg::AnyVectorTag</class>
    <class kind="struct">dg::ArakawaX</class>
    <class kind="struct">dg::aRealGeometry2d</class>
    <class kind="struct">dg::aRealGeometry3d</class>
    <class kind="struct">dg::aRealGeometryX2d</class>
    <class kind="struct">dg::aRealGeometryX3d</class>
    <class kind="struct">dg::aRealMPIGeometry2d</class>
    <class kind="struct">dg::aRealMPIGeometry3d</class>
    <class kind="struct">dg::aRealMPITopology2d</class>
    <class kind="struct">dg::aRealMPITopology3d</class>
    <class kind="struct">dg::aRealProductGeometry3d</class>
    <class kind="struct">dg::aRealProductMPIGeometry3d</class>
    <class kind="struct">dg::aRealRefinement1d</class>
    <class kind="struct">dg::aRealRefinementX2d</class>
    <class kind="struct">dg::aRealTopology2d</class>
    <class kind="struct">dg::aRealTopology3d</class>
    <class kind="struct">dg::aRealTopologyX2d</class>
    <class kind="struct">dg::aRealTopologyX3d</class>
    <class kind="struct">dg::ARKStep</class>
    <class kind="struct">dg::ArrayScalarTag</class>
    <class kind="struct">dg::ArrayVectorTag</class>
    <class kind="struct">dg::aTimeloop</class>
    <class kind="struct">dg::Average</class>
    <class kind="struct">dg::Average&lt; MPI_Vector&lt; container &gt; &gt;</class>
    <class kind="struct">dg::Axpby</class>
    <class kind="struct">dg::Axpbypgz</class>
    <class kind="struct">dg::AxyPby</class>
    <class kind="struct">dg::BathRZ</class>
    <class kind="class">dg::BICGSTABl</class>
    <class kind="struct">dg::BijectiveComm</class>
    <class kind="struct">dg::Buffer</class>
    <class kind="struct">dg::ButcherTableau</class>
    <class kind="struct">dg::Cauchy</class>
    <class kind="class">dg::ChebyshevIteration</class>
    <class kind="struct">dg::ChebyshevPreconditioner</class>
    <class kind="struct">dg::ClonePtr</class>
    <class kind="struct">dg::Composite</class>
    <class kind="struct">dg::CONSTANT</class>
    <class kind="struct">dg::ConvertsToButcherTableau</class>
    <class kind="struct">dg::ConvertsToMultistepTableau</class>
    <class kind="struct">dg::ConvertsToShuOsherTableau</class>
    <class kind="struct">dg::CooSparseBlockMat</class>
    <class kind="struct">dg::CosXCosY</class>
    <class kind="struct">dg::CosY</class>
    <class kind="struct">dg::CudaTag</class>
    <class kind="struct">dg::CuspMatrixTag</class>
    <class kind="struct">dg::CuspVectorTag</class>
    <class kind="struct">dg::DefaultSolver</class>
    <class kind="struct">dg::DenseMatrixTag</class>
    <class kind="struct">dg::DIRKStep</class>
    <class kind="struct">dg::Distance</class>
    <class kind="struct">dg::divides</class>
    <class kind="struct">dg::divides_equals</class>
    <class kind="class">dg::DLT</class>
    <class kind="struct">dg::DPolynomialHeaviside</class>
    <class kind="class">dg::Elliptic</class>
    <class kind="class">dg::Elliptic3d</class>
    <class kind="struct">dg::EllSparseBlockMat</class>
    <class kind="struct">dg::EmbeddedPairSum</class>
    <class kind="struct">dg::EntireDomain</class>
    <class kind="struct">dg::equals</class>
    <class kind="struct">dg::ERKStep</class>
    <class kind="class">dg::Error</class>
    <class kind="struct">dg::Evaluate</class>
    <class kind="class">dg::EVE</class>
    <class kind="struct">dg::EXP</class>
    <class kind="struct">dg::ExplicitMultistep</class>
    <class kind="struct">dg::ExponentialFilter</class>
    <class kind="struct">dg::ExpProfX</class>
    <class kind="struct">dg::Extrapolation</class>
    <class kind="struct">dg::Fail</class>
    <class kind="struct">dg::FilteredExplicitMultistep</class>
    <class kind="struct">dg::FixedPointSolver</class>
    <class kind="struct">dg::Gaussian</class>
    <class kind="struct">dg::Gaussian3d</class>
    <class kind="struct">dg::GaussianDamping</class>
    <class kind="struct">dg::GaussianX</class>
    <class kind="struct">dg::GaussianY</class>
    <class kind="struct">dg::GaussianZ</class>
    <class kind="struct">dg::GeneralComm</class>
    <class kind="struct">dg::Heaviside</class>
    <class kind="struct">dg::Helmholtz</class>
    <class kind="struct">dg::Helmholtz2</class>
    <class kind="struct">dg::Helmholtz3d</class>
    <class kind="struct">dg::Histogram</class>
    <class kind="struct">dg::Histogram2D</class>
    <class kind="struct">dg::Horner2d</class>
    <class kind="struct">dg::IDENTITY</class>
    <class kind="struct">dg::IdentityFilter</class>
    <class kind="struct">dg::ImExMultistep</class>
    <class kind="struct">dg::ImplicitMultistep</class>
    <class kind="struct">dg::InvCoshXsq</class>
    <class kind="struct">dg::InverseTensorMultiply2d</class>
    <class kind="struct">dg::InverseTensorMultiply3d</class>
    <class kind="struct">dg::INVERT</class>
    <class kind="struct">dg::InvSqrt</class>
    <class kind="struct">dg::IPolynomialHeaviside</class>
    <class kind="struct">dg::Iris</class>
    <class kind="struct">dg::IslandXY</class>
    <class kind="struct">dg::ISNFINITE</class>
    <class kind="struct">dg::ISNSANE</class>
    <class kind="struct">dg::Lamb</class>
    <class kind="struct">dg::LeastSquaresExtrapolation</class>
    <class kind="struct">dg::LeastSquaresPreconditioner</class>
    <class kind="class">dg::LGMRES</class>
    <class kind="struct">dg::Line</class>
    <class kind="struct">dg::LinearX</class>
    <class kind="struct">dg::LinearY</class>
    <class kind="struct">dg::LinearZ</class>
    <class kind="struct">dg::LN</class>
    <class kind="class">dg::Message</class>
    <class kind="struct">dg::MinMod</class>
    <class kind="struct">dg::minus_equals</class>
    <class kind="struct">dg::MOD</class>
    <class kind="struct">dg::ModalFilter</class>
    <class kind="struct">dg::ModifiedChebyshevPreconditioner</class>
    <class kind="struct">dg::MPI_Vector</class>
    <class kind="struct">dg::MPIDistMat</class>
    <class kind="struct">dg::MPIMatrixTag</class>
    <class kind="struct">dg::MPITag</class>
    <class kind="struct">dg::MPIVectorTag</class>
    <class kind="struct">dg::MultigridCG2d</class>
    <class kind="struct">dg::MultiMatrix</class>
    <class kind="struct">dg::MultistepTableau</class>
    <class kind="struct">dg::MultistepTimeloop</class>
    <class kind="struct">dg::NearestNeighborComm</class>
    <class kind="struct">dg::NestedGrids</class>
    <class kind="struct">dg::NoPolicyTag</class>
    <class kind="class">dg::NoRoot1d</class>
    <class kind="struct">dg::NotATensorTag</class>
    <class kind="struct">dg::OmpTag</class>
    <class kind="struct">dg::ONE</class>
    <class kind="struct">dg::OneDimensionalTag</class>
    <class kind="class">dg::Operator</class>
    <class kind="struct">dg::PairSum</class>
    <class kind="class">dg::PCG</class>
    <class kind="struct">dg::PLUS</class>
    <class kind="struct">dg::Plus</class>
    <class kind="struct">dg::plus_equals</class>
    <class kind="struct">dg::PointwiseDivide</class>
    <class kind="struct">dg::PointwiseDot</class>
    <class kind="struct">dg::Poisson</class>
    <class kind="struct">dg::PolynomialHeaviside</class>
    <class kind="struct">dg::PolynomialRectangle</class>
    <class kind="struct">dg::POSVALUE</class>
    <class kind="struct">dg::PsiPupil</class>
    <class kind="struct">dg::Pupil</class>
    <class kind="struct">dg::RealCartesianGrid2d</class>
    <class kind="struct">dg::RealCartesianGrid3d</class>
    <class kind="struct">dg::RealCartesianGridX2d</class>
    <class kind="struct">dg::RealCartesianGridX3d</class>
    <class kind="struct">dg::RealCartesianMPIGrid2d</class>
    <class kind="struct">dg::RealCartesianMPIGrid3d</class>
    <class kind="struct">dg::RealCartesianRefinedGrid2d</class>
    <class kind="struct">dg::RealCartesianRefinedGrid3d</class>
    <class kind="struct">dg::RealCartesianRefinedGridX2d</class>
    <class kind="struct">dg::RealCartesianRefinedGridX3d</class>
    <class kind="struct">dg::RealCylindricalGrid3d</class>
    <class kind="struct">dg::RealCylindricalMPIGrid3d</class>
    <class kind="struct">dg::RealEquidistRefinement</class>
    <class kind="struct">dg::RealEquidistXRefinement</class>
    <class kind="struct">dg::RealExponentialRefinement</class>
    <class kind="struct">dg::RealExponentialXRefinement</class>
    <class kind="struct">dg::RealFemRefinement</class>
    <class kind="struct">dg::RealGrid1d</class>
    <class kind="struct">dg::RealGrid2d</class>
    <class kind="struct">dg::RealGrid3d</class>
    <class kind="struct">dg::RealGridX1d</class>
    <class kind="struct">dg::RealGridX2d</class>
    <class kind="struct">dg::RealGridX3d</class>
    <class kind="struct">dg::RealIdentityRefinement</class>
    <class kind="struct">dg::RealIdentityXRefinement</class>
    <class kind="struct">dg::RealLinearRefinement</class>
    <class kind="struct">dg::RealMPIGrid2d</class>
    <class kind="struct">dg::RealMPIGrid3d</class>
    <class kind="struct">dg::RecursiveVectorTag</class>
    <class kind="class">dg::RefinedElliptic</class>
    <class kind="struct">dg::RowColDistMat</class>
    <class kind="struct">dg::Scal</class>
    <class kind="struct">dg::ScalarTag</class>
    <class kind="struct">dg::SelfMadeMatrixTag</class>
    <class kind="struct">dg::SerialTag</class>
    <class kind="struct">dg::SharedTag</class>
    <class kind="struct">dg::SharedVectorTag</class>
    <class kind="struct">dg::ShuOsher</class>
    <class kind="struct">dg::ShuOsherTableau</class>
    <class kind="struct">dg::Simpsons</class>
    <class kind="struct">dg::SinglestepTimeloop</class>
    <class kind="struct">dg::SinProfX</class>
    <class kind="struct">dg::SinX</class>
    <class kind="struct">dg::SinXCosY</class>
    <class kind="struct">dg::SinXSinY</class>
    <class kind="struct">dg::SinY</class>
    <class kind="struct">dg::SlopeLimiter</class>
    <class kind="struct">dg::SlopeLimiterProduct</class>
    <class kind="struct">dg::SparseBlockMatrixTag</class>
    <class kind="struct">dg::SparseTensor</class>
    <class kind="struct">dg::SQRT</class>
    <class kind="struct">dg::Square</class>
    <class kind="struct">dg::StdMapTag</class>
    <class kind="struct">dg::Sum</class>
    <class kind="struct">dg::SurjectiveComm</class>
    <class kind="struct">dg::TanhProfX</class>
    <class kind="struct">dg::TensorDeterminant2d</class>
    <class kind="struct">dg::TensorDeterminant3d</class>
    <class kind="struct">dg::TensorDot2d</class>
    <class kind="struct">dg::TensorDot3d</class>
    <class kind="struct">dg::TensorMultiply2d</class>
    <class kind="struct">dg::TensorMultiply3d</class>
    <class kind="struct">dg::TensorTraits</class>
    <class kind="struct">dg::TensorTraits&lt; CooSparseBlockMat&lt; T &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; cusp::coo_matrix&lt; I, V, M &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; cusp::csr_matrix&lt; I, V, M &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; cusp::dia_matrix&lt; I, V, M &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; cusp::ell_matrix&lt; I, V, M &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; cusp::hyb_matrix&lt; I, V, M &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; EllSparseBlockMat&lt; T &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; MPI_Vector&lt; container &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; MPIDistMat&lt; L, C &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; RowColDistMat&lt; LI, LO, C &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; std::array&lt; T, N &gt;, std::enable_if_t&lt; !std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; std::array&lt; T, N &gt;, std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; std::map&lt; Key, T &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; std::vector&lt; T &gt;, std::enable_if_t&lt; !std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; std::vector&lt; T &gt;, std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; T, std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; thrust::device_vector&lt; T &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; thrust::host_vector&lt; T &gt;, std::enable_if_t&lt; !std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; thrust::host_vector&lt; T &gt;, std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; View&lt; ThrustVector &gt; &gt;</class>
    <class kind="struct">dg::ThreeDimensionalTag</class>
    <class kind="struct">dg::ThrustVectorTag</class>
    <class kind="struct">dg::Timer</class>
    <class kind="struct">dg::times_equals</class>
    <class kind="struct">dg::TopologyTraits</class>
    <class kind="struct">dg::TripletSum</class>
    <class kind="struct">dg::TwoDimensionalTag</class>
    <class kind="struct">dg::Upwind</class>
    <class kind="struct">dg::UpwindProduct</class>
    <class kind="struct">dg::VanLeer</class>
    <class kind="struct">dg::View</class>
    <class kind="struct">dg::Vortex</class>
    <class kind="struct">dg::WallDistance</class>
    <class kind="struct">dg::ZERO</class>
    <member kind="typedef">
      <type>EllSparseBlockMat&lt; value_type &gt;</type>
      <name>EllSparseBlockMatDevice</name>
      <anchorfile>namespacedg.html</anchorfile>
      <anchor>af46347a6a7dcba646d600853e8983b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CooSparseBlockMat&lt; value_type &gt;</type>
      <name>CooSparseBlockMatDevice</name>
      <anchorfile>namespacedg.html</anchorfile>
      <anchor>a645775be0812a30c16284b3c96e009b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename TensorTraits&lt; std::decay_t&lt; Vector &gt; &gt;::value_type</type>
      <name>get_value_type</name>
      <anchorfile>group__dispatch.html</anchorfile>
      <anchor>ga6cca187a5557469a96917dc4687a22d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename TensorTraits&lt; std::decay_t&lt; Vector &gt; &gt;::tensor_category</type>
      <name>get_tensor_category</name>
      <anchorfile>group__dispatch.html</anchorfile>
      <anchor>ga1cb60b9e327ece9ee05084fe3c75f051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename TensorTraits&lt; std::decay_t&lt; Vector &gt; &gt;::execution_policy</type>
      <name>get_execution_policy</name>
      <anchorfile>group__dispatch.html</anchorfile>
      <anchor>gae65edcfb79d3321ac1e294fb29f3ae23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; T &gt;</type>
      <name>HVec_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga0adc266f31294130dbaa806586409995</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; double &gt;</type>
      <name>HVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga4fb8e78e7b043edfedb880523f0cd193</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; int &gt;</type>
      <name>iHVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga6dcaf6113666c77a4bd46bf93a16ce4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; float &gt;</type>
      <name>fHVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gafb0778d5da5edc4c082822a84f78656e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::device_vector&lt; double &gt;</type>
      <name>DVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga5bbe4ba51ef8ff8d506979d0beda25b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::device_vector&lt; int &gt;</type>
      <name>iDVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga47171b298736a17b3e4ff54ec561f028</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::device_vector&lt; float &gt;</type>
      <name>fDVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga78b0309b2b460fb21919b29701c8dbb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EllSparseBlockMat&lt; T &gt;</type>
      <name>HMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gae32e68aa84de32e2bd1cc52a7b291328</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EllSparseBlockMat&lt; double &gt;</type>
      <name>HMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gac2134505608b45616787fdb2f6eedc87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EllSparseBlockMat&lt; float &gt;</type>
      <name>fHMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gac24d337dc79871e60dfe2360a8a95577</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EllSparseBlockMatDevice&lt; double &gt;</type>
      <name>DMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gafdf2ecb95cbc87a1544136d28d535f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EllSparseBlockMatDevice&lt; float &gt;</type>
      <name>fDMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gacab47883a25bf01af58765f606f88a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::MPI_Vector&lt; dg::HVec_t&lt; T &gt; &gt;</type>
      <name>MHVec_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga67290cbd3eb84059299270977b69652e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::MPI_Vector&lt; dg::HVec &gt;</type>
      <name>MHVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gac127f65b65c035ebe413aee5abffd6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::MPI_Vector&lt; dg::fHVec &gt;</type>
      <name>fMHVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaaeaa5994e3b512003f682181640f8372</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::MPI_Vector&lt; dg::DVec &gt;</type>
      <name>MDVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga1e23fb8b50d38d43beb4bf3689c20a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::MPI_Vector&lt; dg::fDVec &gt;</type>
      <name>fMDVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaaf5a0cd11a882f188d77db14120433ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NearestNeighborComm&lt; dg::iHVec, thrust::host_vector&lt; const T * &gt;, thrust::host_vector&lt; T &gt; &gt;</type>
      <name>NNCH</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga6dee6cd0954be96337660283c421de71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NearestNeighborComm&lt; dg::iDVec, thrust::device_vector&lt; const T * &gt;, thrust::device_vector&lt; T &gt; &gt;</type>
      <name>NNCD</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga4b94b5be119481526eae16a1831bb3a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NNCH&lt; double &gt;</type>
      <name>dNNCH</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga8e6c8b7e3091e961b10fbf646065b670</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NNCH&lt; float &gt;</type>
      <name>fNNCH</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaf58692e972aa256e5034c76cd8c676d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NNCD&lt; double &gt;</type>
      <name>dNNCD</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga89a3930157f77be79532f3d51c7b3db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NNCD&lt; float &gt;</type>
      <name>fNNCD</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gad6239a57d8e92a0a068dff591891dee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::CooSparseBlockMat&lt; T &gt;</type>
      <name>CooMat_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gadc35dcb99c013f7eb16e2754c603c6b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::CooSparseBlockMat&lt; double &gt;</type>
      <name>CooMat</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga00c1e29dbf19330c5e34986229f480a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::CooSparseBlockMat&lt; float &gt;</type>
      <name>fCooMat</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga1aee695fc9310a94ac59294b7b60e8c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::CooSparseBlockMatDevice&lt; double &gt;</type>
      <name>DCooMat</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gad7412ba17b1dc358ecc70361ced85f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::CooSparseBlockMatDevice&lt; float &gt;</type>
      <name>fDCooMat</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga4e62541a4ca94e1eac9c067a781c13cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RowColDistMat&lt; dg::HMatrix_t&lt; T &gt;, dg::CooMat_t&lt; T &gt;, dg::NNCH&lt; T &gt; &gt;</type>
      <name>MHMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga756b7cfbae82f9b5ea00613fb0f58dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RowColDistMat&lt; dg::HMatrix, dg::CooMat, dg::dNNCH &gt;</type>
      <name>MHMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaff79c734c7916054c7dc24e6bc437161</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RowColDistMat&lt; dg::fHMatrix, dg::fCooMat, dg::fNNCH &gt;</type>
      <name>fMHMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gae7dd83d81a27396178672510700e73af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RowColDistMat&lt; dg::DMatrix, dg::DCooMat, dg::dNNCD &gt;</type>
      <name>MDMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaad32454aa2aca3cbb93448d7b5daf005</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RowColDistMat&lt; dg::fDMatrix, dg::fDCooMat, dg::fNNCD &gt;</type>
      <name>fMDMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga56efb28b1175fb5a065dcbe81d678e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealGeometry2d&lt; double &gt;</type>
      <name>aGeometry2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga0194a345f358474eacd0d8fd668ddeb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealGeometry3d&lt; double &gt;</type>
      <name>aGeometry3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga98e551dd078cf173433853670e84d61a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealProductGeometry3d&lt; double &gt;</type>
      <name>aProductGeometry3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gad3d6bea9081a22d2133ce8c42bd5ca46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianGrid2d&lt; double &gt;</type>
      <name>CartesianGrid2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga8df51fc7b7ca691497cc76208da946a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianGrid3d&lt; double &gt;</type>
      <name>CartesianGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga5d7dacfc7e0b065aaa9d8eda3c82a6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCylindricalGrid3d&lt; double &gt;</type>
      <name>CylindricalGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga084778c740b05f14f00bce5c2b5d75e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianGridX2d&lt; double &gt;</type>
      <name>CartesianGridX2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga92f04deac4da71794ee5da5bbdf70d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianGridX3d&lt; double &gt;</type>
      <name>CartesianGridX3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga4ce9a25eebe969f45e73cc953a777891</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealGeometryX2d&lt; double &gt;</type>
      <name>aGeometryX2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga1614909b8085b3521f6eb6a8a7ee2185</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealGeometryX3d&lt; double &gt;</type>
      <name>aGeometryX3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga669637061097e77d4bfede9e74182b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealGrid1d&lt; double &gt;</type>
      <name>Grid1d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga1dd5120253a8a63c3b1ecdd503d6dac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealGrid2d&lt; double &gt;</type>
      <name>Grid2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga4d84634067b1b3362041e211eec4de84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealGrid3d&lt; double &gt;</type>
      <name>Grid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga4a2b08e9a966ea6fe55c74c5c832aabe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealTopology2d&lt; double &gt;</type>
      <name>aTopology2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gae3d12cf3fe25ad7c9ce423df0b5cd5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealTopology3d&lt; double &gt;</type>
      <name>aTopology3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga534001144a75391bd6311a94f1dc6320</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealGridX1d&lt; double &gt;</type>
      <name>GridX1d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga0af6916b3752957a6ab24e32ac1e7d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealGridX2d&lt; double &gt;</type>
      <name>GridX2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gac83f5fa2cb79334851ef12c378caefe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealGridX3d&lt; double &gt;</type>
      <name>GridX3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gae37be47c44253be52072011d75b6f3ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealTopologyX2d&lt; double &gt;</type>
      <name>aTopologyX2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga1d1e9c917d1991849546462956339642</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealTopologyX3d&lt; double &gt;</type>
      <name>aTopologyX3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga203d6aafc7b2b6fc35a1659272e5a4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cusp::csr_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>IHMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga405d290c77c92765dcddb324522d8409</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cusp::csr_matrix&lt; int, real_type, cusp::device_memory &gt;</type>
      <name>IDMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga3dac512c32a3798cd984737a170e91a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IHMatrix_t&lt; double &gt;</type>
      <name>IHMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga3d74638bbcf620f19e3728a07ef1706d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IDMatrix_t&lt; double &gt;</type>
      <name>IDMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaec4df2a8ab65260aed0efeb6f5d115e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealMPIGeometry2d&lt; double &gt;</type>
      <name>aMPIGeometry2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gaa3154d7bab772d2d51f7010838dc36a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealMPIGeometry3d&lt; double &gt;</type>
      <name>aMPIGeometry3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gad92589a12524a79d7bf8feb9c1caccf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealProductMPIGeometry3d&lt; double &gt;</type>
      <name>aProductMPIGeometry3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga4f8e4aa131946e62c3a8b0325956c73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianMPIGrid2d&lt; double &gt;</type>
      <name>CartesianMPIGrid2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga7d8cf3138d84796c7a013f37dda88503</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianMPIGrid3d&lt; double &gt;</type>
      <name>CartesianMPIGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga7a76afa6dd6d1bc5a1f8c115ab776269</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCylindricalMPIGrid3d&lt; double &gt;</type>
      <name>CylindricalMPIGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gab33670c0099181705eda87bf1429b81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealMPIGrid2d&lt; double &gt;</type>
      <name>MPIGrid2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga492b972b6b0822517291a1c0de786996</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealMPIGrid3d&lt; double &gt;</type>
      <name>MPIGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga1a7b625b75effa1be77424511e8a6a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealMPITopology2d&lt; double &gt;</type>
      <name>aMPITopology2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga19c78bb35e3a4a7192c5e484b7dbf8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealMPITopology3d&lt; double &gt;</type>
      <name>aMPITopology3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gab52aaf1578631594a9423e604b2e1232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIDistMat&lt; IHMatrix_t&lt; real_type &gt;, GeneralComm&lt; dg::iHVec, thrust::host_vector&lt; real_type &gt; &gt; &gt;</type>
      <name>MIHMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga383790a28074c1998e9abef496429b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIDistMat&lt; IDMatrix_t&lt; real_type &gt;, GeneralComm&lt; dg::iDVec, thrust::device_vector&lt; real_type &gt; &gt; &gt;</type>
      <name>MIDMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga4368b8e147b1e6b3b90080c3bd813530</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MIHMatrix_t&lt; double &gt;</type>
      <name>MIHMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga6f954391920cbd9b9ec4c7b68fdb7682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MIDMatrix_t&lt; double &gt;</type>
      <name>MIDMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gabed94dc9f33454571b7a124fb3851091</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealRefinement1d&lt; double &gt;</type>
      <name>aRefinement1d</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga1cfe6f739503af0dfefa5b9d73cacd94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealIdentityRefinement&lt; double &gt;</type>
      <name>IdentityRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>gab93b3c971661bfaa425029fc3d56261f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealFemRefinement&lt; double &gt;</type>
      <name>FemRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga96aaed7d8d2ab88c86583a7b336ebb56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealLinearRefinement&lt; double &gt;</type>
      <name>LinearRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga00a2c4dee1c9df122dcb22d33773a70c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealEquidistRefinement&lt; double &gt;</type>
      <name>EquidistRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga1fc3ed9c0e84086363c957a8aaa60c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealExponentialRefinement&lt; double &gt;</type>
      <name>ExponentialRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>gac68dab098eb0c98222e98ad836e8f346</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianRefinedGrid2d&lt; double &gt;</type>
      <name>CartesianRefinedGrid2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gae33f770d1c46285a962e8fb273740847</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianRefinedGrid3d&lt; double &gt;</type>
      <name>CartesianRefinedGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gad86a5ae145abeee9327d23b8835f5624</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealRefinementX2d&lt; double &gt;</type>
      <name>aRefinementX2d</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga1f0f5348b03f19a4e51d6cfc155e65f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealIdentityXRefinement&lt; double &gt;</type>
      <name>IdentityXRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>gaa0a0bdd0f1b1312461690645efaca772</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealEquidistXRefinement&lt; double &gt;</type>
      <name>EquidistXRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>gaa62609aff1a674f8d677c75b034846d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealExponentialXRefinement&lt; double &gt;</type>
      <name>ExponentialXRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga6799c46023dafaa5e880a984f34305c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianRefinedGridX2d&lt; double &gt;</type>
      <name>CartesianRefinedGridX2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga36bab6ae6eb7da83bcf744b97758fb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianRefinedGridX3d&lt; double &gt;</type>
      <name>CartesianRefinedGridX3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga3e02ec4002805e3ba330748bdd1168f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; std::is_const&lt; MPIContainer &gt;::value, MPI_Vector&lt; View&lt; const typename MPIContainer::container_type &gt; &gt;, MPI_Vector&lt; View&lt; typename MPIContainer::container_type &gt; &gt; &gt;</type>
      <name>get_mpi_view_type</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga0dfee7e9924d22270433283dab1799c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AndersonAcceleration&lt; ContainerType &gt;</type>
      <name>FixedPointIteration</name>
      <anchorfile>namespacedg.html</anchorfile>
      <anchor>add1f6996ff3eaa80e3e6720b6898058b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Elliptic&lt; Geometry, Matrix, Container &gt;</type>
      <name>Elliptic2d</name>
      <anchorfile>group__matrixoperators.html</anchorfile>
      <anchor>gae40a319b095c51491395216d59fd8645</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Helmholtz&lt; Geometry, Matrix, Container &gt;</type>
      <name>Helmholtz2d</name>
      <anchorfile>group__matrixoperators.html</anchorfile>
      <anchor>ga97e96ca43b1ba76d3f820afc72b1d753</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ERKStep&lt; ContainerType &gt;</type>
      <name>RungeKutta</name>
      <anchorfile>group__time.html</anchorfile>
      <anchor>ga1c36951320edd6d3b16e688acb3cdf28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DIRKStep&lt; ContainerType &gt;</type>
      <name>ImplicitRungeKutta</name>
      <anchorfile>group__time.html</anchorfile>
      <anchor>ga46daa0f5d4dda544f20c12af17ee642a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>dist_type</name>
      <anchorfile>group__mpi__structures.html</anchorfile>
      <anchor>ga521b6d6524a6d391c746ddc9a1ad5571</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>row_dist</name>
      <anchorfile>group__mpi__structures.html</anchorfile>
      <anchor>gga521b6d6524a6d391c746ddc9a1ad5571a99ba8c51e9d19b4535a343c4b471a562</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>col_dist</name>
      <anchorfile>group__mpi__structures.html</anchorfile>
      <anchor>gga521b6d6524a6d391c746ddc9a1ad5571a4bdc977f2b0fcd3ad828d30c7fd3fb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>bc</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga59440bdf436f2874b49aa52b670ed364</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PER</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga59440bdf436f2874b49aa52b670ed364a948704f60491461974ce4fe6339778b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIR</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga59440bdf436f2874b49aa52b670ed364adece0b7644d85f490823799a3b97f7e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIR_NEU</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga59440bdf436f2874b49aa52b670ed364ae1ff2b85fda37868973c8059e3ca3a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEU_DIR</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga59440bdf436f2874b49aa52b670ed364a5832830f6fb508b8932dbafad3d1b57c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEU</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga59440bdf436f2874b49aa52b670ed364ad8a2f69a62e7fdafe1665ae7162e8e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>direction</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gabf9ea3df33484cbb5886e257c3899e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>forward</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ggabf9ea3df33484cbb5886e257c3899e48a573a4a72e7f55df92b88c254a13762f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backward</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ggabf9ea3df33484cbb5886e257c3899e48a3e10d2598f5b58a930631b12774e05cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>centered</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ggabf9ea3df33484cbb5886e257c3899e48a6281b4fc609cb723a615662b5adac9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>space</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga720a6f709941a075d5c8f60ef07c619f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lspace</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga720a6f709941a075d5c8f60ef07c619fadb68409ea987968e600f19adcb7b4538</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xspace</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga720a6f709941a075d5c8f60ef07c619fa235752009881e59ab3ad8de2b904cb85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>coo2d</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gace76090e6c95d39b59a1dee2db968d14</anchor>
      <arglist></arglist>
      <enumvalue file="group__creation.html" anchor="ggace76090e6c95d39b59a1dee2db968d14a9dd4e461268c8034f5c8564e155c67a6">x</enumvalue>
      <enumvalue file="group__creation.html" anchor="ggace76090e6c95d39b59a1dee2db968d14a415290769594460e2e485922904f345d">y</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>coo3d</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga4de4a3d7cd219a55affa992871e8598f</anchor>
      <arglist></arglist>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fa9dd4e461268c8034f5c8564e155c67a6">x</enumvalue>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fa415290769594460e2e485922904f345d">y</enumvalue>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fafbade9e36a3f36d3d676c1b808451dd7">z</enumvalue>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fa3e44107170a520582ade522fa73c1d15">xy</enumvalue>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fa2151a2bc77807b81113febbf50c4bc95">yz</enumvalue>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fadbd69ee9ae289a85ea34dbef8435d7c1">xz</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>multistep_identifier</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gaac3c0875ffdfb49fd06757312d1a599a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_EULER_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaa269d9523f1c0f2858ee7b2da2ddc005</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_ADAMS_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aacc1309c56b3b0e0653994f4c6e014f33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_ADAMS_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa5bb9056d420aaeb9e3ed58136788e11d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_KOTO_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa34804fa61f76b9679a882c928f3462d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_BDF_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aadaf5bf7573374c4f5b44d1d934f308a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_BDF_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaf44dc27d112d9de8bd859ba62e38677c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_BDF_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaff41ac46e970b725f824c57d2ff0c2ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_BDF_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aabdae14d1438b8af8ff1b54f7dcb06828</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_BDF_6_6</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa0e2ee05fd28d6c9bae46d53fd4be43a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_TVB_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa840e7133e47fb2d1d7c166807905f451</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_TVB_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaceb8719308ce29c90d18752f117a2aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_TVB_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa10d9fcc00b0bf78b817cd71d21367fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AB_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad2c9973f9153af4b29d1add4805f47b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AB_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aab1386c9d5a2d64424474a99fb889e9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AB_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaab6f79d9df61b2b38d0e8dd0e1f3b9d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AB_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa914125af18febec863b5a22630474178</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AB_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa03d11029f838ad183dac2974b1b2a384</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa64515aafdb384eee7fb97055fbf93201</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad31c62796e3f306115534b62319e76c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa70963938334c7aedeeb8921263f5d2da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa1d6eedb45062eb65c95773efa936a129</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa44d87eb40f5a4def96d3d0ae9b3a7157</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_6_6</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa94116d3b48d3117fd4cd0503f723765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa5c510519cfd2d686f29f3c47cb8a614d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad823e4c6572c36795163f0b8072523b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa769997c3f2c299e12b80667cb4a5b512</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa3401178a76a93aaaa6cb61950ff6f38f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad94ccd05d4f4f065b04da52366d61505</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_6_6</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaeaffc843538e5e4b08bc8d7303a4a447</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa7d7e3674e686fca44fbcd6d36180b97a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa1caadeb75a2d464e5fdd55eef44ff054</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_3_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa21b18996d8e102a9cc885dcd8640c176</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_4_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa36daa3f359c34a46063a9a6a81c3ed8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_5_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad04a42fb019d1a03a754fd5a112ebcd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_6_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad8ecff70e32e9791e9acbfbdfa16f32c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad74099cd8e1f7fb5382e6c8b76520ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa207c93e73d0b96d72b72aaeb71ba00fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa9bf8f614933c778f81bdaa31ed620c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aacd389d17f5639c2188df07a9d100d40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa2185f0a54ba684ddec33493fccfe2d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_6_6</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa11ebe6949bb01634a2f4b3402c2c15ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>tableau_identifier</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ga80d4d81df02e5311bb20b3f74ea45992</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPLICIT_EULER_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a5679da92a2aeff58e4d1d8dd0950bfb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIDPOINT_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a53589c3f492267933d52411a91abe87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KUTTA_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ae9e2f280b69980d9f3a31b1af3e0f1c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLASSIC_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a9563ea198fa964124c2e1797882452ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HEUN_EULER_2_1_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a969e565c5774496edc78deb801ab2ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAVAGLIERI_3_1_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a8264b86603c2e301b45c4de154b1cf70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEHLBERG_3_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a801b6c262788a5b582bae3d11c242096</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEHLBERG_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a510e328ffc5ba91b159daf64a46d0bd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOGACKI_SHAMPINE_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ab5342d81c85674726787aa3b494f63b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAVAGLIERI_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a5a6c2a78ebffa849bb4acac939d3dc5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK324L2SA_ERK_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ad6386c96898e925be6781c3c68310c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZONNEVELD_5_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ad40588a67499cabb21074dfdae448041</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK436L2SA_ERK_6_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a617285cf8cc8b5c0b7c0c99a0eed7b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAYFY_ABURUB_6_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a4f13e6b1d5695276f8f99e07d86f5667</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CASH_KARP_6_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a896ad5875cfc107eb383d4880fbe5184</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEHLBERG_6_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ae40966a5ad092b052a51188a05c6ea47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DORMAND_PRINCE_7_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a5e964b2560e1c1b03d280c766fc5a129</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSITOURAS09_7_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ac51ce9d53bf2dce19d9b88e3212281df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSITOURAS11_7_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a3c68b6845f08dc4a80e22b45599f3493</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK548L2SA_ERK_8_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ae3f4bc121a421ca3501bfae79943a134</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERNER_9_5_6</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992aed58d2f2fa58b129b3260d00d6601e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERNER_10_6_7</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a4d1077dab812d38d3830c031444eb296</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEHLBERG_13_7_8</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a728a76f092f543a1ab3de59110857d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DORMAND_PRINCE_13_7_8</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a448f4a686cd23e40f778abe1d3dabcd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEAGIN_17_8_10</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a8d9f6fc38535d5c30a2ca1d2133a9b75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMPLICIT_EULER_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a5d4c148035a981dfce0fe5b0f481a1fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMPLICIT_MIDPOINT_1_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ab353c6e09d40ddc610382f44fccc5c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAPEZOIDAL_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992aee900e737927e97c9c60394acbff1afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDIRK_2_1_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a72bd02f1580c5bb96958efa4f511f8aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAVAGLIERI_IMPLICIT_3_1_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a0e24a6b1b6a405ff2346db38a0c43235</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BILLINGTON_3_3_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a5ffadf91baa3b323a4e1407cf2f42926</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRBDF2_3_3_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992aea4ea0cbea708f0db5605fb2b3444834</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KVAERNO_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a4237a65080e211e5eedc4d9998bb1e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAVAGLIERI_IMPLICIT_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a8c7a4af3ca50f8e2489eb1ce8d16e194</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK324L2SA_DIRK_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a6fc7f6581d7f900694db6c8e91a17281</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CASH_5_2_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a2199f11f4b226c6803b65a1a7168b87a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CASH_5_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a534549bf28e481c52c64871dcd48d8c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDIRK_5_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ababbb34a98a801e7cc89920a1daa4d9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KVAERNO_5_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a7e0890fc92aaf7c8867b364d22c8ac22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK436L2SA_DIRK_6_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ab4f90835b6871a2dc7a7e2151ee8ab34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KVAERNO_7_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992abbedd7f8ef68aea027dc79e60df79b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK548L2SA_DIRK_8_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ad17ee32bcc10dbb681d704e9dc3d0425</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSPRK_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a0adf7035ccb1108b9cab4539a505ca1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSPRK_3_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a6ec030e91579ee35ac9c2d1f4fd00c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSPRK_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a0eb5270409e6b03447ee549379e2f78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSPRK_5_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a2a46be9d458c9586fd219956c016c3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSPRK_5_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a55f0423ae9d22f05d48f8cfd0ee10278</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transpose</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>gaf9b1ec92041d094f14481ad8169d12c4</anchor>
      <arglist>(unsigned nx, unsigned ny, const ContainerType &amp;in, ContainerType &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extend_line</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga22daca05d0d7672ed8c4f5da982cf49b</anchor>
      <arglist>(unsigned nx, unsigned ny, const ContainerType &amp;in, ContainerType &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extend_column</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga00707a09c19ba5fdde979339ae959506</anchor>
      <arglist>(unsigned nx, unsigned ny, const ContainerType &amp;in, ContainerType &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>asDenseMatrix</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>gad9756e05d8a674f20562b0811104279d</anchor>
      <arglist>(const std::vector&lt; const ContainerType * &gt; &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>asDenseMatrix</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>ga816c360401736b6c0897186fefdf1e4b</anchor>
      <arglist>(const std::vector&lt; const ContainerType * &gt; &amp;in, unsigned size)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; const ContainerType * &gt;</type>
      <name>asPointers</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>ga353dc6b8616f337e9f02638ac60bf640</anchor>
      <arglist>(const std::vector&lt; ContainerType &gt; &amp;in)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>gac50f6a57627e38ea44e3666543a6c878</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init2d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga057746b047d7696a603d27bdaff24f29</anchor>
      <arglist>(dg::bc bcx, dg::bc bcy, MPI_Comm &amp;comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init2d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga632d3e4c7753d9988a16be5cb0ba3e05</anchor>
      <arglist>(unsigned &amp;n, unsigned &amp;Nx, unsigned &amp;Ny, MPI_Comm comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init2d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga89f67b920ce6f3958eea9e94d00a72fa</anchor>
      <arglist>(dg::bc bcx, dg::bc bcy, unsigned &amp;n, unsigned &amp;Nx, unsigned &amp;Ny, MPI_Comm &amp;comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init3d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga2ba128f78f1497a9d85fb97402f90791</anchor>
      <arglist>(dg::bc bcx, dg::bc bcy, dg::bc bcz, MPI_Comm &amp;comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init3d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga5af0e700d39ee4672deecff4c8bbee92</anchor>
      <arglist>(unsigned &amp;n, unsigned &amp;Nx, unsigned &amp;Ny, unsigned &amp;Nz, MPI_Comm comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init3d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga08fc202782d026a385be5ac44f549c90</anchor>
      <arglist>(dg::bc bcx, dg::bc bcy, dg::bc bcz, unsigned &amp;n, unsigned &amp;Nx, unsigned &amp;Ny, unsigned &amp;Nz, MPI_Comm &amp;comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>transpose</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gaccb5652aaa2d450d97996d4eee6de546</anchor>
      <arglist>(const Matrix &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>ga2ded9cafaf270f37c3244e20f1712d1d</anchor>
      <arglist>(const Functor &amp;f, const aRealGeometryX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>gaf86ba85b41523249e5944efc9fc0aec9</anchor>
      <arglist>(const Functor &amp;f, const aRealGeometryX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>gac802d2b4de66df9ce2282e378461ce28</anchor>
      <arglist>(UnaryOp f, const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>gab8cdd6517dd365cc723e4a14a4262d6a</anchor>
      <arglist>(const BinaryOp &amp;f, const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga0cdefb87e015db3d39efcbefd67d5a31</anchor>
      <arglist>(const TernaryOp &amp;f, const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>integrate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>gab6de23408df0b54689509b993f314d4d</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;in, const RealGrid1d&lt; real_type &gt; &amp;g, dg::direction dir=dg::forward)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>integrate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga35440c55be7797b50b31b23cc07dd37d</anchor>
      <arglist>(UnaryOp f, const RealGrid1d&lt; real_type &gt; &amp;g, dg::direction dir=dg::forward)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga98abe51c6b7d3c646f412635f135eb38</anchor>
      <arglist>(UnaryOp f, const RealGridX1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga5968e5042cb5d2e2b000a6178e146e49</anchor>
      <arglist>(const BinaryOp &amp;f, const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga8e708ce1a36994a538e3e7a0cca742e3</anchor>
      <arglist>(const TernaryOp &amp;f, const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gabab1bdc50508bd0f04f3cd0b45dd72e3</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gada629959f5298f4221d35fd8cb880a0d</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gae7ba1400d58619bc271c6611acf5994b</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gad1e45796f68232b124d0f5baea6fceca</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gad0bd961c4529039c4e651fc9e3901f60</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga6d27b092dcd9613c1c5eeaa1cf208e83</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooX1d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga21055512458a88c314621a912fb1417f</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooX2d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gadb49e10685e2bcdd8a27ef88f2857151</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooX3d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gadd9ae95517a739c80452afc7fc9c36ae</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooY2d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga5aa995cf5e888c9ee1026b78f6f78cc5</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooY3d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gaafbff988d4cff4a0643e819b3f6962cc</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooZ3d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga89a354d8268ca0f86486a93683fda7d4</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooRZP2X</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga26a17efec5c3e1e916ebc05914f185b9</anchor>
      <arglist>(double R, double Z, double P)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooRZP2Y</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga801437c88f9b783bdadd96d81c110a8a</anchor>
      <arglist>(double R, double Z, double P)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooRZP2Z</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gab6859f8360cdc1ab30404589070ca4e5</anchor>
      <arglist>(double R, double Z, double P)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga6157ca9bd4d2ffec4b6bd7c22ed073fe</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga99d493917c25c36d4e82248fcebd7550</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gabadfb8fdc2962f824d2b1fe1c0e73cd5</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga44292f31f77c0cad8a3d8e0a88c7840b</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga0b38e6d17d96de78beedafc4c9e4437e</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga43b7fe30d4e22f1cf3dace0dd474c7d9</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>forward_transform</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>gad09541da41129a4ccdb3623deaa5f364</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;in, const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>interpolate</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gad1467be84fa682c8b300cd39db0492d9</anchor>
      <arglist>(dg::space sp, const thrust::host_vector&lt; real_type &gt; &amp;v, real_type x, const RealGrid1d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>interpolate</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gaa9fc6abad143444993021781bbed9b48</anchor>
      <arglist>(dg::space sp, const thrust::host_vector&lt; real_type &gt; &amp;v, real_type x, real_type y, const aRealTopology2d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>interpolate</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga3f3b02e7ec191c8fcf1fc258599617f7</anchor>
      <arglist>(dg::space sp, const thrust::host_vector&lt; real_type &gt; &amp;v, real_type x, real_type y, const aRealTopologyX2d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga5975f3c6f3d0eb5f23ed3f3021061cd9</anchor>
      <arglist>(const BinaryOp &amp;f, const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga1fa625595f6416e1d162a11b559cef1e</anchor>
      <arglist>(const TernaryOp &amp;f, const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>global2local</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gadb538d54e0a5a47fd2f810910f2b42bd</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;global, const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>global2local</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga4b115ff16353ceadca2c0f63d7d42214</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;global, const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>convert</name>
      <anchorfile>group__mpi__structures.html</anchorfile>
      <anchor>gab037631f28f2fa5d19fd58893c89e986</anchor>
      <arglist>(const dg::IHMatrix_t&lt; real_type &gt; &amp;global, const ConversionPolicy &amp;policy)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; T &gt;</type>
      <name>tensorproduct</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga25d57ef17c414c1f1b7925c49b43e256</anchor>
      <arglist>(const Operator&lt; T &gt; &amp;op1, const Operator&lt; T &gt; &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, T, cusp::host_memory &gt;</type>
      <name>tensorproduct</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gad66cb579087e7c2104ea1f23bf2e0f01</anchor>
      <arglist>(unsigned N, const Operator&lt; T &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, T, cusp::host_memory &gt;</type>
      <name>sandwich</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga3cd6e8f0b5021e66f03fe7010e921c2e</anchor>
      <arglist>(const Operator&lt; T &gt; &amp;left, const cusp::coo_matrix&lt; int, T, cusp::host_memory &gt; &amp;m, const Operator&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcd</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga008408676aea2583d10dc001e9b8b9f1</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lcm</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>gae521421a2db99cf793bb0f2cd5a16126</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gab3c8c6e962a08fd1f5a9ae432959fe6a</anchor>
      <arglist>(SharedContainer &amp;in, std::vector&lt; View&lt; SharedContainer &gt; &gt; &amp;out, const aRealTopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; View&lt; SharedContainer &gt; &gt;</type>
      <name>split</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gac53bcdbcd4965f823b0e42b3f6bc4934</anchor>
      <arglist>(SharedContainer &amp;in, const aRealTopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign3dfrom2d</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga0821f41b95af4def23af0a71a64ae3d2</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;in2d, Container &amp;out, const aRealTopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga4a2763b6f9cfb9187f02b0c3fc07b60b</anchor>
      <arglist>(MPIContainer &amp;in, std::vector&lt; get_mpi_view_type&lt; MPIContainer &gt; &gt; &amp;out, const aRealMPITopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; get_mpi_view_type&lt; MPIContainer &gt; &gt;</type>
      <name>split</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gaee4537d6d483858e5bd28ad77607ffb8</anchor>
      <arglist>(MPIContainer &amp;in, const aRealMPITopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign3dfrom2d</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga338acc974d9ae6068439a7ea35500fb5</anchor>
      <arglist>(const MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt; &amp;in2d, MPI_Vector&lt; LocalContainer &gt; &amp;out, const aRealMPITopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>ga26cd8cf86c9a9d99ca23d153de1e60fd</anchor>
      <arglist>(const Functor &amp;f, const aRealGeometry2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>ga9c2b51bebd46cc7df7d889e577705d1e</anchor>
      <arglist>(const Functor &amp;f, const aRealGeometry3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>gae45584831ec2f50a2c237d709c9ff555</anchor>
      <arglist>(const Functor &amp;f, const aRealMPIGeometry2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>gad6f6fccd5946018b396e67d654ea8c84</anchor>
      <arglist>(const Functor &amp;f, const aRealMPIGeometry3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushForwardPerp</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>gab8b4c0a46bf70e59e456df9bf8a68e0d</anchor>
      <arglist>(const Functor1 &amp;vR, const Functor2 &amp;vZ, container &amp;vx, container &amp;vy, const Geometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushForward</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>gaf1b8e5426e47a83f079b723dcad325e5</anchor>
      <arglist>(const Functor1 &amp;vR, const Functor2 &amp;vZ, const Functor3 &amp;vPhi, container &amp;vx, container &amp;vy, container &amp;vz, const Geometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushForwardPerp</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>ga0184e8f7d99dcfde909c850ff4f85c0b</anchor>
      <arglist>(const FunctorRR &amp;chiRR, const FunctorRZ &amp;chiRZ, const FunctorZZ &amp;chiZZ, SparseTensor&lt; container &gt; &amp;chi, const Geometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, T, cusp::host_memory &gt;</type>
      <name>tensorproduct</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gab315055e9fda5fb02a13483bf99d368a</anchor>
      <arglist>(const cusp::coo_matrix&lt; int, T, cusp::host_memory &gt; &amp;lhs, const cusp::coo_matrix&lt; int, T, cusp::host_memory &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>integrate</name>
      <anchorfile>group__time.html</anchorfile>
      <anchor>ga99d218bc1124774a3d98e6bdb0d8eb14</anchor>
      <arglist>(std::string name, ODE &amp;&amp;ode, value_type t0, const ContainerType &amp;u0, value_type t1, ContainerType &amp;u1, value_type dt, ControlFunction control, ErrorNorm norm, value_type rtol, value_type atol=1e-10, value_type reject_limit=2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>integrateERK</name>
      <anchorfile>group__time.html</anchorfile>
      <anchor>ga431f63d850976184cca25d5e832661ad</anchor>
      <arglist>(std::string name, ODE &amp;ode, value_type t0, const ContainerType &amp;u0, value_type t1, ContainerType &amp;u1, value_type dt, ControlFunction control, ErrorNorm norm, value_type rtol, value_type atol=1e-10, value_type reject_limit=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>group__backend.html</anchorfile>
      <anchor>gab0ca1b8d3f70004e25ddc2010f7e9e0d</anchor>
      <arglist>(const from_ContainerType &amp;from, ContainerType &amp;to, Params &amp;&amp;... ps)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType</type>
      <name>construct</name>
      <anchorfile>group__backend.html</anchorfile>
      <anchor>ga5dbfc632d4d66d2d926dd525ed7fcea8</anchor>
      <arglist>(const from_ContainerType &amp;from, Params &amp;&amp;... ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>group__backend.html</anchorfile>
      <anchor>gab8d14b7a823d92037add5899d611d7d9</anchor>
      <arglist>(get_value_type&lt; ContainerType1 &gt; alpha, MatrixType &amp;&amp;M, const ContainerType1 &amp;x, get_value_type&lt; ContainerType1 &gt; beta, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>group__backend.html</anchorfile>
      <anchor>gac419b379a849c48dc3a60ef1e4662166</anchor>
      <arglist>(MatrixType &amp;&amp;M, const ContainerType1 &amp;x, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>bc2str</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaaddc055ad4bead1c127e85c0242e64d4</anchor>
      <arglist>(bc bcx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bc</type>
      <name>str2bc</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga92d83820c2595e12cdff8edb406838f1</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bc</type>
      <name>inverse</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga2fdc7785fdfc55782f5b1b89e5b2dcaa</anchor>
      <arglist>(bc bound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static direction</type>
      <name>str2direction</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gab4d2b5f9ab2d0a8859ffd71d2df85aa1</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>direction2str</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaceda4c77ab8090ef94a943a2d26c11eb</anchor>
      <arglist>(enum direction dir)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static direction</type>
      <name>inverse</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gabcf2294b804eb9fb8bd0bfb8f9d1dcbf</anchor>
      <arglist>(direction dir)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>least_squares</name>
      <anchorfile>group__extrapolation.html</anchorfile>
      <anchor>gaa9846741f5726f11339179f913f0b855</anchor>
      <arglist>(const std::vector&lt; ContainerType0 &gt; &amp;bs, const ContainerType1 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_default_solver</name>
      <anchorfile>namespacedg.html</anchorfile>
      <anchor>a0315e003319d9a1194625a274c25afed</anchor>
      <arglist>(Implicit &amp;im, const ContainerType &amp;copyable, unsigned max_iter, get_value_type&lt; ContainerType &gt; eps, bool benchmark=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nested_iterations</name>
      <anchorfile>group__multigrid.html</anchorfile>
      <anchor>ga1aca7222c69b765e8d304791595c09cb</anchor>
      <arglist>(NestedOperator &amp;&amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op, Nested &amp;nested)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multigrid_cycle</name>
      <anchorfile>group__multigrid.html</anchorfile>
      <anchor>ga7350dc0405686518b82a740bd74b5584</anchor>
      <arglist>(NestedOperator &amp;&amp;op, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_down, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_up, Nested &amp;nested, unsigned gamma, unsigned p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>full_multigrid</name>
      <anchorfile>group__multigrid.html</anchorfile>
      <anchor>ga72b81008cfe6a0d945666c780fa51460</anchor>
      <arglist>(NestedOperator &amp;&amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_down, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_up, Nested &amp;nested, unsigned gamma, unsigned mu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fmg_solve</name>
      <anchorfile>group__multigrid.html</anchorfile>
      <anchor>ga45acbff86a36af9288623b670de0a882</anchor>
      <arglist>(NestedOperator &amp;&amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_down, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_up, Nested &amp;nested, const ContainerType2 &amp;weights, double eps, unsigned gamma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nested_iterations</name>
      <anchorfile>namespacedg.html</anchorfile>
      <anchor>a3883dd15865bab43a25b6d619af20814</anchor>
      <arglist>(NestedOperator &amp;&amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; inverse_op, Nested &amp;nested)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multigrid_cycle</name>
      <anchorfile>namespacedg.html</anchorfile>
      <anchor>a04c0537d20379eb25a4846c9245b4fff</anchor>
      <arglist>(NestedOperator &amp;&amp;op, std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; inverse_op, Nested &amp;nested, unsigned gamma, unsigned p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>full_multigrid</name>
      <anchorfile>namespacedg.html</anchorfile>
      <anchor>a7542fca8122badcbffe18f4f1b9ff373</anchor>
      <arglist>(NestedOperator &amp;&amp;op, std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; inverse_op, Nested &amp;nested, unsigned gamma, unsigned mu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fmg_solve</name>
      <anchorfile>namespacedg.html</anchorfile>
      <anchor>aaae9651882d213318293eeb1abea3542</anchor>
      <arglist>(NestedOperator &amp;&amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; inverse_op, Nested &amp;nested, const ContainerType2 &amp;weights, double eps, unsigned gamma)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bisection1d</name>
      <anchorfile>group__invert.html</anchorfile>
      <anchor>ga6331aa115bfceea681fa5ba85fa05a25</anchor>
      <arglist>(UnaryOp &amp;op, double &amp;x_min, double &amp;x_max, const double eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stepperRK</name>
      <anchorfile>group__time.html</anchorfile>
      <anchor>ga95cb7ed53ca75810f7027cd6d9f3f904</anchor>
      <arglist>(ConvertsToButcherTableau&lt; get_value_type&lt; ContainerType &gt; &gt; tableau, RHS &amp;rhs, get_value_type&lt; ContainerType &gt; t_begin, const ContainerType &amp;begin, get_value_type&lt; ContainerType &gt; t_end, ContainerType &amp;end, unsigned N)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>compose</name>
      <anchorfile>group__composition.html</anchorfile>
      <anchor>gad6daa85bcb28b9caa934ed25dcc6f2bc</anchor>
      <arglist>(UnaryOp f, Functor g)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>compose</name>
      <anchorfile>group__composition.html</anchorfile>
      <anchor>ga13fbfae48d792100f96097c6df0376ab</anchor>
      <arglist>(UnaryOp f0, Functors... fs)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>l2norm</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ga40758fa443b6728e1499c7ee16820c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>fast_l2norm</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gac821e1bd12a9e5c2917effafc86b16ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>i_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gaabae9e3a1936ae25cb5ad3bac7f007e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>pi_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gab9435b144161cda6434c7fe0416b4896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>pid_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ga3da5b4b68cceaf18e4c0dd80629d9bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>ex_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ga32b696f59effe7da0f61b68275f6b180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>im_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gacb1d6582ef865f0a098994190f13be15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>imex_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ga3d078141617f2e4fe33df24f289ac6af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>dg::blas1</name>
    <filename>namespacedg_1_1blas1.html</filename>
    <member kind="function">
      <type>get_value_type&lt; ContainerType1 &gt;</type>
      <name>dot</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gaf00778ded011a9f6e8b885924d9306ee</anchor>
      <arglist>(const ContainerType1 &amp;x, const ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>OutputType</type>
      <name>reduce</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga61cf5da3d6fd6325cb24522b7ac8a037</anchor>
      <arglist>(const ContainerType &amp;x, OutputType zero, BinaryOp binary_op, UnaryOp unary_op=UnaryOp())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga0ed8d5b1a17d0e8882b2d253a0d3fbed</anchor>
      <arglist>(const ContainerTypeIn &amp;source, ContainerTypeOut &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scal</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gaa761a1672f82cf652ecb9382c9ebe525</anchor>
      <arglist>(ContainerType &amp;x, get_value_type&lt; ContainerType &gt; alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga48c9fe0980973ca1170b48ed6a800306</anchor>
      <arglist>(ContainerType &amp;x, get_value_type&lt; ContainerType &gt; alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpby</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga5c7ddbf70dd74867e45c9d4f40b36cf7</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x, get_value_type&lt; ContainerType &gt; beta, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpbypgz</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga5ba146d8c2d13dbeb412ff6130233422</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x, get_value_type&lt; ContainerType &gt; beta, const ContainerType2 &amp;y, get_value_type&lt; ContainerType &gt; gamma, ContainerType &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpby</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga0dfb1435b0a4d429d4cd2e8c265cd209</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x, get_value_type&lt; ContainerType &gt; beta, const ContainerType2 &amp;y, ContainerType &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDot</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gad2dcd7cffe760b7bacfdd7647d86e602</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x1, const ContainerType2 &amp;x2, get_value_type&lt; ContainerType &gt; beta, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDot</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga117cb07cd3e8b6a8580bb42a9c00ab40</anchor>
      <arglist>(const ContainerType1 &amp;x1, const ContainerType2 &amp;x2, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDot</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gad8bde5930a50e3cf58af5c19f765ac8e</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x1, const ContainerType2 &amp;x2, const ContainerType3 &amp;x3, get_value_type&lt; ContainerType &gt; beta, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDivide</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gab38b907a9fb2f7039d9a6ffb1c46b649</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x1, const ContainerType2 &amp;x2, get_value_type&lt; ContainerType &gt; beta, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDivide</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga4e30e54e32bab62357425a0240d519ea</anchor>
      <arglist>(const ContainerType1 &amp;x1, const ContainerType2 &amp;x2, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDot</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga12ce2a470cebd649636725f30d88bf97</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x1, const ContainerType2 &amp;y1, get_value_type&lt; ContainerType &gt; beta, const ContainerType3 &amp;x2, const ContainerType4 &amp;y2, get_value_type&lt; ContainerType &gt; gamma, ContainerType &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga493c6b70c8c889beaec1c3a669e3809b</anchor>
      <arglist>(const ContainerType1 &amp;x, ContainerType &amp;y, UnaryOp op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gaad7b58d466d813898b68189b44619210</anchor>
      <arglist>(ContainerType &amp;y, BinarySubroutine f, Functor g, const ContainerType0 &amp;x0, const ContainerTypes &amp;...xs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subroutine</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga7386b5cb0144d5364b8ea8c8ce1482a5</anchor>
      <arglist>(Subroutine f, ContainerType &amp;&amp;x, ContainerTypes &amp;&amp;... xs)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>dg::blas2</name>
    <filename>namespacedg_1_1blas2.html</filename>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>gac3840941bd2bb1d64c6ca3fef1f1b960</anchor>
      <arglist>(MatrixType &amp;&amp;M, const ContainerType1 &amp;x, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>ga9bd2015d31362b25d61110f91cf3b0b9</anchor>
      <arglist>(get_value_type&lt; ContainerType1 &gt; alpha, MatrixType &amp;&amp;M, const ContainerType1 &amp;x, get_value_type&lt; ContainerType1 &gt; beta, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>get_value_type&lt; MatrixType &gt;</type>
      <name>dot</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>gaee53d6bf6aa0ca3059a49ea696d4d158</anchor>
      <arglist>(const ContainerType1 &amp;x, const MatrixType &amp;m, const ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>get_value_type&lt; MatrixType &gt;</type>
      <name>dot</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>ga8360dc43dc76d7ff585f3a570998f942</anchor>
      <arglist>(const MatrixType &amp;m, const ContainerType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gemv</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>ga1b7e3b58697b6e93169eebbda63f3ed3</anchor>
      <arglist>(get_value_type&lt; ContainerType1 &gt; alpha, MatrixType &amp;&amp;M, const ContainerType1 &amp;x, get_value_type&lt; ContainerType1 &gt; beta, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gemv</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>ga5f7f59acf79dc654da64ca7e8f212284</anchor>
      <arglist>(MatrixType &amp;&amp;M, const ContainerType1 &amp;x, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transfer</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>ga53701ba3118a2256a93a4d92a7a8a597</anchor>
      <arglist>(const MatrixType &amp;x, AnotherMatrixType &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>dg::create</name>
    <filename>namespacedg_1_1create.html</filename>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga19d86301feafbcf0f986df9f63c203fe</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga0157ec973f63c324b8c72b8fd9194a70</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga86375a7140c179bd4c3cabba4da575f9</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga61716a842cf5da26e59795259faebd45</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga7a8fe217c53df1ce6eb31aea79bbc5fa</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gad32f4cb21d1bd953283065a3e0ff940f</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga1ba152b26d4492e9535733c038e78843</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga0f712148b923339c0b42859b26359cfe</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaf2b77b92859e81527794089d0d6bf891</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga9c234aa10cd37de14c3d827308e2d0a5</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga1cffbbd2dd3eb02bcda52455af72f4f0</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcz)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gafc06291468fee7918f7dc62a2939eba9</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga34008552fdd778e62eafca9b37da26dc</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gab38bec364ae85e94491cb09c7a215cef</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga16557006323eed616c8d45e05cfae5a0</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga1eaec221690c13f5feb07ebfab40bca6</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gad073e0a0872e9c03e91922571e785f09</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaee6a6764e3e76f6d7fe56a949c6ba208</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga17b5c97575982191a5b7c27174f15d00</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcz, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaeba96ae078dd84ed86fe046d63b21086</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga48f3c7759bfaa3d80fba9626d8ca59ed</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaed7c326e41d9d945f3de9514f29f3ebc</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gabd62ae0b90eba03a14e89c6ab7d1b20d</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaa17ea30b4dd25376c07807d58853b480</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga89b6058aea9dcba65a5fdf1f8106e623</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae027e57ec6456cd001ba15ed89f355e1</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga58b769e4bfe004be71c8d98dc7b275e5</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga215013447785631b7d43674b5a34ac9f</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga513df5a4db8cd15c94681a3fdc0ab2ca</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae81e3400be9e3b446ac3b7f999598c94</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae0fde938ba7e5977ee93e0b4642f10ed</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcz)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaaaa22110d64f6eb848264c870e971b97</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga8fe99e84fe4f5f6f9d5962461acf5e62</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gac0fcb281875f3445526640b94ddc9293</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga4c9b8a22ea7a8b2475337b9863d3a5ae</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga2fdab3d9e7a46489ff487e8044d4cc23</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga7c2b37276fef32694e3f32e455a99f6f</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae25e2bb0cc6ff5d48caed87bbc1496d1</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga4a428cfef0dc63826553c6340a0aa7b4</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcz, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga3dd6040824cd33b522a8c982df82817a</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx_symm</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gabf3ebafa08e328b1a53e98f27cfae152</anchor>
      <arglist>(int n, int N, real_type h, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx_plus</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga656c48eec6285e73ae253885ca9a8634</anchor>
      <arglist>(int n, int N, real_type h, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx_minus</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gae4fb5a64296b4e1ab205ebbab96113fe</anchor>
      <arglist>(int n, int N, real_type h, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jump</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gad31885319d447aad09d97a6d5f3552df</anchor>
      <arglist>(int n, int N, real_type h, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx_normed</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga052a8bc5d6353c10a9a324c2b130662c</anchor>
      <arglist>(int n, int N, real_type h, bc bcx, direction dir)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae3a4ca18ffe8583d86682b24a719abd7</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gab7fd80865c73611fc731bafa288683ed</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jump</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gac9863060690d75515f4e7e7b034366b9</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jump</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga4bf3442c74b1fc66e9e038f6b9c981df</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga82911492f6bb854705f77b3b12bdfeb0</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gae9a4224590ae389ad268084951dc8ee5</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jump</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga4699f194917d333cb1b472578a4f4d8a</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jump</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga17099f026e1ea2fa59db15d8ed9b2adc</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga621387b87a7e2cec71d90335fb7895c5</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;t, unsigned multiplyn, unsigned multiplyNx)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga87f53479753dfeaefe8d077ca1ce701c</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;t, unsigned dividen, unsigned divideNx)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga785b43476bffe07f9d8205c4a338e5bd</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;t, unsigned multiplyn, unsigned multiplyNx, unsigned multiplyNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga7f97dac91462d3cb532a995b09618af6</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;t, unsigned dividen, unsigned divideNx, unsigned divideNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga7aa02e4a2695590e7bcabe826ef6f8a8</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;t, unsigned multiplyn, unsigned multiplyNx, unsigned multiplyNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gacb29f3360826c45d07c59513a9bddac6</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;t, unsigned dividen, unsigned divideNx, unsigned divideNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; MHMatrix_t&lt; real_type &gt;, MHVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga7926270db9b02e44bc3645d68b5ec9e1</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;t, unsigned multiplyn, unsigned multiplyNx, unsigned multiplyNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; MHMatrix_t&lt; real_type &gt;, MHVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga98f3ef89ce146edd954349ace5779131</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;t, unsigned dividen, unsigned divideNx, unsigned divideNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; MHMatrix_t&lt; real_type &gt;, MHVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga5bf449bb543688950ec22ba67f462305</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;t, unsigned multiplyn, unsigned multiplyNx, unsigned multiplyNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; MHMatrix_t&lt; real_type &gt;, MHVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gad7543b99295dc07d745e2c1306ae6b2f</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;t, unsigned dividen, unsigned divideNx, unsigned divideNy)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>fem_mass</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>gabd1b40338e8296bc00e42df29678c873</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>fem_mass</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga116c4870cf1637435961581862e2667e</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga5acc91a2f306c8e308ae2852c19ae07c</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_inv_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga2efe4e6894729acbcba212098aa4562a</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga9fd627e66c3538c683f61fa5fa70f6e0</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_inv_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga7f1dfd53d8e8fe53bbb75bf5df6cd3ba</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga494fca053f848efb2e40f021c5d02394</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_inv_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga41ed82be7020ca564607c1d44c6dd352</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga555f0315380f4e488298b970fe99bb43</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const RealGrid1d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, std::string method=&quot;dg&quot;)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gabccfc4cf8551380841951e9e3d4ea6eb</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const aRealTopology2d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU, std::string method=&quot;dg&quot;)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gaa32a8cf8b0401350e0436d695b37b967</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const thrust::host_vector&lt; real_type &gt; &amp;z, const aRealTopology3d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU, dg::bc bcz=dg::PER, std::string method=&quot;dg&quot;)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gafe66d320d0965e44cf7b7b68d95db7a9</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g_new, const RealGrid1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gab6059cfabf62ce2523321f816fb59ecb</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g_new, const aRealTopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga255cdb85967dee679b05899d86d12785</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g_new, const aRealTopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gaaf634652de6df95398e91477aaed0927</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g_new, const aRealTopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga9bc621634c9540012006c75e4061d0be</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const RealGridX1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga00a625727a3335b7d0c7a7104a147cd8</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const aRealTopologyX2d&lt; real_type &gt; &amp;g, dg::bc globalbcz=dg::NEU)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga6d44cf23c5474123a4c1f7d381166341</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const thrust::host_vector&lt; real_type &gt; &amp;z, const aRealTopologyX3d&lt; real_type &gt; &amp;g, dg::bc globalbcz=dg::NEU)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga5675778c919151412ef727e7739fd7e3</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g_new, const RealGridX1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga5e75013511a6bf3864f6d68d782294d5</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g_new, const aRealTopologyX2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga15dd892625959c7bcd49b24b90d263af</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g_new, const aRealTopologyX3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>forward_transform</name>
      <anchorfile>namespacedg_1_1create.html</anchorfile>
      <anchor>a0deb811d33279b3f858db30a7777c1e2</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;in, const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga489ce093c2c5260ab338432818908a56</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gab2a7a8ef31f632638173cde03d73d433</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga7efe24db0f3be3741f17c0f06787bff8</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga8b1a991608edd12528f1d5488dc99a1d</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga9329877015fc6dd772c6442e7b562484</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gac0adeb5ce90592acfc550bbb9cab5719</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gabf69159ea3b68dee5eafa96d337013b5</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcz, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaa4bb59a96790aac1a737c1202e7d9437</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga851339ed455dfa5cb52462ac89991984</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae1cf0c9f8f65b5b438417ce26bbe1f78</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcz)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga8a3540fb27361e3b7820eaf04c7f4191</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga2a9d5ba09b25e5c70a88c2248515d209</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga5874de300312978d8873165e0ac65893</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaa58ff3098df8a5dc9af50cb03b620a15</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gad76afd5aeb34b7e95708730ae3430faf</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga07c407f6c982cb6ca598ddaa57ac4edf</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga455ec585b4ba6e0126e04ee54933f792</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga3b689689ae1a8affc46f286326c3f1e4</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga3275156b7dd10b925cda30de132c9b2f</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga39cc6e53f4d7c0e7f3bee01bb72ca041</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga31346299065b7b13d2ff3ff801d7fc9d</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g_new, const aRealMPITopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga29fd1af674975ffac83505d1a75d9295</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g_new, const aRealMPITopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gafd2b8878b6c870ca9868827e6cb196b6</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g_new, const aRealMPITopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gaec7f2cd44a012d7898ca27b11f4962bd</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g_new, const aRealMPITopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gae1a0c4a258ad384e1c174a068e06537d</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g_new, const aRealMPITopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gaad425185a1a42e48ee2785c1a1bf2629</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g_new, const aRealMPITopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga6bb2ee2164fcf188a5825f83877ce5e6</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g_new, const aRealMPITopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga242fe992f5f60ebd05b9d60dd800e725</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const aRealMPITopology2d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU, std::string method=&quot;dg&quot;)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gabc58c92d669aea984f9f5a6b5129190e</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const thrust::host_vector&lt; real_type &gt; &amp;z, const aRealMPITopology2d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU, dg::bc bcz=dg::PER, std::string method=&quot;linear&quot;)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga7b869566cb76ee5eb9eaaa95abc65fb0</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gabc3f3b3acad84e4c7c912d4115381346</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gadf4fcf709544547013bf6b56cfc78eb3</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, enum coo2d coo)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gad3894a6050cee1010ce5ed747be354a8</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga560430a36b248dd660e76d2eea636a36</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga3787c7e5234f97209301bf4164748c92</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, enum coo3d coo)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lu_pivot</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>ga7fb17ff21ad6a85d0d37d27bda7a415e</anchor>
      <arglist>(dg::Operator&lt; T &gt; &amp;m, std::vector&lt; unsigned &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lu_solve</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>gaa40be4ffcfe413c4a224b50021999192</anchor>
      <arglist>(const dg::Operator&lt; T &gt; &amp;lu, const std::vector&lt; unsigned &gt; &amp;p, std::vector&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>dg::Operator&lt; T &gt;</type>
      <name>inverse</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>ga3080a40f3cc395f77387a1cb653751bd</anchor>
      <arglist>(const dg::Operator&lt; T &gt; &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>delta</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gaa01304433dafdd46521a80931624e3ab</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>pipj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga4eda51075f016d1ed364317fc6127021</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>pipj_inv</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gae4413d3fb853db9ef8c7a14dc2d2411c</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>pidxpj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gab64b84ba1977a189256d9cff316e83b5</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>rirj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga9b7c40ad20cfbf37b5a95346c65ec3dc</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>rilj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga9f0c1f9f511c1bde286a9bbc182cdc62</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>lirj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga0073b9ef0b3263faa43f5d949b80bebb</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>lilj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gaf7e53181fceca7316f1ad9eb39f01280</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>ninj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gafba959205e1aae03847f39b244ae065f</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga29b3f19987d7fdbd6cc0cd704498a951</anchor>
      <arglist>(const DLT&lt; real_type &gt; &amp;dlt)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>precond</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga8df4669ca0584fcf2b027a5485b0dc9f</anchor>
      <arglist>(const DLT&lt; real_type &gt; &amp;dlt)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga960c598e8d895bc725aca898addf3ad4</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g_new, const RealGrid1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga47227ef2f447fcd96c64119676b370a8</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g_new, const aRealTopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga8cc266e144f7c72cd40809727ee970fe</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g_new, const aRealTopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>diagonal</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga2c6f55f5cdacb323a66a4ef99c4aa849</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;diagonal)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gae1acd5229e37e86c014468f8a7029abf</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g_new, const RealGrid1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gad20d227f6c8cb2547e757852413dbe7b</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g_new, const aRealTopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gad77a4a2cbeabce81c6a7bfdbfd5871cc</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g_new, const aRealTopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>transformation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga6b8bdd9c1752a8d88a683f816f182f3d</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g_new, const aRealTopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>transformation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gab4b6355e9c86c83ee4555781daa429cf</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g_new, const aRealTopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>transformation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga69ae54a688a91889650a636f7245b6cd</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g_new, const RealGrid1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga8cd81655e5b3de445bfc3fee6caa9b95</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g_new, const RealGridX1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga095fd7d647e30d3cd9abc9b3fbe0cca1</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g_new, const aRealTopologyX2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga70308c71453e2014553163b5c097ce12</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g_new, const aRealTopologyX3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gae51d004fa4abfa57f13502617ba184c6</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g_new, const RealGridX1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga5e117be1d538fffb647d858e1325cdf6</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g_new, const aRealTopologyX2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gafb82763a4a75e035022ae1d0ee6fe55c</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g_new, const aRealTopologyX3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>get_host_vector&lt; Geometry &gt;</type>
      <name>volume</name>
      <anchorfile>group__metric.html</anchorfile>
      <anchor>ga4408e71f634fa4398fac88a257ffcc89</anchor>
      <arglist>(const Geometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>get_host_vector&lt; Geometry &gt;</type>
      <name>inv_volume</name>
      <anchorfile>group__metric.html</anchorfile>
      <anchor>ga7b03efdfdf0c58b6a326ac2776319395</anchor>
      <arglist>(const Geometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gab6c33ce2ca09965cb9aeaca24821ae73</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gaed5d9239842d3b1a3ce2a9c802271701</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga1b2f42db5a4d837c574fc01bd6120d90</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga730eda0388badc1d87d5f5d1e8822458</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gaab57a9244736dfd4c179d65b04d6e59b</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, enum coo2d coo)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gacdfddc9ed93ec1f7d320cd4c2d3b0225</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga05bb8cd9f822b5c943cb9d063e266770</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga034752a7c11eb411fdf30321d7d8e568</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, enum coo3d coo)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga6ef7794d8b926ff8ac18ac9ecf7e7667</anchor>
      <arglist>(const dg::RealGridX1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga64016d621d0aafd42458cd7ff20b7cd3</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga6b3e53c4c542e81ab9f0ad51afcd452b</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga599787f1f3afa389ecae34c1c7560620</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga8302d29a07f64260c2ee172d2d29625f</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga1933c21fd269f203e1b9a6932ed28256</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>dg::IHMatrix</type>
      <name>backscatter</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga6415fe1f11cea3b08b41972e3039b3cc</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>dg::IHMatrix</type>
      <name>backscatter</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gab00ad9a6f01a6845f6a48be0bae639d9</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>dg::IHMatrix</type>
      <name>backscatter</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gaf01302b85e93b5461ecd500a29daca4b</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>dg::tensor</name>
    <filename>namespacedg_1_1tensor.html</filename>
    <member kind="function">
      <type>void</type>
      <name>scal</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>gab8253e13a6e951887fc59592af0717b3</anchor>
      <arglist>(SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;mu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga6177f4d0f3a84f07caab5aa61653f779</anchor>
      <arglist>(const ContainerTypeL &amp;lambda, const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerTypeM &amp;mu, ContainerType3 &amp;out0, ContainerType4 &amp;out1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply3d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>gab5d5a1bbeeb51ef4d01ac3fc9fe973d2</anchor>
      <arglist>(const ContainerTypeL &amp;lambda, const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerType3 &amp;in2, const ContainerTypeM &amp;mu, ContainerType4 &amp;out0, ContainerType5 &amp;out1, ContainerType6 &amp;out2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inv_multiply2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga5188d879c91ee5f5207feb026fd1d833</anchor>
      <arglist>(const ContainerTypeL &amp;lambda, const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerTypeM &amp;mu, ContainerType3 &amp;out0, ContainerType4 &amp;out1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inv_multiply3d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga08369384a22e2a358e347f5474f0a8e4</anchor>
      <arglist>(const ContainerTypeL &amp;lambda, const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerType3 &amp;in2, const ContainerTypeM &amp;mu, ContainerType4 &amp;out0, ContainerType5 &amp;out1, ContainerType6 &amp;out2)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType</type>
      <name>determinant2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga439491ad1ce54f447e75e67ff9235c18</anchor>
      <arglist>(const SparseTensor&lt; ContainerType &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType</type>
      <name>determinant</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga6b6d04226d2382a21c737d9bcd23a00b</anchor>
      <arglist>(const SparseTensor&lt; ContainerType &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType</type>
      <name>volume2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>gabca3e13e824c6cf0ec1606f035406c23</anchor>
      <arglist>(const SparseTensor&lt; ContainerType &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType</type>
      <name>volume</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga7356ee29303d9600291cd7489085492d</anchor>
      <arglist>(const SparseTensor&lt; ContainerType &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga1b07c5a3d2efa00644eb4e6f1248d07a</anchor>
      <arglist>(const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, ContainerType3 &amp;out0, ContainerType4 &amp;out1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply3d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga7e100a5b20fd970ebbc1ef5e9bb018e7</anchor>
      <arglist>(const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerType3 &amp;in2, ContainerType4 &amp;out0, ContainerType5 &amp;out1, ContainerType6 &amp;out2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inv_multiply2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga1ce7cb0f74bb9c80b839b4771b8657d2</anchor>
      <arglist>(const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, ContainerType3 &amp;out0, ContainerType4 &amp;out1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inv_multiply3d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga167a888144d611c14d05c2142fd95064</anchor>
      <arglist>(const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerType3 &amp;in2, ContainerType4 &amp;out0, ContainerType5 &amp;out1, ContainerType6 &amp;out2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scalar_product2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga474649ce3a4de2b2830eedcbfea609f7</anchor>
      <arglist>(get_value_type&lt; ContainerType0 &gt; alpha, const ContainerTypeL &amp;lambda, const ContainerType0 &amp;v0, const ContainerType1 &amp;v1, const SparseTensor&lt; ContainerType2 &gt; &amp;t, const ContainerTypeM &amp;mu, const ContainerType3 &amp;w0, const ContainerType4 &amp;w1, get_value_type&lt; ContainerType0 &gt; beta, ContainerType5 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scalar_product3d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>gac94822bd38b36e094bf11070a9fa2fff</anchor>
      <arglist>(get_value_type&lt; ContainerType0 &gt; alpha, const ContainerTypeL &amp;lambda, const ContainerType0 &amp;v0, const ContainerType1 &amp;v1, const ContainerType2 &amp;v2, const SparseTensor&lt; ContainerType3 &gt; &amp;t, const ContainerTypeM &amp;mu, const ContainerType4 &amp;w0, const ContainerType5 &amp;w1, const ContainerType6 &amp;w2, get_value_type&lt; ContainerType0 &gt; beta, ContainerType7 &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>dg::x</name>
    <filename>namespacedg_1_1x.html</filename>
    <member kind="typedef">
      <type>MHVec</type>
      <name>HVec</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>ab2814a5ffb506771ed1452e044b1649a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fMHVec</type>
      <name>fHVec</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a69632b2833880de8a1427c8526b4e17b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MDVec</type>
      <name>DVec</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>aa44a04a91a62ee55bb81cc69702af4eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fMDVec</type>
      <name>fDVec</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a7544b7a9f4a3f575466b3f4aca6f5ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MHMatrix</type>
      <name>HMatrix</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a748835794e471956c63a3f2734c432d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fMHMatrix</type>
      <name>fHMatrix</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a4bfe664876090167e87e8c283f6c3377</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MDMatrix</type>
      <name>DMatrix</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>ad4d3f8cd6fdce4ad94b16d947ea32596</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fMDMatrix</type>
      <name>fDMatrix</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>aabb25c1e55c3d1698a58303321797d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>aMPIGeometry2d</type>
      <name>aGeometry2d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>ab598d244f8a5b01f99b54836237e47da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>aMPIGeometry3d</type>
      <name>aGeometry3d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a319f5bd75c2b5a0773ae8469007ea5f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>aProductMPIGeometry3d</type>
      <name>aProductGeometry3d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a8868dd637a7736b9e4f896bd55cf84f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CartesianMPIGrid2d</type>
      <name>CartesianGrid2d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a678f3c43b297578d6389547a8c951120</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CartesianMPIGrid3d</type>
      <name>CartesianGrid3d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a28d4bbb56a0e4834c7d1dacfc2bf8a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CylindricalMPIGrid3d</type>
      <name>CylindricalGrid3d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a4591f67b4bada5dbbb285f37bc6b3ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIGrid2d</type>
      <name>Grid2d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>ab25fdb31975e0b1e408845613d59492c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIGrid3d</type>
      <name>Grid3d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a0560b5e3f52753453d25ab43b89916d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>aMPITopology2d</type>
      <name>aTopology2d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>ab3625b5248a875832ed55099c11235c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>aMPITopology3d</type>
      <name>aTopology3d</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a0a50b265a1f0f45e4aba326b6b78e61e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MIHMatrix</type>
      <name>IHMatrix</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a9f989653c1eabe0ef28354c612f07bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MIDMatrix</type>
      <name>IDMatrix</name>
      <anchorfile>namespacedg_1_1x.html</anchorfile>
      <anchor>a317270f6d7d80e298eedd8feb67e7133</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>backend</name>
    <title>Level 1: Vectors, Matrices and basic operations</title>
    <filename>group__backend.html</filename>
    <subgroup>blas</subgroup>
    <subgroup>typedefs</subgroup>
    <subgroup>sparsematrix</subgroup>
    <subgroup>densematrix</subgroup>
    <subgroup>view</subgroup>
    <subgroup>mpi_structures</subgroup>
    <subgroup>dispatch</subgroup>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>group__backend.html</anchorfile>
      <anchor>gab0ca1b8d3f70004e25ddc2010f7e9e0d</anchor>
      <arglist>(const from_ContainerType &amp;from, ContainerType &amp;to, Params &amp;&amp;... ps)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType</type>
      <name>construct</name>
      <anchorfile>group__backend.html</anchorfile>
      <anchor>ga5dbfc632d4d66d2d926dd525ed7fcea8</anchor>
      <arglist>(const from_ContainerType &amp;from, Params &amp;&amp;... ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>group__backend.html</anchorfile>
      <anchor>gab8d14b7a823d92037add5899d611d7d9</anchor>
      <arglist>(get_value_type&lt; ContainerType1 &gt; alpha, MatrixType &amp;&amp;M, const ContainerType1 &amp;x, get_value_type&lt; ContainerType1 &gt; beta, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>group__backend.html</anchorfile>
      <anchor>gac419b379a849c48dc3a60ef1e4662166</anchor>
      <arglist>(MatrixType &amp;&amp;M, const ContainerType1 &amp;x, ContainerType2 &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>blas</name>
    <title>Basic container independent subroutines</title>
    <filename>group__blas.html</filename>
    <subgroup>blas1</subgroup>
    <subgroup>blas2</subgroup>
    <subgroup>tensor</subgroup>
    <docanchor file="group__blas.html" title="The dg dispatch system">dispatch</docanchor>
    <docanchor file="group__blas.html" title="The subroutine function">dispatch_evaluate</docanchor>
    <docanchor file="group__blas.html" title="The dot function">dispatch_dot</docanchor>
    <docanchor file="group__blas.html" title="The symv function">dispatch_symv</docanchor>
  </compound>
  <compound kind="group">
    <name>blas1</name>
    <title>BLAS level 1 routines: Vector-Vector</title>
    <filename>group__blas1.html</filename>
    <namespace>dg::blas1</namespace>
    <member kind="function">
      <type>get_value_type&lt; ContainerType1 &gt;</type>
      <name>dot</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gaf00778ded011a9f6e8b885924d9306ee</anchor>
      <arglist>(const ContainerType1 &amp;x, const ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>OutputType</type>
      <name>reduce</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga61cf5da3d6fd6325cb24522b7ac8a037</anchor>
      <arglist>(const ContainerType &amp;x, OutputType zero, BinaryOp binary_op, UnaryOp unary_op=UnaryOp())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga0ed8d5b1a17d0e8882b2d253a0d3fbed</anchor>
      <arglist>(const ContainerTypeIn &amp;source, ContainerTypeOut &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scal</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gaa761a1672f82cf652ecb9382c9ebe525</anchor>
      <arglist>(ContainerType &amp;x, get_value_type&lt; ContainerType &gt; alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga48c9fe0980973ca1170b48ed6a800306</anchor>
      <arglist>(ContainerType &amp;x, get_value_type&lt; ContainerType &gt; alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpby</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga5c7ddbf70dd74867e45c9d4f40b36cf7</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x, get_value_type&lt; ContainerType &gt; beta, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpbypgz</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga5ba146d8c2d13dbeb412ff6130233422</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x, get_value_type&lt; ContainerType &gt; beta, const ContainerType2 &amp;y, get_value_type&lt; ContainerType &gt; gamma, ContainerType &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpby</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga0dfb1435b0a4d429d4cd2e8c265cd209</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x, get_value_type&lt; ContainerType &gt; beta, const ContainerType2 &amp;y, ContainerType &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDot</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gad2dcd7cffe760b7bacfdd7647d86e602</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x1, const ContainerType2 &amp;x2, get_value_type&lt; ContainerType &gt; beta, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDot</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga117cb07cd3e8b6a8580bb42a9c00ab40</anchor>
      <arglist>(const ContainerType1 &amp;x1, const ContainerType2 &amp;x2, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDot</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gad8bde5930a50e3cf58af5c19f765ac8e</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x1, const ContainerType2 &amp;x2, const ContainerType3 &amp;x3, get_value_type&lt; ContainerType &gt; beta, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDivide</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gab38b907a9fb2f7039d9a6ffb1c46b649</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x1, const ContainerType2 &amp;x2, get_value_type&lt; ContainerType &gt; beta, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDivide</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga4e30e54e32bab62357425a0240d519ea</anchor>
      <arglist>(const ContainerType1 &amp;x1, const ContainerType2 &amp;x2, ContainerType &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointwiseDot</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga12ce2a470cebd649636725f30d88bf97</anchor>
      <arglist>(get_value_type&lt; ContainerType &gt; alpha, const ContainerType1 &amp;x1, const ContainerType2 &amp;y1, get_value_type&lt; ContainerType &gt; beta, const ContainerType3 &amp;x2, const ContainerType4 &amp;y2, get_value_type&lt; ContainerType &gt; gamma, ContainerType &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga493c6b70c8c889beaec1c3a669e3809b</anchor>
      <arglist>(const ContainerType1 &amp;x, ContainerType &amp;y, UnaryOp op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>gaad7b58d466d813898b68189b44619210</anchor>
      <arglist>(ContainerType &amp;y, BinarySubroutine f, Functor g, const ContainerType0 &amp;x0, const ContainerTypes &amp;...xs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subroutine</name>
      <anchorfile>group__blas1.html</anchorfile>
      <anchor>ga7386b5cb0144d5364b8ea8c8ce1482a5</anchor>
      <arglist>(Subroutine f, ContainerType &amp;&amp;x, ContainerTypes &amp;&amp;... xs)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>blas2</name>
    <title>BLAS level 2 routines: Matrix-Vector</title>
    <filename>group__blas2.html</filename>
    <namespace>dg::blas2</namespace>
    <member kind="function">
      <type>get_value_type&lt; MatrixType &gt;</type>
      <name>dot</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>gaee53d6bf6aa0ca3059a49ea696d4d158</anchor>
      <arglist>(const ContainerType1 &amp;x, const MatrixType &amp;m, const ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>get_value_type&lt; MatrixType &gt;</type>
      <name>dot</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>ga8360dc43dc76d7ff585f3a570998f942</anchor>
      <arglist>(const MatrixType &amp;m, const ContainerType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>ga9bd2015d31362b25d61110f91cf3b0b9</anchor>
      <arglist>(get_value_type&lt; ContainerType1 &gt; alpha, MatrixType &amp;&amp;M, const ContainerType1 &amp;x, get_value_type&lt; ContainerType1 &gt; beta, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>symv</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>gac3840941bd2bb1d64c6ca3fef1f1b960</anchor>
      <arglist>(MatrixType &amp;&amp;M, const ContainerType1 &amp;x, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gemv</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>ga1b7e3b58697b6e93169eebbda63f3ed3</anchor>
      <arglist>(get_value_type&lt; ContainerType1 &gt; alpha, MatrixType &amp;&amp;M, const ContainerType1 &amp;x, get_value_type&lt; ContainerType1 &gt; beta, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gemv</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>ga5f7f59acf79dc654da64ca7e8f212284</anchor>
      <arglist>(MatrixType &amp;&amp;M, const ContainerType1 &amp;x, ContainerType2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transfer</name>
      <anchorfile>group__blas2.html</anchorfile>
      <anchor>ga53701ba3118a2256a93a4d92a7a8a597</anchor>
      <arglist>(const MatrixType &amp;x, AnotherMatrixType &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>tensor</name>
    <title>Tensor-Vector operations</title>
    <filename>group__tensor.html</filename>
    <member kind="function">
      <type>void</type>
      <name>scal</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>gab8253e13a6e951887fc59592af0717b3</anchor>
      <arglist>(SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;mu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga6177f4d0f3a84f07caab5aa61653f779</anchor>
      <arglist>(const ContainerTypeL &amp;lambda, const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerTypeM &amp;mu, ContainerType3 &amp;out0, ContainerType4 &amp;out1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply3d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>gab5d5a1bbeeb51ef4d01ac3fc9fe973d2</anchor>
      <arglist>(const ContainerTypeL &amp;lambda, const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerType3 &amp;in2, const ContainerTypeM &amp;mu, ContainerType4 &amp;out0, ContainerType5 &amp;out1, ContainerType6 &amp;out2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inv_multiply2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga5188d879c91ee5f5207feb026fd1d833</anchor>
      <arglist>(const ContainerTypeL &amp;lambda, const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerTypeM &amp;mu, ContainerType3 &amp;out0, ContainerType4 &amp;out1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inv_multiply3d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga08369384a22e2a358e347f5474f0a8e4</anchor>
      <arglist>(const ContainerTypeL &amp;lambda, const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerType3 &amp;in2, const ContainerTypeM &amp;mu, ContainerType4 &amp;out0, ContainerType5 &amp;out1, ContainerType6 &amp;out2)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType</type>
      <name>determinant2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga439491ad1ce54f447e75e67ff9235c18</anchor>
      <arglist>(const SparseTensor&lt; ContainerType &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType</type>
      <name>determinant</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga6b6d04226d2382a21c737d9bcd23a00b</anchor>
      <arglist>(const SparseTensor&lt; ContainerType &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType</type>
      <name>volume2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>gabca3e13e824c6cf0ec1606f035406c23</anchor>
      <arglist>(const SparseTensor&lt; ContainerType &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>ContainerType</type>
      <name>volume</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga7356ee29303d9600291cd7489085492d</anchor>
      <arglist>(const SparseTensor&lt; ContainerType &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga1b07c5a3d2efa00644eb4e6f1248d07a</anchor>
      <arglist>(const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, ContainerType3 &amp;out0, ContainerType4 &amp;out1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply3d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga7e100a5b20fd970ebbc1ef5e9bb018e7</anchor>
      <arglist>(const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerType3 &amp;in2, ContainerType4 &amp;out0, ContainerType5 &amp;out1, ContainerType6 &amp;out2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inv_multiply2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga1ce7cb0f74bb9c80b839b4771b8657d2</anchor>
      <arglist>(const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, ContainerType3 &amp;out0, ContainerType4 &amp;out1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inv_multiply3d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga167a888144d611c14d05c2142fd95064</anchor>
      <arglist>(const SparseTensor&lt; ContainerType0 &gt; &amp;t, const ContainerType1 &amp;in0, const ContainerType2 &amp;in1, const ContainerType3 &amp;in2, ContainerType4 &amp;out0, ContainerType5 &amp;out1, ContainerType6 &amp;out2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scalar_product2d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>ga474649ce3a4de2b2830eedcbfea609f7</anchor>
      <arglist>(get_value_type&lt; ContainerType0 &gt; alpha, const ContainerTypeL &amp;lambda, const ContainerType0 &amp;v0, const ContainerType1 &amp;v1, const SparseTensor&lt; ContainerType2 &gt; &amp;t, const ContainerTypeM &amp;mu, const ContainerType3 &amp;w0, const ContainerType4 &amp;w1, get_value_type&lt; ContainerType0 &gt; beta, ContainerType5 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scalar_product3d</name>
      <anchorfile>group__tensor.html</anchorfile>
      <anchor>gac94822bd38b36e094bf11070a9fa2fff</anchor>
      <arglist>(get_value_type&lt; ContainerType0 &gt; alpha, const ContainerTypeL &amp;lambda, const ContainerType0 &amp;v0, const ContainerType1 &amp;v1, const ContainerType2 &amp;v2, const SparseTensor&lt; ContainerType3 &gt; &amp;t, const ContainerTypeM &amp;mu, const ContainerType4 &amp;w0, const ContainerType5 &amp;w1, const ContainerType6 &amp;w2, get_value_type&lt; ContainerType0 &gt; beta, ContainerType7 &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>typedefs</name>
    <title>Useful Typedefs</title>
    <filename>group__typedefs.html</filename>
    <namespace>dg::x</namespace>
    <member kind="typedef">
      <type>thrust::host_vector&lt; T &gt;</type>
      <name>HVec_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga0adc266f31294130dbaa806586409995</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; double &gt;</type>
      <name>HVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga4fb8e78e7b043edfedb880523f0cd193</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; int &gt;</type>
      <name>iHVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga6dcaf6113666c77a4bd46bf93a16ce4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::host_vector&lt; float &gt;</type>
      <name>fHVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gafb0778d5da5edc4c082822a84f78656e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::device_vector&lt; double &gt;</type>
      <name>DVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga5bbe4ba51ef8ff8d506979d0beda25b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::device_vector&lt; int &gt;</type>
      <name>iDVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga47171b298736a17b3e4ff54ec561f028</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::device_vector&lt; float &gt;</type>
      <name>fDVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga78b0309b2b460fb21919b29701c8dbb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EllSparseBlockMat&lt; T &gt;</type>
      <name>HMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gae32e68aa84de32e2bd1cc52a7b291328</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EllSparseBlockMat&lt; double &gt;</type>
      <name>HMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gac2134505608b45616787fdb2f6eedc87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EllSparseBlockMat&lt; float &gt;</type>
      <name>fHMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gac24d337dc79871e60dfe2360a8a95577</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EllSparseBlockMatDevice&lt; double &gt;</type>
      <name>DMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gafdf2ecb95cbc87a1544136d28d535f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EllSparseBlockMatDevice&lt; float &gt;</type>
      <name>fDMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gacab47883a25bf01af58765f606f88a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::MPI_Vector&lt; dg::HVec_t&lt; T &gt; &gt;</type>
      <name>MHVec_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga67290cbd3eb84059299270977b69652e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::MPI_Vector&lt; dg::HVec &gt;</type>
      <name>MHVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gac127f65b65c035ebe413aee5abffd6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::MPI_Vector&lt; dg::fHVec &gt;</type>
      <name>fMHVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaaeaa5994e3b512003f682181640f8372</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::MPI_Vector&lt; dg::DVec &gt;</type>
      <name>MDVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga1e23fb8b50d38d43beb4bf3689c20a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::MPI_Vector&lt; dg::fDVec &gt;</type>
      <name>fMDVec</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaaf5a0cd11a882f188d77db14120433ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NearestNeighborComm&lt; dg::iHVec, thrust::host_vector&lt; const T * &gt;, thrust::host_vector&lt; T &gt; &gt;</type>
      <name>NNCH</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga6dee6cd0954be96337660283c421de71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NearestNeighborComm&lt; dg::iDVec, thrust::device_vector&lt; const T * &gt;, thrust::device_vector&lt; T &gt; &gt;</type>
      <name>NNCD</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga4b94b5be119481526eae16a1831bb3a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NNCH&lt; double &gt;</type>
      <name>dNNCH</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga8e6c8b7e3091e961b10fbf646065b670</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NNCH&lt; float &gt;</type>
      <name>fNNCH</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaf58692e972aa256e5034c76cd8c676d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NNCD&lt; double &gt;</type>
      <name>dNNCD</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga89a3930157f77be79532f3d51c7b3db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::NNCD&lt; float &gt;</type>
      <name>fNNCD</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gad6239a57d8e92a0a068dff591891dee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::CooSparseBlockMat&lt; T &gt;</type>
      <name>CooMat_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gadc35dcb99c013f7eb16e2754c603c6b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::CooSparseBlockMat&lt; double &gt;</type>
      <name>CooMat</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga00c1e29dbf19330c5e34986229f480a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::CooSparseBlockMat&lt; float &gt;</type>
      <name>fCooMat</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga1aee695fc9310a94ac59294b7b60e8c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::CooSparseBlockMatDevice&lt; double &gt;</type>
      <name>DCooMat</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gad7412ba17b1dc358ecc70361ced85f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::CooSparseBlockMatDevice&lt; float &gt;</type>
      <name>fDCooMat</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga4e62541a4ca94e1eac9c067a781c13cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RowColDistMat&lt; dg::HMatrix_t&lt; T &gt;, dg::CooMat_t&lt; T &gt;, dg::NNCH&lt; T &gt; &gt;</type>
      <name>MHMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga756b7cfbae82f9b5ea00613fb0f58dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RowColDistMat&lt; dg::HMatrix, dg::CooMat, dg::dNNCH &gt;</type>
      <name>MHMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaff79c734c7916054c7dc24e6bc437161</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RowColDistMat&lt; dg::fHMatrix, dg::fCooMat, dg::fNNCH &gt;</type>
      <name>fMHMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gae7dd83d81a27396178672510700e73af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RowColDistMat&lt; dg::DMatrix, dg::DCooMat, dg::dNNCD &gt;</type>
      <name>MDMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaad32454aa2aca3cbb93448d7b5daf005</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RowColDistMat&lt; dg::fDMatrix, dg::fDCooMat, dg::fNNCD &gt;</type>
      <name>fMDMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga56efb28b1175fb5a065dcbe81d678e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cusp::csr_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>IHMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga405d290c77c92765dcddb324522d8409</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cusp::csr_matrix&lt; int, real_type, cusp::device_memory &gt;</type>
      <name>IDMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga3dac512c32a3798cd984737a170e91a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IHMatrix_t&lt; double &gt;</type>
      <name>IHMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga3d74638bbcf620f19e3728a07ef1706d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IDMatrix_t&lt; double &gt;</type>
      <name>IDMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gaec4df2a8ab65260aed0efeb6f5d115e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIDistMat&lt; IHMatrix_t&lt; real_type &gt;, GeneralComm&lt; dg::iHVec, thrust::host_vector&lt; real_type &gt; &gt; &gt;</type>
      <name>MIHMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga383790a28074c1998e9abef496429b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIDistMat&lt; IDMatrix_t&lt; real_type &gt;, GeneralComm&lt; dg::iDVec, thrust::device_vector&lt; real_type &gt; &gt; &gt;</type>
      <name>MIDMatrix_t</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga4368b8e147b1e6b3b90080c3bd813530</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MIHMatrix_t&lt; double &gt;</type>
      <name>MIHMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>ga6f954391920cbd9b9ec4c7b68fdb7682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MIDMatrix_t&lt; double &gt;</type>
      <name>MIDMatrix</name>
      <anchorfile>group__typedefs.html</anchorfile>
      <anchor>gabed94dc9f33454571b7a124fb3851091</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>sparsematrix</name>
    <title>Sparse matrix formats</title>
    <filename>group__sparsematrix.html</filename>
    <class kind="struct">dg::EllSparseBlockMat</class>
    <class kind="struct">dg::CooSparseBlockMat</class>
    <class kind="struct">dg::SparseTensor</class>
  </compound>
  <compound kind="group">
    <name>densematrix</name>
    <title>Dense matrix formats</title>
    <filename>group__densematrix.html</filename>
    <class kind="class">dg::Operator</class>
    <member kind="function">
      <type>auto</type>
      <name>asDenseMatrix</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>gad9756e05d8a674f20562b0811104279d</anchor>
      <arglist>(const std::vector&lt; const ContainerType * &gt; &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>asDenseMatrix</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>ga816c360401736b6c0897186fefdf1e4b</anchor>
      <arglist>(const std::vector&lt; const ContainerType * &gt; &amp;in, unsigned size)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; const ContainerType * &gt;</type>
      <name>asPointers</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>ga353dc6b8616f337e9f02638ac60bf640</anchor>
      <arglist>(const std::vector&lt; ContainerType &gt; &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lu_pivot</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>ga7fb17ff21ad6a85d0d37d27bda7a415e</anchor>
      <arglist>(dg::Operator&lt; T &gt; &amp;m, std::vector&lt; unsigned &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lu_solve</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>gaa40be4ffcfe413c4a224b50021999192</anchor>
      <arglist>(const dg::Operator&lt; T &gt; &amp;lu, const std::vector&lt; unsigned &gt; &amp;p, std::vector&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>dg::Operator&lt; T &gt;</type>
      <name>inverse</name>
      <anchorfile>group__densematrix.html</anchorfile>
      <anchor>ga3080a40f3cc395f77387a1cb653751bd</anchor>
      <arglist>(const dg::Operator&lt; T &gt; &amp;in)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>view</name>
    <title>Vector view</title>
    <filename>group__view.html</filename>
    <class kind="struct">dg::View</class>
  </compound>
  <compound kind="group">
    <name>mpi_structures</name>
    <title>MPI backend</title>
    <filename>group__mpi__structures.html</filename>
    <class kind="struct">dg::BijectiveComm</class>
    <class kind="struct">dg::SurjectiveComm</class>
    <class kind="struct">dg::GeneralComm</class>
    <class kind="struct">dg::aCommunicator</class>
    <class kind="struct">dg::RowColDistMat</class>
    <class kind="struct">dg::MPIDistMat</class>
    <class kind="struct">dg::MPI_Vector</class>
    <class kind="struct">dg::NearestNeighborComm</class>
    <member kind="enumeration">
      <type></type>
      <name>dist_type</name>
      <anchorfile>group__mpi__structures.html</anchorfile>
      <anchor>ga521b6d6524a6d391c746ddc9a1ad5571</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>row_dist</name>
      <anchorfile>group__mpi__structures.html</anchorfile>
      <anchor>gga521b6d6524a6d391c746ddc9a1ad5571a99ba8c51e9d19b4535a343c4b471a562</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>col_dist</name>
      <anchorfile>group__mpi__structures.html</anchorfile>
      <anchor>gga521b6d6524a6d391c746ddc9a1ad5571a4bdc977f2b0fcd3ad828d30c7fd3fb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>convert</name>
      <anchorfile>group__mpi__structures.html</anchorfile>
      <anchor>gab037631f28f2fa5d19fd58893c89e986</anchor>
      <arglist>(const dg::IHMatrix_t&lt; real_type &gt; &amp;global, const ConversionPolicy &amp;policy)</arglist>
    </member>
    <docanchor file="group__mpi__structures.html" title="The MPI interface">mpi_backend</docanchor>
    <docanchor file="group__mpi__structures.html" title="MPI Vectors and the blas functions">mpi_vector</docanchor>
    <docanchor file="group__mpi__structures.html" title="MPI Matrices and the symv function">mpi_matrix</docanchor>
    <docanchor file="group__mpi__structures.html" title="Row distributed matrices">mpi_row</docanchor>
    <docanchor file="group__mpi__structures.html" title="Column distributed matrices">mpi_column</docanchor>
    <docanchor file="group__mpi__structures.html" title="Row and Column distributed">mpi_row_col</docanchor>
    <docanchor file="group__mpi__structures.html" title="Transposition">mpi_transpose</docanchor>
    <docanchor file="group__mpi__structures.html" title="Creation">mpi_create</docanchor>
  </compound>
  <compound kind="group">
    <name>dispatch</name>
    <title>The tag dispatch system</title>
    <filename>group__dispatch.html</filename>
    <class kind="struct">dg::AnyPolicyTag</class>
    <class kind="struct">dg::NoPolicyTag</class>
    <class kind="struct">dg::AnyMatrixTag</class>
    <class kind="struct">dg::NotATensorTag</class>
    <class kind="struct">dg::TensorTraits&lt; RowColDistMat&lt; LI, LO, C &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; MPIDistMat&lt; L, C &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; MPI_Vector&lt; container &gt; &gt;</class>
    <class kind="struct">dg::AnyScalarTag</class>
    <class kind="struct">dg::TensorTraits&lt; EllSparseBlockMat&lt; T &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; CooSparseBlockMat&lt; T &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits</class>
    <class kind="struct">dg::TensorTraits&lt; cusp::coo_matrix&lt; I, V, M &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; cusp::csr_matrix&lt; I, V, M &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; cusp::dia_matrix&lt; I, V, M &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; cusp::ell_matrix&lt; I, V, M &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; cusp::hyb_matrix&lt; I, V, M &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; T, std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; std::vector&lt; T &gt;, std::enable_if_t&lt; !std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; std::vector&lt; T &gt;, std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; std::array&lt; T, N &gt;, std::enable_if_t&lt; !std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; std::array&lt; T, N &gt;, std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; std::map&lt; Key, T &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; thrust::host_vector&lt; T &gt;, std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; thrust::host_vector&lt; T &gt;, std::enable_if_t&lt; !std::is_arithmetic&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">dg::TensorTraits&lt; thrust::device_vector&lt; T &gt; &gt;</class>
    <class kind="struct">dg::AnyVectorTag</class>
    <class kind="struct">dg::TensorTraits&lt; View&lt; ThrustVector &gt; &gt;</class>
    <member kind="typedef">
      <type>typename TensorTraits&lt; std::decay_t&lt; Vector &gt; &gt;::value_type</type>
      <name>get_value_type</name>
      <anchorfile>group__dispatch.html</anchorfile>
      <anchor>ga6cca187a5557469a96917dc4687a22d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename TensorTraits&lt; std::decay_t&lt; Vector &gt; &gt;::tensor_category</type>
      <name>get_tensor_category</name>
      <anchorfile>group__dispatch.html</anchorfile>
      <anchor>ga1cb60b9e327ece9ee05084fe3c75f051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename TensorTraits&lt; std::decay_t&lt; Vector &gt; &gt;::execution_policy</type>
      <name>get_execution_policy</name>
      <anchorfile>group__dispatch.html</anchorfile>
      <anchor>gae65edcfb79d3321ac1e294fb29f3ae23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>numerical0</name>
    <title>Level 2: Basic numerical algorithms</title>
    <filename>group__numerical0.html</filename>
    <subgroup>time</subgroup>
    <subgroup>time_utils</subgroup>
    <subgroup>integration</subgroup>
    <subgroup>extrapolation</subgroup>
    <subgroup>invert</subgroup>
  </compound>
  <compound kind="group">
    <name>time</name>
    <title>Time integration</title>
    <filename>group__time.html</filename>
    <class kind="struct">dg::Adaptive</class>
    <class kind="struct">dg::AdaptiveTimeloop</class>
    <class kind="struct">dg::ExplicitMultistep</class>
    <class kind="struct">dg::ImExMultistep</class>
    <class kind="struct">dg::ImplicitMultistep</class>
    <class kind="struct">dg::FilteredExplicitMultistep</class>
    <class kind="struct">dg::MultistepTimeloop</class>
    <class kind="struct">dg::aTimeloop</class>
    <class kind="struct">dg::ERKStep</class>
    <class kind="struct">dg::ARKStep</class>
    <class kind="struct">dg::DIRKStep</class>
    <class kind="struct">dg::ShuOsher</class>
    <class kind="struct">dg::SinglestepTimeloop</class>
    <member kind="typedef">
      <type>ERKStep&lt; ContainerType &gt;</type>
      <name>RungeKutta</name>
      <anchorfile>group__time.html</anchorfile>
      <anchor>ga1c36951320edd6d3b16e688acb3cdf28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DIRKStep&lt; ContainerType &gt;</type>
      <name>ImplicitRungeKutta</name>
      <anchorfile>group__time.html</anchorfile>
      <anchor>ga46daa0f5d4dda544f20c12af17ee642a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>integrate</name>
      <anchorfile>group__time.html</anchorfile>
      <anchor>ga99d218bc1124774a3d98e6bdb0d8eb14</anchor>
      <arglist>(std::string name, ODE &amp;&amp;ode, value_type t0, const ContainerType &amp;u0, value_type t1, ContainerType &amp;u1, value_type dt, ControlFunction control, ErrorNorm norm, value_type rtol, value_type atol=1e-10, value_type reject_limit=2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>integrateERK</name>
      <anchorfile>group__time.html</anchorfile>
      <anchor>ga431f63d850976184cca25d5e832661ad</anchor>
      <arglist>(std::string name, ODE &amp;ode, value_type t0, const ContainerType &amp;u0, value_type t1, ContainerType &amp;u1, value_type dt, ControlFunction control, ErrorNorm norm, value_type rtol, value_type atol=1e-10, value_type reject_limit=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stepperRK</name>
      <anchorfile>group__time.html</anchorfile>
      <anchor>ga95cb7ed53ca75810f7027cd6d9f3f904</anchor>
      <arglist>(ConvertsToButcherTableau&lt; get_value_type&lt; ContainerType &gt; &gt; tableau, RHS &amp;rhs, get_value_type&lt; ContainerType &gt; t_begin, const ContainerType &amp;begin, get_value_type&lt; ContainerType &gt; t_end, ContainerType &amp;end, unsigned N)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>time_utils</name>
    <title>Utilities for ODE solvers</title>
    <filename>group__time__utils.html</filename>
    <class kind="struct">dg::EntireDomain</class>
    <class kind="struct">dg::AdaptiveTimeloop</class>
    <class kind="struct">dg::MultistepTimeloop</class>
    <class kind="struct">dg::MultistepTableau</class>
    <class kind="struct">dg::ConvertsToMultistepTableau</class>
    <class kind="struct">dg::aTimeloop</class>
    <class kind="struct">dg::IdentityFilter</class>
    <class kind="struct">dg::SinglestepTimeloop</class>
    <class kind="struct">dg::ConvertsToButcherTableau</class>
    <class kind="struct">dg::ConvertsToShuOsherTableau</class>
    <member kind="enumeration">
      <type></type>
      <name>multistep_identifier</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gaac3c0875ffdfb49fd06757312d1a599a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_EULER_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaa269d9523f1c0f2858ee7b2da2ddc005</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_ADAMS_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aacc1309c56b3b0e0653994f4c6e014f33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_ADAMS_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa5bb9056d420aaeb9e3ed58136788e11d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_KOTO_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa34804fa61f76b9679a882c928f3462d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_BDF_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aadaf5bf7573374c4f5b44d1d934f308a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_BDF_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaf44dc27d112d9de8bd859ba62e38677c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_BDF_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaff41ac46e970b725f824c57d2ff0c2ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_BDF_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aabdae14d1438b8af8ff1b54f7dcb06828</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_BDF_6_6</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa0e2ee05fd28d6c9bae46d53fd4be43a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_TVB_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa840e7133e47fb2d1d7c166807905f451</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_TVB_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaceb8719308ce29c90d18752f117a2aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMEX_TVB_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa10d9fcc00b0bf78b817cd71d21367fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AB_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad2c9973f9153af4b29d1add4805f47b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AB_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aab1386c9d5a2d64424474a99fb889e9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AB_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaab6f79d9df61b2b38d0e8dd0e1f3b9d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AB_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa914125af18febec863b5a22630474178</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AB_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa03d11029f838ad183dac2974b1b2a384</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa64515aafdb384eee7fb97055fbf93201</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad31c62796e3f306115534b62319e76c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa70963938334c7aedeeb8921263f5d2da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa1d6eedb45062eb65c95773efa936a129</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa44d87eb40f5a4def96d3d0ae9b3a7157</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eBDF_6_6</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa94116d3b48d3117fd4cd0503f723765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa5c510519cfd2d686f29f3c47cb8a614d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad823e4c6572c36795163f0b8072523b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa769997c3f2c299e12b80667cb4a5b512</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa3401178a76a93aaaa6cb61950ff6f38f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad94ccd05d4f4f065b04da52366d61505</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TVB_6_6</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aaeaffc843538e5e4b08bc8d7303a4a447</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa7d7e3674e686fca44fbcd6d36180b97a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa1caadeb75a2d464e5fdd55eef44ff054</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_3_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa21b18996d8e102a9cc885dcd8640c176</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_4_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa36daa3f359c34a46063a9a6a81c3ed8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_5_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad04a42fb019d1a03a754fd5a112ebcd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSP_6_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad8ecff70e32e9791e9acbfbdfa16f32c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aad74099cd8e1f7fb5382e6c8b76520ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa207c93e73d0b96d72b72aaeb71ba00fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa9bf8f614933c778f81bdaa31ed620c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aacd389d17f5639c2188df07a9d100d40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_5_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa2185f0a54ba684ddec33493fccfe2d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF_6_6</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ggaac3c0875ffdfb49fd06757312d1a599aa11ebe6949bb01634a2f4b3402c2c15ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>tableau_identifier</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ga80d4d81df02e5311bb20b3f74ea45992</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPLICIT_EULER_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a5679da92a2aeff58e4d1d8dd0950bfb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIDPOINT_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a53589c3f492267933d52411a91abe87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KUTTA_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ae9e2f280b69980d9f3a31b1af3e0f1c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLASSIC_4_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a9563ea198fa964124c2e1797882452ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HEUN_EULER_2_1_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a969e565c5774496edc78deb801ab2ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAVAGLIERI_3_1_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a8264b86603c2e301b45c4de154b1cf70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEHLBERG_3_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a801b6c262788a5b582bae3d11c242096</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEHLBERG_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a510e328ffc5ba91b159daf64a46d0bd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOGACKI_SHAMPINE_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ab5342d81c85674726787aa3b494f63b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAVAGLIERI_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a5a6c2a78ebffa849bb4acac939d3dc5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK324L2SA_ERK_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ad6386c96898e925be6781c3c68310c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZONNEVELD_5_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ad40588a67499cabb21074dfdae448041</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK436L2SA_ERK_6_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a617285cf8cc8b5c0b7c0c99a0eed7b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAYFY_ABURUB_6_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a4f13e6b1d5695276f8f99e07d86f5667</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CASH_KARP_6_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a896ad5875cfc107eb383d4880fbe5184</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEHLBERG_6_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ae40966a5ad092b052a51188a05c6ea47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DORMAND_PRINCE_7_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a5e964b2560e1c1b03d280c766fc5a129</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSITOURAS09_7_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ac51ce9d53bf2dce19d9b88e3212281df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSITOURAS11_7_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a3c68b6845f08dc4a80e22b45599f3493</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK548L2SA_ERK_8_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ae3f4bc121a421ca3501bfae79943a134</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERNER_9_5_6</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992aed58d2f2fa58b129b3260d00d6601e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERNER_10_6_7</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a4d1077dab812d38d3830c031444eb296</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEHLBERG_13_7_8</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a728a76f092f543a1ab3de59110857d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DORMAND_PRINCE_13_7_8</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a448f4a686cd23e40f778abe1d3dabcd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEAGIN_17_8_10</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a8d9f6fc38535d5c30a2ca1d2133a9b75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMPLICIT_EULER_1_1</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a5d4c148035a981dfce0fe5b0f481a1fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMPLICIT_MIDPOINT_1_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ab353c6e09d40ddc610382f44fccc5c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAPEZOIDAL_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992aee900e737927e97c9c60394acbff1afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDIRK_2_1_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a72bd02f1580c5bb96958efa4f511f8aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAVAGLIERI_IMPLICIT_3_1_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a0e24a6b1b6a405ff2346db38a0c43235</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BILLINGTON_3_3_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a5ffadf91baa3b323a4e1407cf2f42926</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRBDF2_3_3_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992aea4ea0cbea708f0db5605fb2b3444834</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KVAERNO_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a4237a65080e211e5eedc4d9998bb1e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAVAGLIERI_IMPLICIT_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a8c7a4af3ca50f8e2489eb1ce8d16e194</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK324L2SA_DIRK_4_2_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a6fc7f6581d7f900694db6c8e91a17281</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CASH_5_2_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a2199f11f4b226c6803b65a1a7168b87a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CASH_5_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a534549bf28e481c52c64871dcd48d8c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDIRK_5_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ababbb34a98a801e7cc89920a1daa4d9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KVAERNO_5_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a7e0890fc92aaf7c8867b364d22c8ac22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK436L2SA_DIRK_6_3_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ab4f90835b6871a2dc7a7e2151ee8ab34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KVAERNO_7_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992abbedd7f8ef68aea027dc79e60df79b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARK548L2SA_DIRK_8_4_5</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992ad17ee32bcc10dbb681d704e9dc3d0425</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSPRK_2_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a0adf7035ccb1108b9cab4539a505ca1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSPRK_3_2</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a6ec030e91579ee35ac9c2d1f4fd00c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSPRK_3_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a0eb5270409e6b03447ee549379e2f78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSPRK_5_3</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a2a46be9d458c9586fd219956c016c3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SSPRK_5_4</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gga80d4d81df02e5311bb20b3f74ea45992a55f0423ae9d22f05d48f8cfd0ee10278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>l2norm</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ga40758fa443b6728e1499c7ee16820c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>fast_l2norm</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gac821e1bd12a9e5c2917effafc86b16ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>i_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gaabae9e3a1936ae25cb5ad3bac7f007e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>pi_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gab9435b144161cda6434c7fe0416b4896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>pid_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ga3da5b4b68cceaf18e4c0dd80629d9bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>ex_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ga32b696f59effe7da0f61b68275f6b180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>im_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>gacb1d6582ef865f0a098994190f13be15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static auto</type>
      <name>imex_control</name>
      <anchorfile>group__time__utils.html</anchorfile>
      <anchor>ga3d078141617f2e4fe33df24f289ac6af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>integration</name>
    <title>Quadrature</title>
    <filename>group__integration.html</filename>
    <class kind="struct">dg::Simpsons</class>
  </compound>
  <compound kind="group">
    <name>extrapolation</name>
    <title>Extrapolation</title>
    <filename>group__extrapolation.html</filename>
    <class kind="struct">dg::LeastSquaresExtrapolation</class>
    <class kind="struct">dg::Extrapolation</class>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>least_squares</name>
      <anchorfile>group__extrapolation.html</anchorfile>
      <anchor>gaa9846741f5726f11339179f913f0b855</anchor>
      <arglist>(const std::vector&lt; ContainerType0 &gt; &amp;bs, const ContainerType1 &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>invert</name>
    <title>Linear and nonlinear solvers</title>
    <filename>group__invert.html</filename>
    <class kind="struct">dg::AndersonAcceleration</class>
    <class kind="class">dg::BICGSTABl</class>
    <class kind="class">dg::ChebyshevIteration</class>
    <class kind="struct">dg::ChebyshevPreconditioner</class>
    <class kind="struct">dg::ModifiedChebyshevPreconditioner</class>
    <class kind="struct">dg::LeastSquaresPreconditioner</class>
    <class kind="class">dg::EVE</class>
    <class kind="struct">dg::DefaultSolver</class>
    <class kind="struct">dg::FixedPointSolver</class>
    <class kind="struct">dg::AndersonSolver</class>
    <class kind="class">dg::LGMRES</class>
    <class kind="class">dg::PCG</class>
    <member kind="function">
      <type>int</type>
      <name>bisection1d</name>
      <anchorfile>group__invert.html</anchorfile>
      <anchor>ga6331aa115bfceea681fa5ba85fa05a25</anchor>
      <arglist>(UnaryOp &amp;op, double &amp;x_min, double &amp;x_max, const double eps)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>geo</name>
    <title>Level 3: Topology and Geometry</title>
    <filename>group__geo.html</filename>
    <subgroup>grid</subgroup>
    <subgroup>geometry</subgroup>
    <subgroup>fem</subgroup>
    <subgroup>gridtypes</subgroup>
  </compound>
  <compound kind="group">
    <name>grid</name>
    <title>Topological grids and operations</title>
    <filename>group__grid.html</filename>
    <subgroup>basictopology</subgroup>
    <subgroup>evaluation</subgroup>
    <subgroup>highlevel</subgroup>
    <subgroup>creation</subgroup>
    <subgroup>interpolation</subgroup>
    <subgroup>utilities</subgroup>
    <subgroup>scatter</subgroup>
    <class kind="struct">dg::RealGrid1d</class>
    <class kind="struct">dg::RealGrid2d</class>
    <class kind="struct">dg::RealGrid3d</class>
    <class kind="struct">dg::RealGridX1d</class>
    <class kind="struct">dg::RealGridX2d</class>
    <class kind="struct">dg::RealGridX3d</class>
    <class kind="struct">dg::RealMPIGrid2d</class>
    <class kind="struct">dg::RealMPIGrid3d</class>
  </compound>
  <compound kind="group">
    <name>basictopology</name>
    <title>Topology base classes</title>
    <filename>group__basictopology.html</filename>
    <class kind="struct">dg::aRealTopology2d</class>
    <class kind="struct">dg::aRealTopology3d</class>
    <class kind="struct">dg::aRealTopologyX2d</class>
    <class kind="struct">dg::aRealTopologyX3d</class>
    <class kind="struct">dg::aRealMPITopology2d</class>
    <class kind="struct">dg::aRealMPITopology3d</class>
  </compound>
  <compound kind="group">
    <name>evaluation</name>
    <title>evaluate</title>
    <filename>group__evaluation.html</filename>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>gac802d2b4de66df9ce2282e378461ce28</anchor>
      <arglist>(UnaryOp f, const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>gab8cdd6517dd365cc723e4a14a4262d6a</anchor>
      <arglist>(const BinaryOp &amp;f, const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga0cdefb87e015db3d39efcbefd67d5a31</anchor>
      <arglist>(const TernaryOp &amp;f, const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>integrate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>gab6de23408df0b54689509b993f314d4d</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;in, const RealGrid1d&lt; real_type &gt; &amp;g, dg::direction dir=dg::forward)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>integrate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga35440c55be7797b50b31b23cc07dd37d</anchor>
      <arglist>(UnaryOp f, const RealGrid1d&lt; real_type &gt; &amp;g, dg::direction dir=dg::forward)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga98abe51c6b7d3c646f412635f135eb38</anchor>
      <arglist>(UnaryOp f, const RealGridX1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga5968e5042cb5d2e2b000a6178e146e49</anchor>
      <arglist>(const BinaryOp &amp;f, const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga8e708ce1a36994a538e3e7a0cca742e3</anchor>
      <arglist>(const TernaryOp &amp;f, const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga5975f3c6f3d0eb5f23ed3f3021061cd9</anchor>
      <arglist>(const BinaryOp &amp;f, const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>evaluate</name>
      <anchorfile>group__evaluation.html</anchorfile>
      <anchor>ga1fa625595f6416e1d162a11b559cef1e</anchor>
      <arglist>(const TernaryOp &amp;f, const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>highlevel</name>
    <title>create weights</title>
    <filename>group__highlevel.html</filename>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga7b869566cb76ee5eb9eaaa95abc65fb0</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gabc3f3b3acad84e4c7c912d4115381346</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gadf4fcf709544547013bf6b56cfc78eb3</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, enum coo2d coo)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gad3894a6050cee1010ce5ed747be354a8</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga560430a36b248dd660e76d2eea636a36</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga3787c7e5234f97209301bf4164748c92</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, enum coo3d coo)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gab6c33ce2ca09965cb9aeaca24821ae73</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gaed5d9239842d3b1a3ce2a9c802271701</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga1b2f42db5a4d837c574fc01bd6120d90</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga730eda0388badc1d87d5f5d1e8822458</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gaab57a9244736dfd4c179d65b04d6e59b</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, enum coo2d coo)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>gacdfddc9ed93ec1f7d320cd4c2d3b0225</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga05bb8cd9f822b5c943cb9d063e266770</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga034752a7c11eb411fdf30321d7d8e568</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, enum coo3d coo)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga6ef7794d8b926ff8ac18ac9ecf7e7667</anchor>
      <arglist>(const dg::RealGridX1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga64016d621d0aafd42458cd7ff20b7cd3</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga6b3e53c4c542e81ab9f0ad51afcd452b</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga599787f1f3afa389ecae34c1c7560620</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga8302d29a07f64260c2ee172d2d29625f</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>inv_weights</name>
      <anchorfile>group__highlevel.html</anchorfile>
      <anchor>ga1933c21fd269f203e1b9a6932ed28256</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>creation</name>
    <title>create derivatives</title>
    <filename>group__creation.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>bc</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga59440bdf436f2874b49aa52b670ed364</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PER</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga59440bdf436f2874b49aa52b670ed364a948704f60491461974ce4fe6339778b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIR</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga59440bdf436f2874b49aa52b670ed364adece0b7644d85f490823799a3b97f7e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIR_NEU</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga59440bdf436f2874b49aa52b670ed364ae1ff2b85fda37868973c8059e3ca3a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEU_DIR</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga59440bdf436f2874b49aa52b670ed364a5832830f6fb508b8932dbafad3d1b57c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEU</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga59440bdf436f2874b49aa52b670ed364ad8a2f69a62e7fdafe1665ae7162e8e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>direction</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gabf9ea3df33484cbb5886e257c3899e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>forward</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ggabf9ea3df33484cbb5886e257c3899e48a573a4a72e7f55df92b88c254a13762f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>backward</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ggabf9ea3df33484cbb5886e257c3899e48a3e10d2598f5b58a930631b12774e05cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>centered</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ggabf9ea3df33484cbb5886e257c3899e48a6281b4fc609cb723a615662b5adac9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>space</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga720a6f709941a075d5c8f60ef07c619f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lspace</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga720a6f709941a075d5c8f60ef07c619fadb68409ea987968e600f19adcb7b4538</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xspace</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gga720a6f709941a075d5c8f60ef07c619fa235752009881e59ab3ad8de2b904cb85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>coo2d</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gace76090e6c95d39b59a1dee2db968d14</anchor>
      <arglist></arglist>
      <enumvalue file="group__creation.html" anchor="ggace76090e6c95d39b59a1dee2db968d14a9dd4e461268c8034f5c8564e155c67a6">x</enumvalue>
      <enumvalue file="group__creation.html" anchor="ggace76090e6c95d39b59a1dee2db968d14a415290769594460e2e485922904f345d">y</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>coo3d</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga4de4a3d7cd219a55affa992871e8598f</anchor>
      <arglist></arglist>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fa9dd4e461268c8034f5c8564e155c67a6">x</enumvalue>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fa415290769594460e2e485922904f345d">y</enumvalue>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fafbade9e36a3f36d3d676c1b808451dd7">z</enumvalue>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fa3e44107170a520582ade522fa73c1d15">xy</enumvalue>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fa2151a2bc77807b81113febbf50c4bc95">yz</enumvalue>
      <enumvalue file="group__creation.html" anchor="gga4de4a3d7cd219a55affa992871e8598fadbd69ee9ae289a85ea34dbef8435d7c1">xz</enumvalue>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga19d86301feafbcf0f986df9f63c203fe</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga0157ec973f63c324b8c72b8fd9194a70</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga86375a7140c179bd4c3cabba4da575f9</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga61716a842cf5da26e59795259faebd45</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga7a8fe217c53df1ce6eb31aea79bbc5fa</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gad32f4cb21d1bd953283065a3e0ff940f</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga1ba152b26d4492e9535733c038e78843</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga0f712148b923339c0b42859b26359cfe</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaf2b77b92859e81527794089d0d6bf891</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga9c234aa10cd37de14c3d827308e2d0a5</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga1cffbbd2dd3eb02bcda52455af72f4f0</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcz)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gafc06291468fee7918f7dc62a2939eba9</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga34008552fdd778e62eafca9b37da26dc</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gab38bec364ae85e94491cb09c7a215cef</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga16557006323eed616c8d45e05cfae5a0</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga1eaec221690c13f5feb07ebfab40bca6</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gad073e0a0872e9c03e91922571e785f09</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaee6a6764e3e76f6d7fe56a949c6ba208</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga17b5c97575982191a5b7c27174f15d00</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, bc bcz, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaeba96ae078dd84ed86fe046d63b21086</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga48f3c7759bfaa3d80fba9626d8ca59ed</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaed7c326e41d9d945f3de9514f29f3ebc</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gabd62ae0b90eba03a14e89c6ab7d1b20d</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaa17ea30b4dd25376c07807d58853b480</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga89b6058aea9dcba65a5fdf1f8106e623</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae027e57ec6456cd001ba15ed89f355e1</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga58b769e4bfe004be71c8d98dc7b275e5</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga215013447785631b7d43674b5a34ac9f</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga513df5a4db8cd15c94681a3fdc0ab2ca</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae81e3400be9e3b446ac3b7f999598c94</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae0fde938ba7e5977ee93e0b4642f10ed</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcz)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaaaa22110d64f6eb848264c870e971b97</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga8fe99e84fe4f5f6f9d5962461acf5e62</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gac0fcb281875f3445526640b94ddc9293</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga4c9b8a22ea7a8b2475337b9863d3a5ae</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga2fdab3d9e7a46489ff487e8044d4cc23</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga7c2b37276fef32694e3f32e455a99f6f</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae25e2bb0cc6ff5d48caed87bbc1496d1</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga4a428cfef0dc63826553c6340a0aa7b4</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, bc bcz, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>Composite&lt; EllSparseBlockMat&lt; real_type &gt; &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga3dd6040824cd33b522a8c982df82817a</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae3a4ca18ffe8583d86682b24a719abd7</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gab7fd80865c73611fc731bafa288683ed</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jump</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gac9863060690d75515f4e7e7b034366b9</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jump</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga4bf3442c74b1fc66e9e038f6b9c981df</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga489ce093c2c5260ab338432818908a56</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gab2a7a8ef31f632638173cde03d73d433</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga7efe24db0f3be3741f17c0f06787bff8</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga8b1a991608edd12528f1d5488dc99a1d</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga9329877015fc6dd772c6442e7b562484</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gac0adeb5ce90592acfc550bbb9cab5719</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcy, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gabf69159ea3b68dee5eafa96d337013b5</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcz, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaa4bb59a96790aac1a737c1202e7d9437</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga851339ed455dfa5cb52462ac89991984</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcy)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gae1cf0c9f8f65b5b438417ce26bbe1f78</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, bc bcz)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga8a3540fb27361e3b7820eaf04c7f4191</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dx</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga2a9d5ba09b25e5c70a88c2248515d209</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga5874de300312978d8873165e0ac65893</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpX</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaa58ff3098df8a5dc9af50cb03b620a15</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gad76afd5aeb34b7e95708730ae3430faf</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dy</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga07c407f6c982cb6ca598ddaa57ac4edf</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga455ec585b4ba6e0126e04ee54933f792</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpY</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga3b689689ae1a8affc46f286326c3f1e4</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>dz</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga3275156b7dd10b925cda30de132c9b2f</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>RowColDistMat&lt; EllSparseBlockMat&lt; real_type &gt;, CooSparseBlockMat&lt; real_type &gt;, NNCH&lt; real_type &gt; &gt;</type>
      <name>jumpZ</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga39cc6e53f4d7c0e7f3bee01bb72ca041</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>bc2str</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaaddc055ad4bead1c127e85c0242e64d4</anchor>
      <arglist>(bc bcx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bc</type>
      <name>str2bc</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga92d83820c2595e12cdff8edb406838f1</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bc</type>
      <name>inverse</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>ga2fdc7785fdfc55782f5b1b89e5b2dcaa</anchor>
      <arglist>(bc bound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static direction</type>
      <name>str2direction</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gab4d2b5f9ab2d0a8859ffd71d2df85aa1</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>direction2str</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gaceda4c77ab8090ef94a943a2d26c11eb</anchor>
      <arglist>(enum direction dir)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static direction</type>
      <name>inverse</name>
      <anchorfile>group__creation.html</anchorfile>
      <anchor>gabcf2294b804eb9fb8bd0bfb8f9d1dcbf</anchor>
      <arglist>(direction dir)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>interpolation</name>
    <title>Interpolation and projection</title>
    <filename>group__interpolation.html</filename>
    <namespace>dg::create</namespace>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga621387b87a7e2cec71d90335fb7895c5</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;t, unsigned multiplyn, unsigned multiplyNx)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga87f53479753dfeaefe8d077ca1ce701c</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;t, unsigned dividen, unsigned divideNx)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga785b43476bffe07f9d8205c4a338e5bd</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;t, unsigned multiplyn, unsigned multiplyNx, unsigned multiplyNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga7f97dac91462d3cb532a995b09618af6</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;t, unsigned dividen, unsigned divideNx, unsigned divideNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga7aa02e4a2695590e7bcabe826ef6f8a8</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;t, unsigned multiplyn, unsigned multiplyNx, unsigned multiplyNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; dg::HMatrix_t&lt; real_type &gt;, dg::HVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gacb29f3360826c45d07c59513a9bddac6</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;t, unsigned dividen, unsigned divideNx, unsigned divideNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; MHMatrix_t&lt; real_type &gt;, MHVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga7926270db9b02e44bc3645d68b5ec9e1</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;t, unsigned multiplyn, unsigned multiplyNx, unsigned multiplyNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; MHMatrix_t&lt; real_type &gt;, MHVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga98f3ef89ce146edd954349ace5779131</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;t, unsigned dividen, unsigned divideNx, unsigned divideNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; MHMatrix_t&lt; real_type &gt;, MHVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga5bf449bb543688950ec22ba67f462305</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;t, unsigned multiplyn, unsigned multiplyNx, unsigned multiplyNy)</arglist>
    </member>
    <member kind="function">
      <type>MultiMatrix&lt; MHMatrix_t&lt; real_type &gt;, MHVec_t&lt; real_type &gt; &gt;</type>
      <name>fast_projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gad7543b99295dc07d745e2c1306ae6b2f</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;t, unsigned dividen, unsigned divideNx, unsigned divideNy)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga555f0315380f4e488298b970fe99bb43</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const RealGrid1d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, std::string method=&quot;dg&quot;)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gabccfc4cf8551380841951e9e3d4ea6eb</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const aRealTopology2d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU, std::string method=&quot;dg&quot;)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gaa32a8cf8b0401350e0436d695b37b967</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const thrust::host_vector&lt; real_type &gt; &amp;z, const aRealTopology3d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU, dg::bc bcz=dg::PER, std::string method=&quot;dg&quot;)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gafe66d320d0965e44cf7b7b68d95db7a9</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g_new, const RealGrid1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gab6059cfabf62ce2523321f816fb59ecb</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g_new, const aRealTopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga255cdb85967dee679b05899d86d12785</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g_new, const aRealTopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gaaf634652de6df95398e91477aaed0927</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g_new, const aRealTopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>interpolate</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gad1467be84fa682c8b300cd39db0492d9</anchor>
      <arglist>(dg::space sp, const thrust::host_vector&lt; real_type &gt; &amp;v, real_type x, const RealGrid1d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>interpolate</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gaa9fc6abad143444993021781bbed9b48</anchor>
      <arglist>(dg::space sp, const thrust::host_vector&lt; real_type &gt; &amp;v, real_type x, real_type y, const aRealTopology2d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga9bc621634c9540012006c75e4061d0be</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const RealGridX1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga00a625727a3335b7d0c7a7104a147cd8</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const aRealTopologyX2d&lt; real_type &gt; &amp;g, dg::bc globalbcz=dg::NEU)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga6d44cf23c5474123a4c1f7d381166341</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const thrust::host_vector&lt; real_type &gt; &amp;z, const aRealTopologyX3d&lt; real_type &gt; &amp;g, dg::bc globalbcz=dg::NEU)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga5675778c919151412ef727e7739fd7e3</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g_new, const RealGridX1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga5e75013511a6bf3864f6d68d782294d5</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g_new, const aRealTopologyX2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga15dd892625959c7bcd49b24b90d263af</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g_new, const aRealTopologyX3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>interpolate</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga3f3b02e7ec191c8fcf1fc258599617f7</anchor>
      <arglist>(dg::space sp, const thrust::host_vector&lt; real_type &gt; &amp;v, real_type x, real_type y, const aRealTopologyX2d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga31346299065b7b13d2ff3ff801d7fc9d</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g_new, const aRealMPITopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga29fd1af674975ffac83505d1a75d9295</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g_new, const aRealMPITopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gafd2b8878b6c870ca9868827e6cb196b6</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g_new, const aRealMPITopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gaec7f2cd44a012d7898ca27b11f4962bd</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g_new, const aRealMPITopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gae1a0c4a258ad384e1c174a068e06537d</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g_new, const aRealMPITopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gaad425185a1a42e48ee2785c1a1bf2629</anchor>
      <arglist>(const aRealMPITopology2d&lt; real_type &gt; &amp;g_new, const aRealMPITopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga6bb2ee2164fcf188a5825f83877ce5e6</anchor>
      <arglist>(const aRealMPITopology3d&lt; real_type &gt; &amp;g_new, const aRealMPITopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga242fe992f5f60ebd05b9d60dd800e725</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const aRealMPITopology2d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU, std::string method=&quot;dg&quot;)</arglist>
    </member>
    <member kind="function">
      <type>dg::MIHMatrix_t&lt; real_type &gt;</type>
      <name>interpolation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gabc58c92d669aea984f9f5a6b5129190e</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;x, const thrust::host_vector&lt; real_type &gt; &amp;y, const thrust::host_vector&lt; real_type &gt; &amp;z, const aRealMPITopology2d&lt; real_type &gt; &amp;g, dg::bc bcx=dg::NEU, dg::bc bcy=dg::NEU, dg::bc bcz=dg::PER, std::string method=&quot;linear&quot;)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga960c598e8d895bc725aca898addf3ad4</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g_new, const RealGrid1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga47227ef2f447fcd96c64119676b370a8</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g_new, const aRealTopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga8cc266e144f7c72cd40809727ee970fe</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g_new, const aRealTopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>diagonal</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga2c6f55f5cdacb323a66a4ef99c4aa849</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;diagonal)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gae1acd5229e37e86c014468f8a7029abf</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g_new, const RealGrid1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gad20d227f6c8cb2547e757852413dbe7b</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g_new, const aRealTopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gad77a4a2cbeabce81c6a7bfdbfd5871cc</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g_new, const aRealTopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>transformation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga6b8bdd9c1752a8d88a683f816f182f3d</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g_new, const aRealTopology3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>transformation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gab4b6355e9c86c83ee4555781daa429cf</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g_new, const aRealTopology2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>transformation</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga69ae54a688a91889650a636f7245b6cd</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g_new, const RealGrid1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga8cd81655e5b3de445bfc3fee6caa9b95</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g_new, const RealGridX1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga095fd7d647e30d3cd9abc9b3fbe0cca1</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g_new, const aRealTopologyX2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>interpolationT</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga70308c71453e2014553163b5c097ce12</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g_new, const aRealTopologyX3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gae51d004fa4abfa57f13502617ba184c6</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g_new, const RealGridX1d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>ga5e117be1d538fffb647d858e1325cdf6</anchor>
      <arglist>(const aRealTopologyX2d&lt; real_type &gt; &amp;g_new, const aRealTopologyX2d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>projection</name>
      <anchorfile>group__interpolation.html</anchorfile>
      <anchor>gafb82763a4a75e035022ae1d0ee6fe55c</anchor>
      <arglist>(const aRealTopologyX3d&lt; real_type &gt; &amp;g_new, const aRealTopologyX3d&lt; real_type &gt; &amp;g_old)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>utilities</name>
    <title>Averaging</title>
    <filename>group__utilities.html</filename>
    <class kind="struct">dg::Average</class>
    <class kind="struct">dg::Average&lt; MPI_Vector&lt; container &gt; &gt;</class>
  </compound>
  <compound kind="group">
    <name>scatter</name>
    <title>Scatter and Gather</title>
    <filename>group__scatter.html</filename>
    <member kind="typedef">
      <type>std::conditional_t&lt; std::is_const&lt; MPIContainer &gt;::value, MPI_Vector&lt; View&lt; const typename MPIContainer::container_type &gt; &gt;, MPI_Vector&lt; View&lt; typename MPIContainer::container_type &gt; &gt; &gt;</type>
      <name>get_mpi_view_type</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga0dfee7e9924d22270433283dab1799c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>global2local</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gadb538d54e0a5a47fd2f810910f2b42bd</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;global, const aRealMPITopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>global2local</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga4b115ff16353ceadca2c0f63d7d42214</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;global, const aRealMPITopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gab3c8c6e962a08fd1f5a9ae432959fe6a</anchor>
      <arglist>(SharedContainer &amp;in, std::vector&lt; View&lt; SharedContainer &gt; &gt; &amp;out, const aRealTopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; View&lt; SharedContainer &gt; &gt;</type>
      <name>split</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gac53bcdbcd4965f823b0e42b3f6bc4934</anchor>
      <arglist>(SharedContainer &amp;in, const aRealTopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign3dfrom2d</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga0821f41b95af4def23af0a71a64ae3d2</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;in2d, Container &amp;out, const aRealTopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga4a2763b6f9cfb9187f02b0c3fc07b60b</anchor>
      <arglist>(MPIContainer &amp;in, std::vector&lt; get_mpi_view_type&lt; MPIContainer &gt; &gt; &amp;out, const aRealMPITopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; get_mpi_view_type&lt; MPIContainer &gt; &gt;</type>
      <name>split</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gaee4537d6d483858e5bd28ad77607ffb8</anchor>
      <arglist>(MPIContainer &amp;in, const aRealMPITopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign3dfrom2d</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga338acc974d9ae6068439a7ea35500fb5</anchor>
      <arglist>(const MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt; &amp;in2d, MPI_Vector&lt; LocalContainer &gt; &amp;out, const aRealMPITopology3d&lt; real_type &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>dg::IHMatrix</type>
      <name>backscatter</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>ga6415fe1f11cea3b08b41972e3039b3cc</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>dg::IHMatrix</type>
      <name>backscatter</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gab00ad9a6f01a6845f6a48be0bae639d9</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>dg::IHMatrix</type>
      <name>backscatter</name>
      <anchorfile>group__scatter.html</anchorfile>
      <anchor>gaf01302b85e93b5461ecd500a29daca4b</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>geometry</name>
    <title>Geometric grids and tensor operations</title>
    <filename>group__geometry.html</filename>
    <subgroup>basicgeometry</subgroup>
    <subgroup>pullback</subgroup>
    <subgroup>metric</subgroup>
    <subgroup>generators</subgroup>
    <class kind="struct">dg::RealCartesianGrid2d</class>
    <class kind="struct">dg::RealCartesianGrid3d</class>
    <class kind="struct">dg::RealCylindricalGrid3d</class>
    <class kind="struct">dg::RealCartesianGridX2d</class>
    <class kind="struct">dg::RealCartesianGridX3d</class>
    <class kind="struct">dg::RealCartesianMPIGrid2d</class>
    <class kind="struct">dg::RealCartesianMPIGrid3d</class>
    <class kind="struct">dg::RealCylindricalMPIGrid3d</class>
    <class kind="struct">dg::RealCartesianRefinedGrid2d</class>
    <class kind="struct">dg::RealCartesianRefinedGrid3d</class>
    <class kind="struct">dg::RealCartesianRefinedGridX2d</class>
    <class kind="struct">dg::RealCartesianRefinedGridX3d</class>
  </compound>
  <compound kind="group">
    <name>basicgeometry</name>
    <title>Geometry base classes</title>
    <filename>group__basicgeometry.html</filename>
    <class kind="struct">dg::aRealGeometry2d</class>
    <class kind="struct">dg::aRealGeometry3d</class>
    <class kind="struct">dg::aRealProductGeometry3d</class>
    <class kind="struct">dg::aRealGeometryX2d</class>
    <class kind="struct">dg::aRealGeometryX3d</class>
    <class kind="struct">dg::aRealMPIGeometry2d</class>
    <class kind="struct">dg::aRealMPIGeometry3d</class>
    <class kind="struct">dg::aRealProductMPIGeometry3d</class>
  </compound>
  <compound kind="group">
    <name>pullback</name>
    <title>pullback and pushforward</title>
    <filename>group__pullback.html</filename>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>ga2ded9cafaf270f37c3244e20f1712d1d</anchor>
      <arglist>(const Functor &amp;f, const aRealGeometryX2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>gaf86ba85b41523249e5944efc9fc0aec9</anchor>
      <arglist>(const Functor &amp;f, const aRealGeometryX3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>ga26cd8cf86c9a9d99ca23d153de1e60fd</anchor>
      <arglist>(const Functor &amp;f, const aRealGeometry2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>ga9c2b51bebd46cc7df7d889e577705d1e</anchor>
      <arglist>(const Functor &amp;f, const aRealGeometry3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>gae45584831ec2f50a2c237d709c9ff555</anchor>
      <arglist>(const Functor &amp;f, const aRealMPIGeometry2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPI_Vector&lt; thrust::host_vector&lt; real_type &gt; &gt;</type>
      <name>pullback</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>gad6f6fccd5946018b396e67d654ea8c84</anchor>
      <arglist>(const Functor &amp;f, const aRealMPIGeometry3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushForwardPerp</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>gab8b4c0a46bf70e59e456df9bf8a68e0d</anchor>
      <arglist>(const Functor1 &amp;vR, const Functor2 &amp;vZ, container &amp;vx, container &amp;vy, const Geometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushForward</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>gaf1b8e5426e47a83f079b723dcad325e5</anchor>
      <arglist>(const Functor1 &amp;vR, const Functor2 &amp;vZ, const Functor3 &amp;vPhi, container &amp;vx, container &amp;vy, container &amp;vz, const Geometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushForwardPerp</name>
      <anchorfile>group__pullback.html</anchorfile>
      <anchor>ga0184e8f7d99dcfde909c850ff4f85c0b</anchor>
      <arglist>(const FunctorRR &amp;chiRR, const FunctorRZ &amp;chiRZ, const FunctorZZ &amp;chiZZ, SparseTensor&lt; container &gt; &amp;chi, const Geometry &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>metric</name>
    <title>create volume</title>
    <filename>group__metric.html</filename>
    <member kind="function">
      <type>get_host_vector&lt; Geometry &gt;</type>
      <name>volume</name>
      <anchorfile>group__metric.html</anchorfile>
      <anchor>ga4408e71f634fa4398fac88a257ffcc89</anchor>
      <arglist>(const Geometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>get_host_vector&lt; Geometry &gt;</type>
      <name>inv_volume</name>
      <anchorfile>group__metric.html</anchorfile>
      <anchor>ga7b03efdfdf0c58b6a326ac2776319395</anchor>
      <arglist>(const Geometry &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>generators</name>
    <title>Grid Generator classes</title>
    <filename>group__generators.html</filename>
    <class kind="struct">dg::aRealRefinement1d</class>
    <class kind="struct">dg::RealIdentityRefinement</class>
    <class kind="struct">dg::RealLinearRefinement</class>
    <class kind="struct">dg::RealFemRefinement</class>
    <class kind="struct">dg::RealEquidistRefinement</class>
    <class kind="struct">dg::RealExponentialRefinement</class>
    <class kind="struct">dg::aRealRefinementX2d</class>
    <class kind="struct">dg::RealIdentityXRefinement</class>
    <class kind="struct">dg::RealEquidistXRefinement</class>
    <class kind="struct">dg::RealExponentialXRefinement</class>
    <member kind="typedef">
      <type>dg::aRealRefinement1d&lt; double &gt;</type>
      <name>aRefinement1d</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga1cfe6f739503af0dfefa5b9d73cacd94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealIdentityRefinement&lt; double &gt;</type>
      <name>IdentityRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>gab93b3c971661bfaa425029fc3d56261f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealFemRefinement&lt; double &gt;</type>
      <name>FemRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga96aaed7d8d2ab88c86583a7b336ebb56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealLinearRefinement&lt; double &gt;</type>
      <name>LinearRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga00a2c4dee1c9df122dcb22d33773a70c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealEquidistRefinement&lt; double &gt;</type>
      <name>EquidistRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga1fc3ed9c0e84086363c957a8aaa60c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealExponentialRefinement&lt; double &gt;</type>
      <name>ExponentialRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>gac68dab098eb0c98222e98ad836e8f346</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealRefinementX2d&lt; double &gt;</type>
      <name>aRefinementX2d</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga1f0f5348b03f19a4e51d6cfc155e65f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealIdentityXRefinement&lt; double &gt;</type>
      <name>IdentityXRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>gaa0a0bdd0f1b1312461690645efaca772</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealEquidistXRefinement&lt; double &gt;</type>
      <name>EquidistXRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>gaa62609aff1a674f8d677c75b034846d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealExponentialXRefinement&lt; double &gt;</type>
      <name>ExponentialXRefinement</name>
      <anchorfile>group__generators.html</anchorfile>
      <anchor>ga6799c46023dafaa5e880a984f34305c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>fem</name>
    <title>Finite Element Method</title>
    <filename>group__fem.html</filename>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>fem_mass</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>gabd1b40338e8296bc00e42df29678c873</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, real_type, cusp::host_memory &gt;</type>
      <name>fem_mass</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga116c4870cf1637435961581862e2667e</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga5acc91a2f306c8e308ae2852c19ae07c</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_inv_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga2efe4e6894729acbcba212098aa4562a</anchor>
      <arglist>(const RealGrid1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga9fd627e66c3538c683f61fa5fa70f6e0</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_inv_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga7f1dfd53d8e8fe53bbb75bf5df6cd3ba</anchor>
      <arglist>(const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga494fca053f848efb2e40f021c5d02394</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>fem_inv_weights</name>
      <anchorfile>group__fem.html</anchorfile>
      <anchor>ga41ed82be7020ca564607c1d44c6dd352</anchor>
      <arglist>(const aRealTopology3d&lt; real_type &gt; &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>gridtypes</name>
    <title>Useful Typedefs</title>
    <filename>group__gridtypes.html</filename>
    <namespace>dg::x</namespace>
    <member kind="typedef">
      <type>dg::aRealGeometry2d&lt; double &gt;</type>
      <name>aGeometry2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga0194a345f358474eacd0d8fd668ddeb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealGeometry3d&lt; double &gt;</type>
      <name>aGeometry3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga98e551dd078cf173433853670e84d61a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealProductGeometry3d&lt; double &gt;</type>
      <name>aProductGeometry3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gad3d6bea9081a22d2133ce8c42bd5ca46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianGrid2d&lt; double &gt;</type>
      <name>CartesianGrid2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga8df51fc7b7ca691497cc76208da946a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianGrid3d&lt; double &gt;</type>
      <name>CartesianGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga5d7dacfc7e0b065aaa9d8eda3c82a6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCylindricalGrid3d&lt; double &gt;</type>
      <name>CylindricalGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga084778c740b05f14f00bce5c2b5d75e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianGridX2d&lt; double &gt;</type>
      <name>CartesianGridX2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga92f04deac4da71794ee5da5bbdf70d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianGridX3d&lt; double &gt;</type>
      <name>CartesianGridX3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga4ce9a25eebe969f45e73cc953a777891</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealGeometryX2d&lt; double &gt;</type>
      <name>aGeometryX2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga1614909b8085b3521f6eb6a8a7ee2185</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealGeometryX3d&lt; double &gt;</type>
      <name>aGeometryX3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga669637061097e77d4bfede9e74182b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealGrid1d&lt; double &gt;</type>
      <name>Grid1d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga1dd5120253a8a63c3b1ecdd503d6dac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealGrid2d&lt; double &gt;</type>
      <name>Grid2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga4d84634067b1b3362041e211eec4de84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealGrid3d&lt; double &gt;</type>
      <name>Grid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga4a2b08e9a966ea6fe55c74c5c832aabe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealTopology2d&lt; double &gt;</type>
      <name>aTopology2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gae3d12cf3fe25ad7c9ce423df0b5cd5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealTopology3d&lt; double &gt;</type>
      <name>aTopology3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga534001144a75391bd6311a94f1dc6320</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealGridX1d&lt; double &gt;</type>
      <name>GridX1d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga0af6916b3752957a6ab24e32ac1e7d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealGridX2d&lt; double &gt;</type>
      <name>GridX2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gac83f5fa2cb79334851ef12c378caefe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealGridX3d&lt; double &gt;</type>
      <name>GridX3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gae37be47c44253be52072011d75b6f3ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealTopologyX2d&lt; double &gt;</type>
      <name>aTopologyX2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga1d1e9c917d1991849546462956339642</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealTopologyX3d&lt; double &gt;</type>
      <name>aTopologyX3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga203d6aafc7b2b6fc35a1659272e5a4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealMPIGeometry2d&lt; double &gt;</type>
      <name>aMPIGeometry2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gaa3154d7bab772d2d51f7010838dc36a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealMPIGeometry3d&lt; double &gt;</type>
      <name>aMPIGeometry3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gad92589a12524a79d7bf8feb9c1caccf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealProductMPIGeometry3d&lt; double &gt;</type>
      <name>aProductMPIGeometry3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga4f8e4aa131946e62c3a8b0325956c73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianMPIGrid2d&lt; double &gt;</type>
      <name>CartesianMPIGrid2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga7d8cf3138d84796c7a013f37dda88503</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianMPIGrid3d&lt; double &gt;</type>
      <name>CartesianMPIGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga7a76afa6dd6d1bc5a1f8c115ab776269</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCylindricalMPIGrid3d&lt; double &gt;</type>
      <name>CylindricalMPIGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gab33670c0099181705eda87bf1429b81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealMPIGrid2d&lt; double &gt;</type>
      <name>MPIGrid2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga492b972b6b0822517291a1c0de786996</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealMPIGrid3d&lt; double &gt;</type>
      <name>MPIGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga1a7b625b75effa1be77424511e8a6a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealMPITopology2d&lt; double &gt;</type>
      <name>aMPITopology2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga19c78bb35e3a4a7192c5e484b7dbf8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::aRealMPITopology3d&lt; double &gt;</type>
      <name>aMPITopology3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gab52aaf1578631594a9423e604b2e1232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianRefinedGrid2d&lt; double &gt;</type>
      <name>CartesianRefinedGrid2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gae33f770d1c46285a962e8fb273740847</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianRefinedGrid3d&lt; double &gt;</type>
      <name>CartesianRefinedGrid3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>gad86a5ae145abeee9327d23b8835f5624</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianRefinedGridX2d&lt; double &gt;</type>
      <name>CartesianRefinedGridX2d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga36bab6ae6eb7da83bcf744b97758fb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dg::RealCartesianRefinedGridX3d&lt; double &gt;</type>
      <name>CartesianRefinedGridX3d</name>
      <anchorfile>group__gridtypes.html</anchorfile>
      <anchor>ga3e02ec4002805e3ba330748bdd1168f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>numerical1</name>
    <title>Level 4: Advanced numerical schemes</title>
    <filename>group__numerical1.html</filename>
    <subgroup>arakawa</subgroup>
    <subgroup>matrixoperators</subgroup>
    <subgroup>multigrid</subgroup>
  </compound>
  <compound kind="group">
    <name>arakawa</name>
    <title>Advection terms</title>
    <filename>group__arakawa.html</filename>
    <class kind="struct">dg::Advection</class>
    <class kind="struct">dg::ArakawaX</class>
    <class kind="struct">dg::Poisson</class>
  </compound>
  <compound kind="group">
    <name>matrixoperators</name>
    <title>Matrix operators</title>
    <filename>group__matrixoperators.html</filename>
    <class kind="class">dg::Elliptic</class>
    <class kind="class">dg::Elliptic3d</class>
    <class kind="struct">dg::Helmholtz</class>
    <class kind="struct">dg::Helmholtz3d</class>
    <class kind="struct">dg::Helmholtz2</class>
    <class kind="class">dg::RefinedElliptic</class>
    <member kind="typedef">
      <type>Elliptic&lt; Geometry, Matrix, Container &gt;</type>
      <name>Elliptic2d</name>
      <anchorfile>group__matrixoperators.html</anchorfile>
      <anchor>gae40a319b095c51491395216d59fd8645</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Helmholtz&lt; Geometry, Matrix, Container &gt;</type>
      <name>Helmholtz2d</name>
      <anchorfile>group__matrixoperators.html</anchorfile>
      <anchor>ga97e96ca43b1ba76d3f820afc72b1d753</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>multigrid</name>
    <title>Multigrid matrix inversion</title>
    <filename>group__multigrid.html</filename>
    <class kind="struct">dg::NestedGrids</class>
    <class kind="struct">dg::MultigridCG2d</class>
    <member kind="function">
      <type>void</type>
      <name>nested_iterations</name>
      <anchorfile>group__multigrid.html</anchorfile>
      <anchor>ga1aca7222c69b765e8d304791595c09cb</anchor>
      <arglist>(NestedOperator &amp;&amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op, Nested &amp;nested)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multigrid_cycle</name>
      <anchorfile>group__multigrid.html</anchorfile>
      <anchor>ga7350dc0405686518b82a740bd74b5584</anchor>
      <arglist>(NestedOperator &amp;&amp;op, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_down, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_up, Nested &amp;nested, unsigned gamma, unsigned p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>full_multigrid</name>
      <anchorfile>group__multigrid.html</anchorfile>
      <anchor>ga72b81008cfe6a0d945666c780fa51460</anchor>
      <arglist>(NestedOperator &amp;&amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_down, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_up, Nested &amp;nested, unsigned gamma, unsigned mu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fmg_solve</name>
      <anchorfile>group__multigrid.html</anchorfile>
      <anchor>ga45acbff86a36af9288623b670de0a882</anchor>
      <arglist>(NestedOperator &amp;&amp;op, ContainerType0 &amp;x, const ContainerType1 &amp;b, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_down, const std::vector&lt; std::function&lt; void(const ContainerType1 &amp;, ContainerType0 &amp;)&gt; &gt; &amp;inverse_op_up, Nested &amp;nested, const ContainerType2 &amp;weights, double eps, unsigned gamma)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>misc</name>
    <title>Level 0: Miscellaneous additions</title>
    <filename>group__misc.html</filename>
    <subgroup>timer</subgroup>
    <subgroup>blas1_helpers</subgroup>
    <subgroup>lowlevel</subgroup>
    <class kind="class">dg::Message</class>
    <class kind="class">dg::Error</class>
    <class kind="struct">dg::Fail</class>
    <class kind="struct">dg::MultiMatrix</class>
    <class kind="struct">dg::ModalFilter</class>
    <class kind="class">dg::NoRoot1d</class>
    <member kind="function">
      <type>void</type>
      <name>transpose</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>gaf9b1ec92041d094f14481ad8169d12c4</anchor>
      <arglist>(unsigned nx, unsigned ny, const ContainerType &amp;in, ContainerType &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extend_line</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga22daca05d0d7672ed8c4f5da982cf49b</anchor>
      <arglist>(unsigned nx, unsigned ny, const ContainerType &amp;in, ContainerType &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extend_column</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga00707a09c19ba5fdde979339ae959506</anchor>
      <arglist>(unsigned nx, unsigned ny, const ContainerType &amp;in, ContainerType &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>gac50f6a57627e38ea44e3666543a6c878</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init2d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga057746b047d7696a603d27bdaff24f29</anchor>
      <arglist>(dg::bc bcx, dg::bc bcy, MPI_Comm &amp;comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init2d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga632d3e4c7753d9988a16be5cb0ba3e05</anchor>
      <arglist>(unsigned &amp;n, unsigned &amp;Nx, unsigned &amp;Ny, MPI_Comm comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init2d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga89f67b920ce6f3958eea9e94d00a72fa</anchor>
      <arglist>(dg::bc bcx, dg::bc bcy, unsigned &amp;n, unsigned &amp;Nx, unsigned &amp;Ny, MPI_Comm &amp;comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init3d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga2ba128f78f1497a9d85fb97402f90791</anchor>
      <arglist>(dg::bc bcx, dg::bc bcy, dg::bc bcz, MPI_Comm &amp;comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init3d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga5af0e700d39ee4672deecff4c8bbee92</anchor>
      <arglist>(unsigned &amp;n, unsigned &amp;Nx, unsigned &amp;Ny, unsigned &amp;Nz, MPI_Comm comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mpi_init3d</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga08fc202782d026a385be5ac44f549c90</anchor>
      <arglist>(dg::bc bcx, dg::bc bcy, dg::bc bcz, unsigned &amp;n, unsigned &amp;Nx, unsigned &amp;Ny, unsigned &amp;Nz, MPI_Comm &amp;comm, std::istream &amp;is=std::cin, bool verbose=true)</arglist>
    </member>
    <member kind="function">
      <type>thrust::host_vector&lt; real_type &gt;</type>
      <name>forward_transform</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>gad09541da41129a4ccdb3623deaa5f364</anchor>
      <arglist>(const thrust::host_vector&lt; real_type &gt; &amp;in, const aRealTopology2d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcd</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>ga008408676aea2583d10dc001e9b8b9f1</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lcm</name>
      <anchorfile>group__misc.html</anchorfile>
      <anchor>gae521421a2db99cf793bb0f2cd5a16126</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>timer</name>
    <title>Timer class</title>
    <filename>group__timer.html</filename>
    <class kind="struct">dg::Timer</class>
  </compound>
  <compound kind="group">
    <name>blas1_helpers</name>
    <title>Functions and functors for subroutine and evaluate</title>
    <filename>group__blas1__helpers.html</filename>
    <subgroup>basics</subgroup>
    <subgroup>functions</subgroup>
    <subgroup>composition</subgroup>
    <subgroup>binary_operators</subgroup>
    <subgroup>variadic_evaluates</subgroup>
    <subgroup>variadic_subroutines</subgroup>
  </compound>
  <compound kind="group">
    <name>basics</name>
    <title>Simple</title>
    <filename>group__basics.html</filename>
    <class kind="struct">dg::ZERO</class>
    <class kind="struct">dg::ONE</class>
    <class kind="struct">dg::CONSTANT</class>
    <class kind="struct">dg::PLUS</class>
    <class kind="struct">dg::EXP</class>
    <class kind="struct">dg::LN</class>
    <class kind="struct">dg::SQRT</class>
    <class kind="struct">dg::Square</class>
    <class kind="struct">dg::InvSqrt</class>
    <class kind="struct">dg::INVERT</class>
    <class kind="struct">dg::ABS</class>
    <class kind="struct">dg::AbsMax</class>
    <class kind="struct">dg::AbsMin</class>
    <class kind="struct">dg::POSVALUE</class>
    <class kind="struct">dg::MOD</class>
    <class kind="struct">dg::ISNFINITE</class>
    <class kind="struct">dg::ISNSANE</class>
    <class kind="struct">dg::MinMod</class>
    <class kind="struct">dg::VanLeer</class>
    <class kind="struct">dg::Upwind</class>
    <class kind="struct">dg::UpwindProduct</class>
    <class kind="struct">dg::SlopeLimiter</class>
    <class kind="struct">dg::SlopeLimiterProduct</class>
    <class kind="struct">dg::IDENTITY</class>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gabab1bdc50508bd0f04f3cd0b45dd72e3</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gada629959f5298f4221d35fd8cb880a0d</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gae7ba1400d58619bc271c6611acf5994b</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gad1e45796f68232b124d0f5baea6fceca</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gad0bd961c4529039c4e651fc9e3901f60</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga6d27b092dcd9613c1c5eeaa1cf208e83</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooX1d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga21055512458a88c314621a912fb1417f</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooX2d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gadb49e10685e2bcdd8a27ef88f2857151</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooX3d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gadd9ae95517a739c80452afc7fc9c36ae</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooY2d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga5aa995cf5e888c9ee1026b78f6f78cc5</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooY3d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gaafbff988d4cff4a0643e819b3f6962cc</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooZ3d</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga89a354d8268ca0f86486a93683fda7d4</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooRZP2X</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga26a17efec5c3e1e916ebc05914f185b9</anchor>
      <arglist>(double R, double Z, double P)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooRZP2Y</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga801437c88f9b783bdadd96d81c110a8a</anchor>
      <arglist>(double R, double Z, double P)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE double</type>
      <name>cooRZP2Z</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gab6859f8360cdc1ab30404589070ca4e5</anchor>
      <arglist>(double R, double Z, double P)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga6157ca9bd4d2ffec4b6bd7c22ed073fe</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga99d493917c25c36d4e82248fcebd7550</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>one</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>gabadfb8fdc2962f824d2b1fe1c0e73cd5</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga44292f31f77c0cad8a3d8e0a88c7840b</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga0b38e6d17d96de78beedafc4c9e4437e</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DG_DEVICE float</type>
      <name>zero</name>
      <anchorfile>group__basics.html</anchorfile>
      <anchor>ga43b7fe30d4e22f1cf3dace0dd474c7d9</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>functions</name>
    <title>A large collection</title>
    <filename>group__functions.html</filename>
    <class kind="struct">dg::Iris</class>
    <class kind="struct">dg::Pupil</class>
    <class kind="struct">dg::PsiPupil</class>
    <class kind="struct">dg::Heaviside</class>
    <class kind="struct">dg::Distance</class>
    <class kind="struct">dg::Line</class>
    <class kind="struct">dg::LinearX</class>
    <class kind="struct">dg::LinearY</class>
    <class kind="struct">dg::LinearZ</class>
    <class kind="struct">dg::Gaussian</class>
    <class kind="struct">dg::Cauchy</class>
    <class kind="struct">dg::Gaussian3d</class>
    <class kind="struct">dg::GaussianX</class>
    <class kind="struct">dg::GaussianY</class>
    <class kind="struct">dg::GaussianZ</class>
    <class kind="struct">dg::IslandXY</class>
    <class kind="struct">dg::SinXSinY</class>
    <class kind="struct">dg::CosXCosY</class>
    <class kind="struct">dg::SinXCosY</class>
    <class kind="struct">dg::SinX</class>
    <class kind="struct">dg::SinY</class>
    <class kind="struct">dg::CosY</class>
    <class kind="struct">dg::InvCoshXsq</class>
    <class kind="struct">dg::SinProfX</class>
    <class kind="struct">dg::ExpProfX</class>
    <class kind="struct">dg::GaussianDamping</class>
    <class kind="struct">dg::TanhProfX</class>
    <class kind="struct">dg::PolynomialHeaviside</class>
    <class kind="struct">dg::PolynomialRectangle</class>
    <class kind="struct">dg::IPolynomialHeaviside</class>
    <class kind="struct">dg::DPolynomialHeaviside</class>
    <class kind="struct">dg::ExponentialFilter</class>
    <class kind="struct">dg::Lamb</class>
    <class kind="struct">dg::Vortex</class>
    <class kind="struct">dg::BathRZ</class>
    <class kind="struct">dg::Horner2d</class>
    <class kind="struct">dg::Histogram</class>
    <class kind="struct">dg::Histogram2D</class>
    <class kind="struct">dg::WallDistance</class>
  </compound>
  <compound kind="group">
    <name>composition</name>
    <title>Composition of two or more functors</title>
    <filename>group__composition.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>compose</name>
      <anchorfile>group__composition.html</anchorfile>
      <anchor>gad6daa85bcb28b9caa934ed25dcc6f2bc</anchor>
      <arglist>(UnaryOp f, Functor g)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>compose</name>
      <anchorfile>group__composition.html</anchorfile>
      <anchor>ga13fbfae48d792100f96097c6df0376ab</anchor>
      <arglist>(UnaryOp f0, Functors... fs)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>binary_operators</name>
    <title>blas1::evaluate binary operators</title>
    <filename>group__binary__operators.html</filename>
    <class kind="struct">dg::equals</class>
    <class kind="struct">dg::plus_equals</class>
    <class kind="struct">dg::minus_equals</class>
    <class kind="struct">dg::times_equals</class>
    <class kind="struct">dg::divides_equals</class>
    <class kind="struct">dg::Axpby</class>
    <class kind="struct">dg::AxyPby</class>
  </compound>
  <compound kind="group">
    <name>variadic_evaluates</name>
    <title>blas1::evaluate variadic functors</title>
    <filename>group__variadic__evaluates.html</filename>
    <class kind="struct">dg::TensorDot2d</class>
    <class kind="struct">dg::TensorDot3d</class>
    <class kind="struct">dg::TensorDeterminant2d</class>
    <class kind="struct">dg::TensorDeterminant3d</class>
    <class kind="struct">dg::divides</class>
    <class kind="struct">dg::Sum</class>
    <class kind="struct">dg::PairSum</class>
    <class kind="struct">dg::TripletSum</class>
  </compound>
  <compound kind="group">
    <name>variadic_subroutines</name>
    <title>blas1::subroutine subroutines</title>
    <filename>group__variadic__subroutines.html</filename>
    <class kind="struct">dg::TensorMultiply2d</class>
    <class kind="struct">dg::TensorMultiply3d</class>
    <class kind="struct">dg::InverseTensorMultiply2d</class>
    <class kind="struct">dg::InverseTensorMultiply3d</class>
    <class kind="struct">dg::EmbeddedPairSum</class>
    <class kind="struct">dg::Evaluate</class>
    <class kind="struct">dg::Scal</class>
    <class kind="struct">dg::Plus</class>
    <class kind="struct">dg::Axpby</class>
    <class kind="struct">dg::AxyPby</class>
    <class kind="struct">dg::Axpbypgz</class>
    <class kind="struct">dg::PointwiseDot</class>
    <class kind="struct">dg::PointwiseDivide</class>
  </compound>
  <compound kind="group">
    <name>lowlevel</name>
    <title>Lowlevel helper functions and classes</title>
    <filename>group__lowlevel.html</filename>
    <class kind="struct">dg::ClonePtr</class>
    <class kind="struct">dg::Buffer</class>
    <member kind="function">
      <type>Matrix</type>
      <name>transpose</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gaccb5652aaa2d450d97996d4eee6de546</anchor>
      <arglist>(const Matrix &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx_symm</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gabf3ebafa08e328b1a53e98f27cfae152</anchor>
      <arglist>(int n, int N, real_type h, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx_plus</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga656c48eec6285e73ae253885ca9a8634</anchor>
      <arglist>(int n, int N, real_type h, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx_minus</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gae4fb5a64296b4e1ab205ebbab96113fe</anchor>
      <arglist>(int n, int N, real_type h, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jump</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gad31885319d447aad09d97a6d5f3552df</anchor>
      <arglist>(int n, int N, real_type h, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx_normed</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga052a8bc5d6353c10a9a324c2b130662c</anchor>
      <arglist>(int n, int N, real_type h, bc bcx, direction dir)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga82911492f6bb854705f77b3b12bdfeb0</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g, bc bcx, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>dx</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gae9a4224590ae389ad268084951dc8ee5</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g, direction dir=centered)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jump</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga4699f194917d333cb1b472578a4f4d8a</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g, bc bcx)</arglist>
    </member>
    <member kind="function">
      <type>EllSparseBlockMat&lt; real_type &gt;</type>
      <name>jump</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga17099f026e1ea2fa59db15d8ed9b2adc</anchor>
      <arglist>(const RealGridX1d&lt; real_type &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>delta</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gaa01304433dafdd46521a80931624e3ab</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>pipj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga4eda51075f016d1ed364317fc6127021</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>pipj_inv</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gae4413d3fb853db9ef8c7a14dc2d2411c</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>pidxpj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gab64b84ba1977a189256d9cff316e83b5</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>rirj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga9b7c40ad20cfbf37b5a95346c65ec3dc</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>rilj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga9f0c1f9f511c1bde286a9bbc182cdc62</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>lirj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga0073b9ef0b3263faa43f5d949b80bebb</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>lilj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gaf7e53181fceca7316f1ad9eb39f01280</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>ninj</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gafba959205e1aae03847f39b244ae065f</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>weights</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga29b3f19987d7fdbd6cc0cd704498a951</anchor>
      <arglist>(const DLT&lt; real_type &gt; &amp;dlt)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; real_type &gt;</type>
      <name>precond</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga8df4669ca0584fcf2b027a5485b0dc9f</anchor>
      <arglist>(const DLT&lt; real_type &gt; &amp;dlt)</arglist>
    </member>
    <member kind="function">
      <type>Operator&lt; T &gt;</type>
      <name>tensorproduct</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga25d57ef17c414c1f1b7925c49b43e256</anchor>
      <arglist>(const Operator&lt; T &gt; &amp;op1, const Operator&lt; T &gt; &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, T, cusp::host_memory &gt;</type>
      <name>tensorproduct</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gad66cb579087e7c2104ea1f23bf2e0f01</anchor>
      <arglist>(unsigned N, const Operator&lt; T &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, T, cusp::host_memory &gt;</type>
      <name>sandwich</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>ga3cd6e8f0b5021e66f03fe7010e921c2e</anchor>
      <arglist>(const Operator&lt; T &gt; &amp;left, const cusp::coo_matrix&lt; int, T, cusp::host_memory &gt; &amp;m, const Operator&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>cusp::coo_matrix&lt; int, T, cusp::host_memory &gt;</type>
      <name>tensorproduct</name>
      <anchorfile>group__lowlevel.html</anchorfile>
      <anchor>gab315055e9fda5fb02a13483bf99d368a</anchor>
      <arglist>(const cusp::coo_matrix&lt; int, T, cusp::host_memory &gt; &amp;lhs, const cusp::coo_matrix&lt; int, T, cusp::host_memory &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Discontinuous Galerkin Library</title>
    <filename>index.html</filename>
  </compound>
</tagfile>
